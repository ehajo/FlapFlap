   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,1
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_scu.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_SCU_CalcTSEVAR,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_SCU_CalcTSEVAR:
  23              	.LFB50:
  24              	 .file 1 "../Libraries/XMCLib/src/xmc1_scu.c"
   1:../Libraries/XMCLib/src/xmc1_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc1_scu.c ****  * @file xmc1_scu.c
   3:../Libraries/XMCLib/src/xmc1_scu.c ****  * @date 2017-06-24
   4:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc1_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc1_scu.c ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc1_scu.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_scu.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  12:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc1_scu.c ****  * following conditions are met:
  14:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  15:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer.
  17:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  18:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  21:../Libraries/XMCLib/src/xmc1_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc1_scu.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  24:../Libraries/XMCLib/src/xmc1_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc1_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc1_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc1_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc1_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc1_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc1_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  32:../Libraries/XMCLib/src/xmc1_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc1_scu.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc1_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc1_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  42:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_StartTempMeasurement API is modified
  44:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_ASSERT statements are added in XMC_SCU_INTERRUPT_SetEventHandler
  45:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  46:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus APIs are added
  50:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  51:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-09-23:
  52:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC1400 support added
  53:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  54:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-11-30:
  55:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Documentation improved
  56:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  57:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-02-29:
  58:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_ScaleMCLKFrequency
  59:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues with down clock frequency scaling
  60:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-04-15:
  62:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_Init for XMC1400
  63:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues when trying to disable the OSCHP and use the XTAL pins as GPIO
  64:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  65:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-02-09
  66:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - At XMC_SCU_CLOCK_Init() fixed issue while reading oscillator watchdog status
  67:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  68:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-04-11:
  69:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_SetBMI()
  70:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  71:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-06-24
  72:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bit 11 of BMI
  73:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  74:../Libraries/XMCLib/src/xmc1_scu.c ****  * @endcond
  75:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  76:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  77:../Libraries/XMCLib/src/xmc1_scu.c **** 
  78:../Libraries/XMCLib/src/xmc1_scu.c **** /**
  79:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  80:../Libraries/XMCLib/src/xmc1_scu.c ****  * @brief SCU low level driver API prototype definition for XMC1 family of microcontrollers <br>
  81:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  82:../Libraries/XMCLib/src/xmc1_scu.c ****  * <b>Detailed description of file</b> <br>
  83:../Libraries/XMCLib/src/xmc1_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  84:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  85:../Libraries/XMCLib/src/xmc1_scu.c ****  * ----Temperature Monitoring, Voltage Monitoring, CCU Start etc
  86:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  87:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_)<br>
  88:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Clock initialization, Clock Gating, Sleep Management etc
  89:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  90:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
  91:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Reset Init, Cause, Manual Reset Assert/Deassert etc
  92:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  93:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_)<br>
  94:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Initialization, Manual Assert/Deassert, Acknowledge etc
  95:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  96:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  97:../Libraries/XMCLib/src/xmc1_scu.c **** 
  98:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
  99:../Libraries/XMCLib/src/xmc1_scu.c ****  * HEADER FILES
 100:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 101:../Libraries/XMCLib/src/xmc1_scu.c **** #include <xmc_scu.h>
 102:../Libraries/XMCLib/src/xmc1_scu.c **** 
 103:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_FAMILY == XMC1
 104:../Libraries/XMCLib/src/xmc1_scu.c **** 
 105:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 106:../Libraries/XMCLib/src/xmc1_scu.c ****  * MACROS
 107:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 108:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_IRQ_NUM             (3U)  /**< array index value for list of events that can generate S
 109:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_ENABLE  (195UL) /**< Password for enabling protection */
 110:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_DISABLE (192UL) /**< Password for disabling protection */
 111:../Libraries/XMCLib/src/xmc1_scu.c **** 
 112:../Libraries/XMCLib/src/xmc1_scu.c **** 
 113:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_CHECK_RTCCLKSRC(source)       ( (source == XMC_SCU_CLOCK_RTCCLKSRC_DCO2) || \
 114:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ERU_IOUT0) || \
 115:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP0_OUT) || \
 116:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP1_OUT) || \
 117:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP2_OUT) ) /**
 118:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 whe
 119:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 clo
 120:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 or 
 121:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Msk SCU_GENERAL_INTCR0_INTSEL0_Msk /**< Mask value of Interrupt So
 122:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 0 */
 123:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Size SCU_GENERAL_INTCR0_INTSEL1_Pos /**< Bit position value of Int
 124:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 1 */
 125:../Libraries/XMCLib/src/xmc1_scu.c **** 
 126:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T1   (0x10000F30U) /**< d is a constant data can be retrieved from Flash sector 0 t
 127:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 128:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T2   (0x10000F31U) /**< e is a constant data can be retrieved from Flash sector 0 t
 129:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 130:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T1 (0x10000F32U) /**< b is a constant data can be retrieved from Flash sector 0 t
 131:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 132:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T2 (0x10000F33U) /**< a is a constant data can be retrieved from Flash sector 0 t
 133:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 134:../Libraries/XMCLib/src/xmc1_scu.c **** 
 135:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 136:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (64U) /**< Maximum supported SCU events for XMC14 device. */
 137:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 138:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (32U)  /**< Maximum supported SCU events for XMC11/12/13 device
 139:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 140:../Libraries/XMCLib/src/xmc1_scu.c **** 
 141:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 142:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q22_10 (48000U << 10) /**< used to configures main clock (MCLK) fre
 143:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC14 d
 144:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 145:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q24_8 (32000U << 8) /**< used to configures main clock (MCLK) frequ
 146:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC11/1
 147:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 148:../Libraries/XMCLib/src/xmc1_scu.c **** 
 149:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_BmiInstallationReq \
 150:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t requestedBmiValue))0x00000108U)) /**< Pointer to Request BMI ins
 151:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          available inside ROM. */
 152:../Libraries/XMCLib/src/xmc1_scu.c **** 
 153:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTemperature \
 154:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(void))0x0000010cU)) /**<  Pointer to Calculate chip temperature routine i
 155:../Libraries/XMCLib/src/xmc1_scu.c ****                                                     available inside ROM. */
 156:../Libraries/XMCLib/src/xmc1_scu.c **** 
 157:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTSEVAR \
 158:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t temperature))0x00000120U)) /**<  Pointer to Calculate target lev
 159:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                     comparison routine is available
 160:../Libraries/XMCLib/src/xmc1_scu.c ****         
 161:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 162:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL DATA
 163:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 164:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For 
 165:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         functions o
 166:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         occurrence.
 167:../Libraries/XMCLib/src/xmc1_scu.c **** 
 168:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_t event_masks[SCU_IRQ_NUM] =
 169:../Libraries/XMCLib/src/xmc1_scu.c **** {
 170:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR |
 171:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED |
 172:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PESRAM |
 173:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC0 |
 174:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 175:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC1 |
 176:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 177:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 178:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEMCAN |
 179:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 180:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 181:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK |
 182:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 183:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOCI),
 184:../Libraries/XMCLib/src/xmc1_scu.c **** 
 185:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL |
 186:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 187:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC |
 188:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 189:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDDPI |
 190:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDROP |
 191:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VCLIP |
 192:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_DONE |
 193:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_HIGH |
 194:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_LOW |
 195:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_WDT_WARN |
 196:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC |
 197:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_ALARM |
 198:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED |
 199:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED |
 200:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED |
 201:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED |
 202:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED),
 203:../Libraries/XMCLib/src/xmc1_scu.c **** 
 204:../Libraries/XMCLib/src/xmc1_scu.c ****   (
 205:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 206:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC0 |
 207:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC1 |
 208:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC2 |
 209:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC3 |
 210:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC4 |
 211:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC5 |
 212:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC6 |
 213:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC7 |
 214:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 215:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 216:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP0 |
 217:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP1 |
 218:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP2 |
 219:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 220:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP3 |
 221:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 222:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 223:../Libraries/XMCLib/src/xmc1_scu.c ****    0)
 224:../Libraries/XMCLib/src/xmc1_scu.c **** }; /**<   Defines list of events that can generate SCU interrupt and also indicates SCU events mapp
 225:../Libraries/XMCLib/src/xmc1_scu.c ****          service request number. These event mask values can be used to verify which event is trigg
 226:../Libraries/XMCLib/src/xmc1_scu.c ****          to service request number during runtime. All the event items are tabulated as per service
 227:../Libraries/XMCLib/src/xmc1_scu.c ****          table of SCU. */
 228:../Libraries/XMCLib/src/xmc1_scu.c **** 
 229:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 230:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL ROUTINES
 231:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 232:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 233:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t idiv);
 234:../Libraries/XMCLib/src/xmc1_scu.c **** 
 235:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 236:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t idiv);
 237:../Libraries/XMCLib/src/xmc1_scu.c **** 
 238:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the value which must be installed in ANATSEIx register to get indication in
 239:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_INTERRUPT->SRRAW  bit when the chip temperature is above/below some target/threshold. */
 240:../Libraries/XMCLib/src/xmc1_scu.c **** static uint32_t XMC_SCU_CalcTSEVAR(uint32_t temperature)
 241:../Libraries/XMCLib/src/xmc1_scu.c **** {
  25              	 .loc 1 241 0
  26              	 .cfi_startproc
  27              	.LVL0:
  28 0000 10B5     	 push {r4,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 8
  31              	 .cfi_offset 4,-8
  32              	 .cfi_offset 14,-4
  33 0002 041C     	 mov r4,r0
 242:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
 243:../Libraries/XMCLib/src/xmc1_scu.c **** 
 244:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CalcTSEVAR: temperature out of range", (temperature >= 233U) && (temperature 
 245:../Libraries/XMCLib/src/xmc1_scu.c **** 
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = ROM_CalcTSEVAR(temperature);
  34              	 .loc 1 246 0
  35 0004 9023     	 mov r3,#144
  36 0006 5B00     	 lsl r3,r3,#1
  37 0008 1B68     	 ldr r3,[r3]
  38 000a 9847     	 blx r3
  39              	.LVL1:
 247:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
  40              	 .loc 1 247 0
  41 000c 0028     	 cmp r0,#0
  42 000e 0BD1     	 bne .L2
 248:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 249:../Libraries/XMCLib/src/xmc1_scu.c ****     limit = ROM_CalcTSEVAR(temperature + 1U);
  43              	 .loc 1 249 0
  44 0010 9023     	 mov r3,#144
  45 0012 5B00     	 lsl r3,r3,#1
  46 0014 1B68     	 ldr r3,[r3]
  47 0016 601C     	 add r0,r4,#1
  48              	.LVL2:
  49 0018 9847     	 blx r3
  50              	.LVL3:
 250:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
  51              	 .loc 1 250 0
  52 001a 0028     	 cmp r0,#0
  53 001c 04D1     	 bne .L2
 251:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 252:../Libraries/XMCLib/src/xmc1_scu.c ****       limit = ROM_CalcTSEVAR(temperature - 1U);
  54              	 .loc 1 252 0
  55 001e 9023     	 mov r3,#144
  56 0020 5B00     	 lsl r3,r3,#1
  57 0022 1B68     	 ldr r3,[r3]
  58 0024 601E     	 sub r0,r4,#1
  59              	.LVL4:
  60 0026 9847     	 blx r3
  61              	.LVL5:
  62              	.L2:
 253:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 254:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 255:../Libraries/XMCLib/src/xmc1_scu.c ****   
 256:../Libraries/XMCLib/src/xmc1_scu.c ****   return (limit);
 257:../Libraries/XMCLib/src/xmc1_scu.c **** }
  63              	 .loc 1 257 0
  64              	 
  65              	.LVL6:
  66 0028 10BD     	 pop {r4,pc}
  67              	 .cfi_endproc
  68              	.LFE50:
  70 002a C046     	 .section .text.XMC_SCU_CLOCK_lFrequencyUpScaling,"ax",%progbits
  71              	 .align 2
  72              	 .code 16
  73              	 .thumb_func
  75              	XMC_SCU_CLOCK_lFrequencyUpScaling:
  76              	.LFB76:
 258:../Libraries/XMCLib/src/xmc1_scu.c **** 
 259:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 260:../Libraries/XMCLib/src/xmc1_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 261:../Libraries/XMCLib/src/xmc1_scu.c **** static void delay(uint32_t cycles)
 262:../Libraries/XMCLib/src/xmc1_scu.c **** {
 263:../Libraries/XMCLib/src/xmc1_scu.c ****   while(cycles > 0U)
 264:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 265:../Libraries/XMCLib/src/xmc1_scu.c ****     __NOP();
 266:../Libraries/XMCLib/src/xmc1_scu.c ****     cycles--;
 267:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 268:../Libraries/XMCLib/src/xmc1_scu.c **** }
 269:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 270:../Libraries/XMCLib/src/xmc1_scu.c **** 
 271:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 272:../Libraries/XMCLib/src/xmc1_scu.c ****  * API IMPLEMENTATION
 273:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 274:../Libraries/XMCLib/src/xmc1_scu.c ****  #ifdef XMC_ASSERT_ENABLE
 275:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to verify SCU event weather it is valid event or not */
 276:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_INLINE bool XMC_SCU_INTERRUPT_IsValidEvent(XMC_SCU_INTERRUPT_EVENT_t event)
 277:../Libraries/XMCLib/src/xmc1_scu.c **** {
 278:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((event == XMC_SCU_INTERRUPT_EVENT_WDT_WARN) ||
 279:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC) ||
 280:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_ALARM) ||
 281:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDDPI) ||
 282:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 283:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC1) ||
 284:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 285:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 286:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEMCAN) ||
 287:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 288:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 289:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK) ||
 290:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC) ||
 291:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 292:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 293:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP0) ||
 294:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP1) ||
 295:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP2) ||
 296:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 297:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP3) ||
 298:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 299:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 300:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDROP) ||
 301:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 302:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC0) ||
 303:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC1) ||
 304:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC2) ||
 305:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC3) ||
 306:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC4) ||
 307:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC5) ||
 308:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC6) ||
 309:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC7) ||
 310:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 311:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOCI) ||
 312:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PESRAM) ||
 313:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC0) ||
 314:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR) ||
 315:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED) ||
 316:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VCLIP) ||
 317:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL) ||
 318:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED) ||
 319:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED) ||
 320:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED) ||
 321:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED) ||
 322:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED) ||
 323:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_DONE) ||
 324:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_HIGH) ||
 325:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_LOW));
 326:../Libraries/XMCLib/src/xmc1_scu.c **** }
 327:../Libraries/XMCLib/src/xmc1_scu.c ****  #endif
 328:../Libraries/XMCLib/src/xmc1_scu.c **** 
 329:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to enable the SCU event */
 330:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 331:../Libraries/XMCLib/src/xmc1_scu.c **** {
 332:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 333:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 334:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
 335:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 336:../Libraries/XMCLib/src/xmc1_scu.c **** }
 337:../Libraries/XMCLib/src/xmc1_scu.c **** 
 338:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to disable the SCU event */
 339:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 340:../Libraries/XMCLib/src/xmc1_scu.c **** {
 341:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 342:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 343:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 &= (uint32_t)~(event >> 32U);
 344:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 345:../Libraries/XMCLib/src/xmc1_scu.c **** }
 346:../Libraries/XMCLib/src/xmc1_scu.c **** 
 347:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to trigger the SCU event */
 348:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 349:../Libraries/XMCLib/src/xmc1_scu.c **** {
 350:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 351:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 352:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET1 |= (uint32_t)(event >> 32U);
 353:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 354:../Libraries/XMCLib/src/xmc1_scu.c **** }
 355:../Libraries/XMCLib/src/xmc1_scu.c **** 
 356:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to get the SCU event status */
 357:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 358:../Libraries/XMCLib/src/xmc1_scu.c **** {
 359:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 360:../Libraries/XMCLib/src/xmc1_scu.c **** 
 361:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp = SCU_INTERRUPT->SRRAW;
 362:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 363:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
 364:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 365:../Libraries/XMCLib/src/xmc1_scu.c ****   return (tmp);
 366:../Libraries/XMCLib/src/xmc1_scu.c **** }
 367:../Libraries/XMCLib/src/xmc1_scu.c **** 
 368:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to clear the SCU event status */
 369:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 370:../Libraries/XMCLib/src/xmc1_scu.c **** {
 371:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 372:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 373:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
 374:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 375:../Libraries/XMCLib/src/xmc1_scu.c **** }
 376:../Libraries/XMCLib/src/xmc1_scu.c **** 
 377:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to lock protected bitfields from being modified */
 378:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_LockProtectedBits(void)
 379:../Libraries/XMCLib/src/xmc1_scu.c **** {
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 381:../Libraries/XMCLib/src/xmc1_scu.c **** }
 382:../Libraries/XMCLib/src/xmc1_scu.c **** 
 383:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to make protected bitfields available for modification */
 384:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_UnlockProtectedBits(void)
 385:../Libraries/XMCLib/src/xmc1_scu.c **** {
 386:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 387:../Libraries/XMCLib/src/xmc1_scu.c **** 
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
 389:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 390:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Loop until the lock is removed */
 391:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 392:../Libraries/XMCLib/src/xmc1_scu.c **** }
 393:../Libraries/XMCLib/src/xmc1_scu.c **** 
 394:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to initialize power supply monitoring unit */
 395:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SupplyMonitorInit(const XMC_SCU_SUPPLYMONITOR_t *obj)
 396:../Libraries/XMCLib/src/xmc1_scu.c **** {
 397:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 398:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t irqmask;
 399:../Libraries/XMCLib/src/xmc1_scu.c **** 
 400:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel = 0UL;
 401:../Libraries/XMCLib/src/xmc1_scu.c **** 
 402:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj-> ext_supply_threshold) << SCU_ANALOG_ANAVDEL_VDEL_SELECT_Pos);
 403:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj->ext_supply_monitor_speed) << SCU_ANALOG_ANAVDEL_VDEL_TIM_ADJ_Pos);
 404:../Libraries/XMCLib/src/xmc1_scu.c **** 
 405:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_at_init))
 406:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 407:../Libraries/XMCLib/src/xmc1_scu.c ****     anavdel |= (uint32_t)SCU_ANALOG_ANAVDEL_VDEL_EN_Msk;
 408:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 409:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_ANALOG->ANAVDEL = (uint16_t) anavdel;
 410:../Libraries/XMCLib/src/xmc1_scu.c **** 
 411:../Libraries/XMCLib/src/xmc1_scu.c ****   irqmask = 0UL;
 412:../Libraries/XMCLib/src/xmc1_scu.c **** 
 413:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_prewarning_int))
 414:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 415:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDDPI_Msk;
 416:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 417:../Libraries/XMCLib/src/xmc1_scu.c **** 
 418:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vdrop_int))
 419:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 420:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDROPI_Msk;
 421:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 422:../Libraries/XMCLib/src/xmc1_scu.c **** 
 423:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vclip_int))
 424:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 425:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VCLIPI_Msk;
 426:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 427:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)irqmask;
 428:../Libraries/XMCLib/src/xmc1_scu.c **** }
 429:../Libraries/XMCLib/src/xmc1_scu.c **** 
 430:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program lower temperature limit */
 431:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempLowLimit(uint32_t limit)
 432:../Libraries/XMCLib/src/xmc1_scu.c **** {
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 434:../Libraries/XMCLib/src/xmc1_scu.c **** 
 435:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 436:../Libraries/XMCLib/src/xmc1_scu.c **** 
 437:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 438:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 439:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIL = (uint16_t)limit;
 440:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 441:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 442:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 443:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 444:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 445:../Libraries/XMCLib/src/xmc1_scu.c **** 
 446:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 447:../Libraries/XMCLib/src/xmc1_scu.c **** }
 448:../Libraries/XMCLib/src/xmc1_scu.c ****   
 449:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program higher temperature limit */
 450:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempHighLimit(uint32_t limit)
 451:../Libraries/XMCLib/src/xmc1_scu.c **** {
 452:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 453:../Libraries/XMCLib/src/xmc1_scu.c **** 
 454:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 455:../Libraries/XMCLib/src/xmc1_scu.c **** 
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 457:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 458:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIH = (uint16_t)limit;
 459:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 460:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 461:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 462:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 463:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 464:../Libraries/XMCLib/src/xmc1_scu.c **** 
 465:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 466:../Libraries/XMCLib/src/xmc1_scu.c **** }
 467:../Libraries/XMCLib/src/xmc1_scu.c **** 
 468:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program temperature limits as raw digital values into temperature sensor */
 469:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 470:../Libraries/XMCLib/src/xmc1_scu.c **** {
 471:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 472:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 473:../Libraries/XMCLib/src/xmc1_scu.c **** }
 474:../Libraries/XMCLib/src/xmc1_scu.c **** 
 475:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to start temperature measurement */
 476:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StartTempMeasurement(void)
 477:../Libraries/XMCLib/src/xmc1_scu.c **** {
 478:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 479:../Libraries/XMCLib/src/xmc1_scu.c **** }
 480:../Libraries/XMCLib/src/xmc1_scu.c **** 
 481:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to stop temperature measurement */
 482:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StopTempMeasurement(void)
 483:../Libraries/XMCLib/src/xmc1_scu.c **** {
 484:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 485:../Libraries/XMCLib/src/xmc1_scu.c **** }
 486:../Libraries/XMCLib/src/xmc1_scu.c **** 
 487:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature has gone past the ceiling */
 488:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_HighTemperature(void)
 489:../Libraries/XMCLib/src/xmc1_scu.c **** {
 490:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 491:../Libraries/XMCLib/src/xmc1_scu.c **** }
 492:../Libraries/XMCLib/src/xmc1_scu.c **** 
 493:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature is lower than normal */
 494:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_LowTemperature(void)
 495:../Libraries/XMCLib/src/xmc1_scu.c **** {
 496:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 497:../Libraries/XMCLib/src/xmc1_scu.c **** }
 498:../Libraries/XMCLib/src/xmc1_scu.c **** 
 499:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to retrieve the device temperature */
 500:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_GetTemperature(void)
 501:../Libraries/XMCLib/src/xmc1_scu.c **** {
 502:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 503:../Libraries/XMCLib/src/xmc1_scu.c **** 
 504:../Libraries/XMCLib/src/xmc1_scu.c ****   temperature = (uint32_t)(SCU_ANALOG->ANATSEMON);
 505:../Libraries/XMCLib/src/xmc1_scu.c **** 
 506:../Libraries/XMCLib/src/xmc1_scu.c ****   return (temperature);
 507:../Libraries/XMCLib/src/xmc1_scu.c **** }
 508:../Libraries/XMCLib/src/xmc1_scu.c **** 
 509:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the die temperature value using ROM function */
 510:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CalcTemperature(void)
 511:../Libraries/XMCLib/src/xmc1_scu.c **** {
 512:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 513:../Libraries/XMCLib/src/xmc1_scu.c **** }
 514:../Libraries/XMCLib/src/xmc1_scu.c **** 
 515:../Libraries/XMCLib/src/xmc1_scu.c **** 
 516:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which initializes the clock tree ofthe device */
 517:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 518:../Libraries/XMCLib/src/xmc1_scu.c **** {
 519:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 520:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 521:../Libraries/XMCLib/src/xmc1_scu.c **** 
 522:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 523:../Libraries/XMCLib/src/xmc1_scu.c ****   /* OSCHP source selection - OSC mode */
 524:../Libraries/XMCLib/src/xmc1_scu.c **** 
 525:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
 526:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 527:../Libraries/XMCLib/src/xmc1_scu.c ****     if (OSCHP_GetFrequency() > 20000000U)
 528:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 529:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 530:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 531:../Libraries/XMCLib/src/xmc1_scu.c **** 
 532:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY
 533:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 534:../Libraries/XMCLib/src/xmc1_scu.c **** 
 535:../Libraries/XMCLib/src/xmc1_scu.c ****     do
 536:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 537:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Restart OSC_HP oscillator watchdog */
 538:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 539:../Libraries/XMCLib/src/xmc1_scu.c **** 
 540:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Enable OSC_HP oscillator watchdog*/
 541:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
 542:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk;
 543:../Libraries/XMCLib/src/xmc1_scu.c **** 
 544:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait a few DCO2 cycles for the update of the clock detection result */
 545:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(2500);
 546:../Libraries/XMCLib/src/xmc1_scu.c **** 
 547:../Libraries/XMCLib/src/xmc1_scu.c ****       /* check clock is ok */
 548:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 549:../Libraries/XMCLib/src/xmc1_scu.c ****     while(SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 550:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 551:../Libraries/XMCLib/src/xmc1_scu.c ****   else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
 552:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 553:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
 554:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 555:../Libraries/XMCLib/src/xmc1_scu.c **** 
 556:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
 557:../Libraries/XMCLib/src/xmc1_scu.c **** 
 558:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
 559:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 560:../Libraries/XMCLib/src/xmc1_scu.c **** 
 561:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 562:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update PCLK selection mux. */
 563:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSE
 564:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 565:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 566:../Libraries/XMCLib/src/xmc1_scu.c **** 
 567:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Close the lock opened above. */
 568:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 569:../Libraries/XMCLib/src/xmc1_scu.c **** 
 570:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update the dividers now */
 571:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
 572:../Libraries/XMCLib/src/xmc1_scu.c **** 
 573:../Libraries/XMCLib/src/xmc1_scu.c **** }
 574:../Libraries/XMCLib/src/xmc1_scu.c **** 
 575:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which selects one of the available parent clock nodes for a given child clock node */
 576:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetRtcClockSource(const XMC_SCU_CLOCK_RTCCLKSRC_t source)
 577:../Libraries/XMCLib/src/xmc1_scu.c **** {
 578:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 579:../Libraries/XMCLib/src/xmc1_scu.c **** 
 580:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 581:../Libraries/XMCLib/src/xmc1_scu.c **** 
 582:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_RTCCLKSEL_Msk) |
 583:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 584:../Libraries/XMCLib/src/xmc1_scu.c **** 
 585:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 586:../Libraries/XMCLib/src/xmc1_scu.c **** }
 587:../Libraries/XMCLib/src/xmc1_scu.c **** 
 588:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program the divider placed between fperiph and its parent */
 589:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetFastPeripheralClockSource(const XMC_SCU_CLOCK_PCLKSRC_t source)
 590:../Libraries/XMCLib/src/xmc1_scu.c **** {
 591:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 592:../Libraries/XMCLib/src/xmc1_scu.c **** 
 593:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_PCLKSEL_Msk) |
 594:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 595:../Libraries/XMCLib/src/xmc1_scu.c **** 
 596:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 597:../Libraries/XMCLib/src/xmc1_scu.c **** }
 598:../Libraries/XMCLib/src/xmc1_scu.c **** 
 599:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which gates a clock node at its source */
 600:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 601:../Libraries/XMCLib/src/xmc1_scu.c **** {
 602:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 604:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 605:../Libraries/XMCLib/src/xmc1_scu.c **** }
 606:../Libraries/XMCLib/src/xmc1_scu.c **** 
 607:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which ungates a clock note at its source */
 608:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 609:../Libraries/XMCLib/src/xmc1_scu.c **** {
 610:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 611:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 612:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 613:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 614:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 615:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 616:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 617:../Libraries/XMCLib/src/xmc1_scu.c **** }
 618:../Libraries/XMCLib/src/xmc1_scu.c **** 
 619:../Libraries/XMCLib/src/xmc1_scu.c **** /* Checks the status of peripheral clock gating */
 620:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 621:../Libraries/XMCLib/src/xmc1_scu.c **** {
 622:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 623:../Libraries/XMCLib/src/xmc1_scu.c **** }
 624:../Libraries/XMCLib/src/xmc1_scu.c **** 
 625:../Libraries/XMCLib/src/xmc1_scu.c **** /* This API configures main clock (MCLK) frequency to requested frequency value. */
 626:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetMCLKFrequency(uint32_t freq_khz)
 627:../Libraries/XMCLib/src/xmc1_scu.c **** {
 628:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 629:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_int;
 630:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_frac;
 631:../Libraries/XMCLib/src/xmc1_scu.c **** 
 632:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 633:../Libraries/XMCLib/src/xmc1_scu.c ****   if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 634:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 635:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = DCO1_DIV2_FREQUENCY_KHZ_Q22_10 / freq_khz;
 636:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 637:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 638:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 639:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = ((OSCHP_GetFrequency() / 1000U) << 10U) / freq_khz;
 640:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 641:../Libraries/XMCLib/src/xmc1_scu.c **** 
 642:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 643:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffffU)
 644:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 645:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffffU;
 646:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 647:../Libraries/XMCLib/src/xmc1_scu.c **** 
 648:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 10U;
 649:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 650:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 651:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = DCO1_DIV2_FREQUENCY_KHZ_Q24_8 / freq_khz;
 652:../Libraries/XMCLib/src/xmc1_scu.c **** 
 653:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 654:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffU)
 655:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 656:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffU;
 657:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 658:../Libraries/XMCLib/src/xmc1_scu.c **** 
 659:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 8U;
 660:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 661:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 662:../Libraries/XMCLib/src/xmc1_scu.c **** 
 663:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(ratio_int, ratio_frac);
 664:../Libraries/XMCLib/src/xmc1_scu.c **** }
 665:../Libraries/XMCLib/src/xmc1_scu.c **** 
 666:../Libraries/XMCLib/src/xmc1_scu.c **** 
 667:../Libraries/XMCLib/src/xmc1_scu.c **** /* A utility routine which updates the fractional dividers in steps */
 668:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
 669:../Libraries/XMCLib/src/xmc1_scu.c **** {
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 671:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t curr_idiv;
 672:../Libraries/XMCLib/src/xmc1_scu.c **** 
 673:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 674:../Libraries/XMCLib/src/xmc1_scu.c **** 
 675:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Take a snapshot of value already programmed into IDIV */
 676:../Libraries/XMCLib/src/xmc1_scu.c ****   curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 677:../Libraries/XMCLib/src/xmc1_scu.c **** 
 678:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 679:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
 680:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 681:../Libraries/XMCLib/src/xmc1_scu.c **** 
 682:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 683:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 684:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 685:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 686:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 687:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 688:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 689:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 690:../Libraries/XMCLib/src/xmc1_scu.c **** 
 691:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
 692:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 693:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Spin until the core supply stabilizes */
 694:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 695:../Libraries/XMCLib/src/xmc1_scu.c **** 
 696:../Libraries/XMCLib/src/xmc1_scu.c ****   if(curr_idiv <= idiv)
 697:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 698:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
 699:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
 700:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 701:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 703:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
 704:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
 705:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 706:../Libraries/XMCLib/src/xmc1_scu.c **** 
 707:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 708:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 709:../Libraries/XMCLib/src/xmc1_scu.c **** 
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 711:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 712:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 713:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 714:../Libraries/XMCLib/src/xmc1_scu.c **** 
 715:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 716:../Libraries/XMCLib/src/xmc1_scu.c **** 
 717:../Libraries/XMCLib/src/xmc1_scu.c ****   SystemCoreClockUpdate();
 718:../Libraries/XMCLib/src/xmc1_scu.c **** 
 719:../Libraries/XMCLib/src/xmc1_scu.c **** }
 720:../Libraries/XMCLib/src/xmc1_scu.c **** 
 721:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 722:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
 723:../Libraries/XMCLib/src/xmc1_scu.c **** {
  77              	 .loc 1 723 0
  78              	 .cfi_startproc
  79              	.LVL7:
  80 0000 10B5     	 push {r4,lr}
  81              	.LCFI1:
  82              	 .cfi_def_cfa_offset 8
  83              	 .cfi_offset 4,-8
  84              	 .cfi_offset 14,-4
 724:../Libraries/XMCLib/src/xmc1_scu.c ****   while (curr_idiv > (target_idiv * 4UL))
  85              	 .loc 1 724 0
  86 0002 0DE0     	 b .L4
  87              	.L6:
 725:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 726:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
  88              	 .loc 1 726 0
  89 0004 8008     	 lsr r0,r0,#2
  90              	.LVL8:
 727:../Libraries/XMCLib/src/xmc1_scu.c **** 
 728:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
  91              	 .loc 1 728 0
  92 0006 084C     	 ldr r4,.L7
  93 0008 2268     	 ldr r2,[r4]
  94 000a 084B     	 ldr r3,.L7+4
  95 000c 1340     	 and r3,r2
 729:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
  96              	 .loc 1 729 0
  97 000e 0202     	 lsl r2,r0,#8
 728:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
  98              	 .loc 1 728 0
  99 0010 1343     	 orr r3,r2
 100              	 .loc 1 729 0
 101 0012 074A     	 ldr r2,.L7+8
 102 0014 1343     	 orr r3,r2
 728:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 103              	 .loc 1 728 0
 104 0016 2360     	 str r3,[r4]
 105              	.L5:
 730:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 731:../Libraries/XMCLib/src/xmc1_scu.c **** 
 732:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 106              	 .loc 1 732 0 discriminator 1
 107 0018 034B     	 ldr r3,.L7
 108 001a 1B68     	 ldr r3,[r3]
 109 001c 5B00     	 lsl r3,r3,#1
 110 001e FBD4     	 bmi .L5
 111              	.L4:
 724:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 112              	 .loc 1 724 0
 113 0020 8B00     	 lsl r3,r1,#2
 114 0022 8342     	 cmp r3,r0
 115 0024 EED3     	 bcc .L6
 733:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 734:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 735:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 736:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 737:../Libraries/XMCLib/src/xmc1_scu.c **** }
 116              	 .loc 1 737 0
 117              	 
 118 0026 10BD     	 pop {r4,pc}
 119              	.L8:
 120              	 .align 2
 121              	.L7:
 122 0028 00030140 	 .word 1073808128
 123 002c FF000FC0 	 .word -1072758529
 124 0030 0000F03F 	 .word 1072693248
 125              	 .cfi_endproc
 126              	.LFE76:
 128              	 .section .text.XMC_SCU_CLOCK_lFrequencyDownScaling,"ax",%progbits
 129              	 .align 2
 130              	 .code 16
 131              	 .thumb_func
 133              	XMC_SCU_CLOCK_lFrequencyDownScaling:
 134              	.LFB77:
 738:../Libraries/XMCLib/src/xmc1_scu.c **** 
 739:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 740:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
 741:../Libraries/XMCLib/src/xmc1_scu.c **** {
 135              	 .loc 1 741 0
 136              	 .cfi_startproc
 137              	.LVL9:
 138 0000 10B5     	 push {r4,lr}
 139              	.LCFI2:
 140              	 .cfi_def_cfa_offset 8
 141              	 .cfi_offset 4,-8
 142              	 .cfi_offset 14,-4
 742:../Libraries/XMCLib/src/xmc1_scu.c **** 
 743:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((curr_idiv * 4UL) < target_idiv)
 143              	 .loc 1 743 0
 144 0002 10E0     	 b .L10
 145              	.L13:
 744:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 745:../Libraries/XMCLib/src/xmc1_scu.c ****     if(0U == curr_idiv)
 146              	 .loc 1 745 0
 147 0004 0028     	 cmp r0,#0
 148 0006 00D1     	 bne .L11
 746:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 747:../Libraries/XMCLib/src/xmc1_scu.c ****       curr_idiv = 1U;
 149              	 .loc 1 747 0
 150 0008 0130     	 add r0,r0,#1
 151              	.LVL10:
 152              	.L11:
 748:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 749:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
 153              	 .loc 1 749 0
 154 000a 8000     	 lsl r0,r0,#2
 155              	.LVL11:
 750:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 156              	 .loc 1 750 0
 157 000c 084C     	 ldr r4,.L15
 158 000e 2268     	 ldr r2,[r4]
 159 0010 084B     	 ldr r3,.L15+4
 160 0012 1340     	 and r3,r2
 751:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 161              	 .loc 1 751 0
 162 0014 0202     	 lsl r2,r0,#8
 750:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 163              	 .loc 1 750 0
 164 0016 1343     	 orr r3,r2
 165              	 .loc 1 751 0
 166 0018 074A     	 ldr r2,.L15+8
 167 001a 1343     	 orr r3,r2
 750:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 168              	 .loc 1 750 0
 169 001c 2360     	 str r3,[r4]
 170              	.L12:
 752:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 753:../Libraries/XMCLib/src/xmc1_scu.c **** 
 754:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 171              	 .loc 1 754 0 discriminator 1
 172 001e 044B     	 ldr r3,.L15
 173 0020 1B68     	 ldr r3,[r3]
 174 0022 5B00     	 lsl r3,r3,#1
 175 0024 FBD4     	 bmi .L12
 176              	.L10:
 743:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 177              	 .loc 1 743 0
 178 0026 8300     	 lsl r3,r0,#2
 179 0028 8B42     	 cmp r3,r1
 180 002a EBD3     	 bcc .L13
 755:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 756:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 757:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 758:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 759:../Libraries/XMCLib/src/xmc1_scu.c **** }
 181              	 .loc 1 759 0
 182              	 
 183 002c 10BD     	 pop {r4,pc}
 184              	.L16:
 185 002e C046     	 .align 2
 186              	.L15:
 187 0030 00030140 	 .word 1073808128
 188 0034 FF000FC0 	 .word -1072758529
 189 0038 0000F03F 	 .word 1072693248
 190              	 .cfi_endproc
 191              	.LFE77:
 193              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
 194              	 .align 2
 195              	 .global XMC_SCU_INTERRUPT_EnableEvent
 196              	 .code 16
 197              	 .thumb_func
 199              	XMC_SCU_INTERRUPT_EnableEvent:
 200              	.LFB51:
 331:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 201              	 .loc 1 331 0
 202              	 .cfi_startproc
 203              	.LVL12:
 332:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 204              	 .loc 1 332 0
 205 0000 024B     	 ldr r3,.L18
 206 0002 5A68     	 ldr r2,[r3,#4]
 207 0004 1043     	 orr r0,r2
 208              	.LVL13:
 209 0006 5860     	 str r0,[r3,#4]
 336:../Libraries/XMCLib/src/xmc1_scu.c **** 
 210              	 .loc 1 336 0
 211              	 
 212 0008 7047     	 bx lr
 213              	.L19:
 214 000a C046     	 .align 2
 215              	.L18:
 216 000c 38000140 	 .word 1073807416
 217              	 .cfi_endproc
 218              	.LFE51:
 220              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 221              	 .align 2
 222              	 .global XMC_SCU_INTERRUPT_DisableEvent
 223              	 .code 16
 224              	 .thumb_func
 226              	XMC_SCU_INTERRUPT_DisableEvent:
 227              	.LFB52:
 340:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 228              	 .loc 1 340 0
 229              	 .cfi_startproc
 230              	.LVL14:
 341:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 231              	 .loc 1 341 0
 232 0000 024A     	 ldr r2,.L21
 233 0002 5368     	 ldr r3,[r2,#4]
 234 0004 8343     	 bic r3,r0
 235 0006 5360     	 str r3,[r2,#4]
 345:../Libraries/XMCLib/src/xmc1_scu.c **** 
 236              	 .loc 1 345 0
 237              	 
 238 0008 7047     	 bx lr
 239              	.L22:
 240 000a C046     	 .align 2
 241              	.L21:
 242 000c 38000140 	 .word 1073807416
 243              	 .cfi_endproc
 244              	.LFE52:
 246              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 247              	 .align 2
 248              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 249              	 .code 16
 250              	 .thumb_func
 252              	XMC_SCU_INTERRUPT_TriggerEvent:
 253              	.LFB53:
 349:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 254              	 .loc 1 349 0
 255              	 .cfi_startproc
 256              	.LVL15:
 350:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 257              	 .loc 1 350 0
 258 0000 024B     	 ldr r3,.L24
 259 0002 DA68     	 ldr r2,[r3,#12]
 260 0004 1043     	 orr r0,r2
 261              	.LVL16:
 262 0006 D860     	 str r0,[r3,#12]
 354:../Libraries/XMCLib/src/xmc1_scu.c **** 
 263              	 .loc 1 354 0
 264              	 
 265 0008 7047     	 bx lr
 266              	.L25:
 267 000a C046     	 .align 2
 268              	.L24:
 269 000c 38000140 	 .word 1073807416
 270              	 .cfi_endproc
 271              	.LFE53:
 273              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 274              	 .align 2
 275              	 .global XMC_SCU_INTERUPT_GetEventStatus
 276              	 .code 16
 277              	 .thumb_func
 279              	XMC_SCU_INTERUPT_GetEventStatus:
 280              	.LFB54:
 358:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 281              	 .loc 1 358 0
 282              	 .cfi_startproc
 361:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 283              	 .loc 1 361 0
 284 0000 014B     	 ldr r3,.L27
 285 0002 1868     	 ldr r0,[r3]
 286              	.LVL17:
 366:../Libraries/XMCLib/src/xmc1_scu.c **** 
 287              	 .loc 1 366 0
 288              	 
 289 0004 7047     	 bx lr
 290              	.L28:
 291 0006 C046     	 .align 2
 292              	.L27:
 293 0008 38000140 	 .word 1073807416
 294              	 .cfi_endproc
 295              	.LFE54:
 297              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 298              	 .align 2
 299              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 300              	 .code 16
 301              	 .thumb_func
 303              	XMC_SCU_INTERRUPT_ClearEventStatus:
 304              	.LFB55:
 370:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 305              	 .loc 1 370 0
 306              	 .cfi_startproc
 307              	.LVL18:
 371:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 308              	 .loc 1 371 0
 309 0000 024B     	 ldr r3,.L30
 310 0002 9A68     	 ldr r2,[r3,#8]
 311 0004 1043     	 orr r0,r2
 312              	.LVL19:
 313 0006 9860     	 str r0,[r3,#8]
 375:../Libraries/XMCLib/src/xmc1_scu.c **** 
 314              	 .loc 1 375 0
 315              	 
 316 0008 7047     	 bx lr
 317              	.L31:
 318 000a C046     	 .align 2
 319              	.L30:
 320 000c 38000140 	 .word 1073807416
 321              	 .cfi_endproc
 322              	.LFE55:
 324              	 .section .text.XMC_SCU_LockProtectedBits,"ax",%progbits
 325              	 .align 2
 326              	 .global XMC_SCU_LockProtectedBits
 327              	 .code 16
 328              	 .thumb_func
 330              	XMC_SCU_LockProtectedBits:
 331              	.LFB56:
 379:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 332              	 .loc 1 379 0
 333              	 .cfi_startproc
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 334              	 .loc 1 380 0
 335 0000 C322     	 mov r2,#195
 336 0002 014B     	 ldr r3,.L33
 337 0004 5A62     	 str r2,[r3,#36]
 381:../Libraries/XMCLib/src/xmc1_scu.c **** 
 338              	 .loc 1 381 0
 339              	 
 340 0006 7047     	 bx lr
 341              	.L34:
 342              	 .align 2
 343              	.L33:
 344 0008 00000140 	 .word 1073807360
 345              	 .cfi_endproc
 346              	.LFE56:
 348              	 .section .text.XMC_SCU_UnlockProtectedBits,"ax",%progbits
 349              	 .align 2
 350              	 .global XMC_SCU_UnlockProtectedBits
 351              	 .code 16
 352              	 .thumb_func
 354              	XMC_SCU_UnlockProtectedBits:
 355              	.LFB57:
 385:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 356              	 .loc 1 385 0
 357              	 .cfi_startproc
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 358              	 .loc 1 386 0
 359 0000 C022     	 mov r2,#192
 360 0002 034B     	 ldr r3,.L37
 361 0004 5A62     	 str r2,[r3,#36]
 362              	.L36:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 363              	 .loc 1 388 0 discriminator 1
 364 0006 024B     	 ldr r3,.L37
 365 0008 5B6A     	 ldr r3,[r3,#36]
 366 000a 5B07     	 lsl r3,r3,#29
 367 000c FBD4     	 bmi .L36
 392:../Libraries/XMCLib/src/xmc1_scu.c **** 
 368              	 .loc 1 392 0
 369              	 
 370 000e 7047     	 bx lr
 371              	.L38:
 372              	 .align 2
 373              	.L37:
 374 0010 00000140 	 .word 1073807360
 375              	 .cfi_endproc
 376              	.LFE57:
 378              	 .section .text.XMC_SCU_SupplyMonitorInit,"ax",%progbits
 379              	 .align 2
 380              	 .global XMC_SCU_SupplyMonitorInit
 381              	 .code 16
 382              	 .thumb_func
 384              	XMC_SCU_SupplyMonitorInit:
 385              	.LFB58:
 396:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 386              	 .loc 1 396 0
 387              	 .cfi_startproc
 388              	.LVL20:
 403:../Libraries/XMCLib/src/xmc1_scu.c **** 
 389              	 .loc 1 403 0
 390 0000 4368     	 ldr r3,[r0,#4]
 391 0002 9B00     	 lsl r3,r3,#2
 392 0004 0268     	 ldr r2,[r0]
 393 0006 1343     	 orr r3,r2
 394              	.LVL21:
 405:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 395              	 .loc 1 405 0
 396 0008 C27A     	 ldrb r2,[r0,#11]
 397 000a 002A     	 cmp r2,#0
 398 000c 01D0     	 beq .L40
 407:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 399              	 .loc 1 407 0
 400 000e 1022     	 mov r2,#16
 401 0010 1343     	 orr r3,r2
 402              	.LVL22:
 403              	.L40:
 409:../Libraries/XMCLib/src/xmc1_scu.c **** 
 404              	 .loc 1 409 0
 405 0012 9BB2     	 uxth r3,r3
 406              	.LVL23:
 407 0014 5022     	 mov r2,#80
 408 0016 0B49     	 ldr r1,.L45
 409 0018 8B52     	 strh r3,[r1,r2]
 410              	.LVL24:
 413:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 411              	 .loc 1 413 0
 412 001a 037A     	 ldrb r3,[r0,#8]
 413 001c 002B     	 cmp r3,#0
 414 001e 00D0     	 beq .L41
 415:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 415              	 .loc 1 415 0
 416 0020 0823     	 mov r3,#8
 417              	.L41:
 418              	.LVL25:
 418:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 419              	 .loc 1 418 0
 420 0022 427A     	 ldrb r2,[r0,#9]
 421 0024 002A     	 cmp r2,#0
 422 0026 01D0     	 beq .L42
 420:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 423              	 .loc 1 420 0
 424 0028 8022     	 mov r2,#128
 425 002a 1343     	 orr r3,r2
 426              	.LVL26:
 427              	.L42:
 423:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 428              	 .loc 1 423 0
 429 002c 827A     	 ldrb r2,[r0,#10]
 430 002e 002A     	 cmp r2,#0
 431 0030 02D0     	 beq .L43
 425:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 432              	 .loc 1 425 0
 433 0032 8022     	 mov r2,#128
 434 0034 9203     	 lsl r2,r2,#14
 435 0036 1343     	 orr r3,r2
 436              	.LVL27:
 437              	.L43:
 427:../Libraries/XMCLib/src/xmc1_scu.c **** }
 438              	 .loc 1 427 0
 439 0038 034A     	 ldr r2,.L45+4
 440 003a 5168     	 ldr r1,[r2,#4]
 441 003c 0B43     	 orr r3,r1
 442              	.LVL28:
 443 003e 5360     	 str r3,[r2,#4]
 428:../Libraries/XMCLib/src/xmc1_scu.c **** 
 444              	 .loc 1 428 0
 445              	 
 446 0040 7047     	 bx lr
 447              	.L46:
 448 0042 C046     	 .align 2
 449              	.L45:
 450 0044 00100140 	 .word 1073811456
 451 0048 38000140 	 .word 1073807416
 452              	 .cfi_endproc
 453              	.LFE58:
 455              	 .section .text.XMC_SCU_SetTempLowLimit,"ax",%progbits
 456              	 .align 2
 457              	 .global XMC_SCU_SetTempLowLimit
 458              	 .code 16
 459              	 .thumb_func
 461              	XMC_SCU_SetTempLowLimit:
 462              	.LFB59:
 432:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 463              	 .loc 1 432 0
 464              	 .cfi_startproc
 465              	.LVL29:
 466 0000 08B5     	 push {r3,lr}
 467              	.LCFI3:
 468              	 .cfi_def_cfa_offset 8
 469              	 .cfi_offset 3,-8
 470              	 .cfi_offset 14,-4
 471              	.LVL30:
 435:../Libraries/XMCLib/src/xmc1_scu.c **** 
 472              	 .loc 1 435 0
 473 0002 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 474              	.LVL31:
 437:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 475              	 .loc 1 437 0
 476 0006 0028     	 cmp r0,#0
 477 0008 04D0     	 beq .L49
 439:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 478              	 .loc 1 439 0
 479 000a 80B2     	 uxth r0,r0
 480              	.LVL32:
 481 000c 024B     	 ldr r3,.L50
 482 000e 9886     	 strh r0,[r3,#52]
 433:../Libraries/XMCLib/src/xmc1_scu.c **** 
 483              	 .loc 1 433 0
 484 0010 0020     	 mov r0,#0
 485 0012 00E0     	 b .L48
 486              	.LVL33:
 487              	.L49:
 443:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 488              	 .loc 1 443 0
 489 0014 0120     	 mov r0,#1
 490              	.LVL34:
 491              	.L48:
 447:../Libraries/XMCLib/src/xmc1_scu.c ****   
 492              	 .loc 1 447 0
 493              	 
 494 0016 08BD     	 pop {r3,pc}
 495              	.L51:
 496              	 .align 2
 497              	.L50:
 498 0018 00100140 	 .word 1073811456
 499              	 .cfi_endproc
 500              	.LFE59:
 502              	 .section .text.XMC_SCU_SetTempHighLimit,"ax",%progbits
 503              	 .align 2
 504              	 .global XMC_SCU_SetTempHighLimit
 505              	 .code 16
 506              	 .thumb_func
 508              	XMC_SCU_SetTempHighLimit:
 509              	.LFB60:
 451:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 510              	 .loc 1 451 0
 511              	 .cfi_startproc
 512              	.LVL35:
 513 0000 08B5     	 push {r3,lr}
 514              	.LCFI4:
 515              	 .cfi_def_cfa_offset 8
 516              	 .cfi_offset 3,-8
 517              	 .cfi_offset 14,-4
 518              	.LVL36:
 454:../Libraries/XMCLib/src/xmc1_scu.c **** 
 519              	 .loc 1 454 0
 520 0002 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 521              	.LVL37:
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 522              	 .loc 1 456 0
 523 0006 0028     	 cmp r0,#0
 524 0008 04D0     	 beq .L54
 458:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 525              	 .loc 1 458 0
 526 000a 80B2     	 uxth r0,r0
 527              	.LVL38:
 528 000c 024B     	 ldr r3,.L55
 529 000e 1886     	 strh r0,[r3,#48]
 452:../Libraries/XMCLib/src/xmc1_scu.c **** 
 530              	 .loc 1 452 0
 531 0010 0020     	 mov r0,#0
 532 0012 00E0     	 b .L53
 533              	.LVL39:
 534              	.L54:
 462:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 535              	 .loc 1 462 0
 536 0014 0120     	 mov r0,#1
 537              	.LVL40:
 538              	.L53:
 466:../Libraries/XMCLib/src/xmc1_scu.c **** 
 539              	 .loc 1 466 0
 540              	 
 541 0016 08BD     	 pop {r3,pc}
 542              	.L56:
 543              	 .align 2
 544              	.L55:
 545 0018 00100140 	 .word 1073811456
 546              	 .cfi_endproc
 547              	.LFE60:
 549              	 .section .text.XMC_SCU_SetRawTempLimits,"ax",%progbits
 550              	 .align 2
 551              	 .global XMC_SCU_SetRawTempLimits
 552              	 .code 16
 553              	 .thumb_func
 555              	XMC_SCU_SetRawTempLimits:
 556              	.LFB61:
 470:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 557              	 .loc 1 470 0
 558              	 .cfi_startproc
 559              	.LVL41:
 471:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 560              	 .loc 1 471 0
 561 0000 89B2     	 uxth r1,r1
 562              	.LVL42:
 563 0002 024B     	 ldr r3,.L58
 564 0004 1986     	 strh r1,[r3,#48]
 472:../Libraries/XMCLib/src/xmc1_scu.c **** }
 565              	 .loc 1 472 0
 566 0006 80B2     	 uxth r0,r0
 567              	.LVL43:
 568 0008 9886     	 strh r0,[r3,#52]
 473:../Libraries/XMCLib/src/xmc1_scu.c **** 
 569              	 .loc 1 473 0
 570              	 
 571 000a 7047     	 bx lr
 572              	.L59:
 573              	 .align 2
 574              	.L58:
 575 000c 00100140 	 .word 1073811456
 576              	 .cfi_endproc
 577              	.LFE61:
 579              	 .section .text.XMC_SCU_StartTempMeasurement,"ax",%progbits
 580              	 .align 2
 581              	 .global XMC_SCU_StartTempMeasurement
 582              	 .code 16
 583              	 .thumb_func
 585              	XMC_SCU_StartTempMeasurement:
 586              	.LFB62:
 477:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 587              	 .loc 1 477 0
 588              	 .cfi_startproc
 478:../Libraries/XMCLib/src/xmc1_scu.c **** }
 589              	 .loc 1 478 0
 590 0000 024A     	 ldr r2,.L61
 591 0002 918C     	 ldrh r1,[r2,#36]
 592 0004 0123     	 mov r3,#1
 593 0006 0B43     	 orr r3,r1
 594 0008 9384     	 strh r3,[r2,#36]
 479:../Libraries/XMCLib/src/xmc1_scu.c **** 
 595              	 .loc 1 479 0
 596              	 
 597 000a 7047     	 bx lr
 598              	.L62:
 599              	 .align 2
 600              	.L61:
 601 000c 00100140 	 .word 1073811456
 602              	 .cfi_endproc
 603              	.LFE62:
 605              	 .section .text.XMC_SCU_StopTempMeasurement,"ax",%progbits
 606              	 .align 2
 607              	 .global XMC_SCU_StopTempMeasurement
 608              	 .code 16
 609              	 .thumb_func
 611              	XMC_SCU_StopTempMeasurement:
 612              	.LFB63:
 483:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 613              	 .loc 1 483 0
 614              	 .cfi_startproc
 484:../Libraries/XMCLib/src/xmc1_scu.c **** }
 615              	 .loc 1 484 0
 616 0000 024A     	 ldr r2,.L64
 617 0002 938C     	 ldrh r3,[r2,#36]
 618 0004 0121     	 mov r1,#1
 619 0006 8B43     	 bic r3,r1
 620 0008 9384     	 strh r3,[r2,#36]
 485:../Libraries/XMCLib/src/xmc1_scu.c **** 
 621              	 .loc 1 485 0
 622              	 
 623 000a 7047     	 bx lr
 624              	.L65:
 625              	 .align 2
 626              	.L64:
 627 000c 00100140 	 .word 1073811456
 628              	 .cfi_endproc
 629              	.LFE63:
 631              	 .section .text.XMC_SCU_HighTemperature,"ax",%progbits
 632              	 .align 2
 633              	 .global XMC_SCU_HighTemperature
 634              	 .code 16
 635              	 .thumb_func
 637              	XMC_SCU_HighTemperature:
 638              	.LFB64:
 489:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 639              	 .loc 1 489 0
 640              	 .cfi_startproc
 490:../Libraries/XMCLib/src/xmc1_scu.c **** }
 641              	 .loc 1 490 0
 642 0000 024B     	 ldr r3,.L67
 643 0002 1868     	 ldr r0,[r3]
 644 0004 4000     	 lsl r0,r0,#1
 645 0006 C00F     	 lsr r0,r0,#31
 491:../Libraries/XMCLib/src/xmc1_scu.c **** 
 646              	 .loc 1 491 0
 647              	 
 648 0008 7047     	 bx lr
 649              	.L68:
 650 000a C046     	 .align 2
 651              	.L67:
 652 000c 38000140 	 .word 1073807416
 653              	 .cfi_endproc
 654              	.LFE64:
 656              	 .section .text.XMC_SCU_LowTemperature,"ax",%progbits
 657              	 .align 2
 658              	 .global XMC_SCU_LowTemperature
 659              	 .code 16
 660              	 .thumb_func
 662              	XMC_SCU_LowTemperature:
 663              	.LFB65:
 495:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 664              	 .loc 1 495 0
 665              	 .cfi_startproc
 496:../Libraries/XMCLib/src/xmc1_scu.c **** }
 666              	 .loc 1 496 0
 667 0000 014B     	 ldr r3,.L70
 668 0002 1868     	 ldr r0,[r3]
 669 0004 C00F     	 lsr r0,r0,#31
 497:../Libraries/XMCLib/src/xmc1_scu.c **** 
 670              	 .loc 1 497 0
 671              	 
 672 0006 7047     	 bx lr
 673              	.L71:
 674              	 .align 2
 675              	.L70:
 676 0008 38000140 	 .word 1073807416
 677              	 .cfi_endproc
 678              	.LFE65:
 680              	 .section .text.XMC_SCU_GetTemperature,"ax",%progbits
 681              	 .align 2
 682              	 .global XMC_SCU_GetTemperature
 683              	 .code 16
 684              	 .thumb_func
 686              	XMC_SCU_GetTemperature:
 687              	.LFB66:
 501:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 688              	 .loc 1 501 0
 689              	 .cfi_startproc
 504:../Libraries/XMCLib/src/xmc1_scu.c **** 
 690              	 .loc 1 504 0
 691 0000 4023     	 mov r3,#64
 692 0002 024A     	 ldr r2,.L73
 693 0004 D05A     	 ldrh r0,[r2,r3]
 694 0006 80B2     	 uxth r0,r0
 695              	.LVL44:
 507:../Libraries/XMCLib/src/xmc1_scu.c **** 
 696              	 .loc 1 507 0
 697              	 
 698 0008 7047     	 bx lr
 699              	.L74:
 700 000a C046     	 .align 2
 701              	.L73:
 702 000c 00100140 	 .word 1073811456
 703              	 .cfi_endproc
 704              	.LFE66:
 706              	 .section .text.XMC_SCU_CalcTemperature,"ax",%progbits
 707              	 .align 2
 708              	 .global XMC_SCU_CalcTemperature
 709              	 .code 16
 710              	 .thumb_func
 712              	XMC_SCU_CalcTemperature:
 713              	.LFB67:
 511:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 714              	 .loc 1 511 0
 715              	 .cfi_startproc
 716 0000 08B5     	 push {r3,lr}
 717              	.LCFI5:
 718              	 .cfi_def_cfa_offset 8
 719              	 .cfi_offset 3,-8
 720              	 .cfi_offset 14,-4
 512:../Libraries/XMCLib/src/xmc1_scu.c **** }
 721              	 .loc 1 512 0
 722 0002 8623     	 mov r3,#134
 723 0004 5B00     	 lsl r3,r3,#1
 724 0006 1B68     	 ldr r3,[r3]
 725 0008 9847     	 blx r3
 726              	.LVL45:
 513:../Libraries/XMCLib/src/xmc1_scu.c **** 
 727              	 .loc 1 513 0
 728              	 
 729 000a 08BD     	 pop {r3,pc}
 730              	 .cfi_endproc
 731              	.LFE67:
 733              	 .section .text.XMC_SCU_CLOCK_SetRtcClockSource,"ax",%progbits
 734              	 .align 2
 735              	 .global XMC_SCU_CLOCK_SetRtcClockSource
 736              	 .code 16
 737              	 .thumb_func
 739              	XMC_SCU_CLOCK_SetRtcClockSource:
 740              	.LFB69:
 577:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 741              	 .loc 1 577 0
 742              	 .cfi_startproc
 743              	.LVL46:
 744 0000 10B5     	 push {r4,lr}
 745              	.LCFI6:
 746              	 .cfi_def_cfa_offset 8
 747              	 .cfi_offset 4,-8
 748              	 .cfi_offset 14,-4
 749 0002 041C     	 mov r4,r0
 580:../Libraries/XMCLib/src/xmc1_scu.c **** 
 750              	 .loc 1 580 0
 751 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 752              	.LVL47:
 582:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 753              	 .loc 1 582 0
 754 0008 044A     	 ldr r2,.L77
 755 000a 1168     	 ldr r1,[r2]
 756 000c 044B     	 ldr r3,.L77+4
 757 000e 0B40     	 and r3,r1
 758 0010 1C43     	 orr r4,r3
 759              	.LVL48:
 760 0012 1460     	 str r4,[r2]
 585:../Libraries/XMCLib/src/xmc1_scu.c **** }
 761              	 .loc 1 585 0
 762 0014 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 763              	.LVL49:
 586:../Libraries/XMCLib/src/xmc1_scu.c **** 
 764              	 .loc 1 586 0
 765              	 
 766 0018 10BD     	 pop {r4,pc}
 767              	.L78:
 768 001a C046     	 .align 2
 769              	.L77:
 770 001c 00030140 	 .word 1073808128
 771 0020 FFFFF1FF 	 .word -917505
 772              	 .cfi_endproc
 773              	.LFE69:
 775              	 .section .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource,"ax",%progbits
 776              	 .align 2
 777              	 .global XMC_SCU_CLOCK_SetFastPeripheralClockSource
 778              	 .code 16
 779              	 .thumb_func
 781              	XMC_SCU_CLOCK_SetFastPeripheralClockSource:
 782              	.LFB70:
 590:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 783              	 .loc 1 590 0
 784              	 .cfi_startproc
 785              	.LVL50:
 786 0000 10B5     	 push {r4,lr}
 787              	.LCFI7:
 788              	 .cfi_def_cfa_offset 8
 789              	 .cfi_offset 4,-8
 790              	 .cfi_offset 14,-4
 791 0002 041C     	 mov r4,r0
 591:../Libraries/XMCLib/src/xmc1_scu.c **** 
 792              	 .loc 1 591 0
 793 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 794              	.LVL51:
 593:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 795              	 .loc 1 593 0
 796 0008 044A     	 ldr r2,.L80
 797 000a 1168     	 ldr r1,[r2]
 798 000c 044B     	 ldr r3,.L80+4
 799 000e 0B40     	 and r3,r1
 800 0010 1C43     	 orr r4,r3
 801              	.LVL52:
 802 0012 1460     	 str r4,[r2]
 596:../Libraries/XMCLib/src/xmc1_scu.c **** }
 803              	 .loc 1 596 0
 804 0014 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 805              	.LVL53:
 597:../Libraries/XMCLib/src/xmc1_scu.c **** 
 806              	 .loc 1 597 0
 807              	 
 808 0018 10BD     	 pop {r4,pc}
 809              	.L81:
 810 001a C046     	 .align 2
 811              	.L80:
 812 001c 00030140 	 .word 1073808128
 813 0020 FFFFFEFF 	 .word -65537
 814              	 .cfi_endproc
 815              	.LFE70:
 817              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 818              	 .align 2
 819              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 820              	 .code 16
 821              	 .thumb_func
 823              	XMC_SCU_CLOCK_GatePeripheralClock:
 824              	.LFB71:
 601:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 825              	 .loc 1 601 0
 826              	 .cfi_startproc
 827              	.LVL54:
 828 0000 10B5     	 push {r4,lr}
 829              	.LCFI8:
 830              	 .cfi_def_cfa_offset 8
 831              	 .cfi_offset 4,-8
 832              	 .cfi_offset 14,-4
 833 0002 041C     	 mov r4,r0
 602:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 834              	 .loc 1 602 0
 835 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 836              	.LVL55:
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 837              	 .loc 1 603 0
 838 0008 034B     	 ldr r3,.L83
 839 000a DA68     	 ldr r2,[r3,#12]
 840 000c 1443     	 orr r4,r2
 841 000e DC60     	 str r4,[r3,#12]
 604:../Libraries/XMCLib/src/xmc1_scu.c **** }
 842              	 .loc 1 604 0
 843 0010 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 844              	.LVL56:
 605:../Libraries/XMCLib/src/xmc1_scu.c **** 
 845              	 .loc 1 605 0
 846              	 
 847 0014 10BD     	 pop {r4,pc}
 848              	.L84:
 849 0016 C046     	 .align 2
 850              	.L83:
 851 0018 00030140 	 .word 1073808128
 852              	 .cfi_endproc
 853              	.LFE71:
 855              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 856              	 .align 2
 857              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 858              	 .code 16
 859              	 .thumb_func
 861              	XMC_SCU_CLOCK_UngatePeripheralClock:
 862              	.LFB72:
 609:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 863              	 .loc 1 609 0
 864              	 .cfi_startproc
 865              	.LVL57:
 866 0000 10B5     	 push {r4,lr}
 867              	.LCFI9:
 868              	 .cfi_def_cfa_offset 8
 869              	 .cfi_offset 4,-8
 870              	 .cfi_offset 14,-4
 871 0002 041C     	 mov r4,r0
 610:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 872              	 .loc 1 610 0
 873 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 874              	.LVL58:
 611:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 875              	 .loc 1 611 0
 876 0008 054B     	 ldr r3,.L87
 877 000a 1A69     	 ldr r2,[r3,#16]
 878 000c 1443     	 orr r4,r2
 879 000e 1C61     	 str r4,[r3,#16]
 880              	.L86:
 612:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 881              	 .loc 1 612 0 discriminator 1
 882 0010 034B     	 ldr r3,.L87
 883 0012 1B68     	 ldr r3,[r3]
 884 0014 5B00     	 lsl r3,r3,#1
 885 0016 FBD4     	 bmi .L86
 616:../Libraries/XMCLib/src/xmc1_scu.c **** }
 886              	 .loc 1 616 0
 887 0018 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 888              	.LVL59:
 617:../Libraries/XMCLib/src/xmc1_scu.c **** 
 889              	 .loc 1 617 0
 890              	 
 891 001c 10BD     	 pop {r4,pc}
 892              	.L88:
 893 001e C046     	 .align 2
 894              	.L87:
 895 0020 00030140 	 .word 1073808128
 896              	 .cfi_endproc
 897              	.LFE72:
 899              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 900              	 .align 2
 901              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 902              	 .code 16
 903              	 .thumb_func
 905              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 906              	.LFB73:
 621:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 907              	 .loc 1 621 0
 908              	 .cfi_startproc
 909              	.LVL60:
 622:../Libraries/XMCLib/src/xmc1_scu.c **** }
 910              	 .loc 1 622 0
 911 0000 034B     	 ldr r3,.L90
 912 0002 9B68     	 ldr r3,[r3,#8]
 913 0004 1840     	 and r0,r3
 914              	.LVL61:
 915 0006 431E     	 sub r3,r0,#1
 916 0008 9841     	 sbc r0,r0,r3
 917 000a C0B2     	 uxtb r0,r0
 623:../Libraries/XMCLib/src/xmc1_scu.c **** 
 918              	 .loc 1 623 0
 919              	 
 920 000c 7047     	 bx lr
 921              	.L91:
 922 000e C046     	 .align 2
 923              	.L90:
 924 0010 00030140 	 .word 1073808128
 925              	 .cfi_endproc
 926              	.LFE73:
 928              	 .section .text.XMC_SCU_CLOCK_ScaleMCLKFrequency,"ax",%progbits
 929              	 .align 2
 930              	 .global XMC_SCU_CLOCK_ScaleMCLKFrequency
 931              	 .code 16
 932              	 .thumb_func
 934              	XMC_SCU_CLOCK_ScaleMCLKFrequency:
 935              	.LFB75:
 669:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 936              	 .loc 1 669 0
 937              	 .cfi_startproc
 938              	.LVL62:
 939 0000 38B5     	 push {r3,r4,r5,lr}
 940              	.LCFI10:
 941              	 .cfi_def_cfa_offset 16
 942              	 .cfi_offset 3,-16
 943              	 .cfi_offset 4,-12
 944              	 .cfi_offset 5,-8
 945              	 .cfi_offset 14,-4
 946 0002 041C     	 mov r4,r0
 947 0004 0D1C     	 mov r5,r1
 673:../Libraries/XMCLib/src/xmc1_scu.c **** 
 948              	 .loc 1 673 0
 949 0006 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 950              	.LVL63:
 676:../Libraries/XMCLib/src/xmc1_scu.c **** 
 951              	 .loc 1 676 0
 952 000a 154B     	 ldr r3,.L97
 953 000c 1868     	 ldr r0,[r3]
 954 000e 0004     	 lsl r0,r0,#16
 955 0010 000E     	 lsr r0,r0,#24
 956              	.LVL64:
 686:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 957              	 .loc 1 686 0
 958 0012 1968     	 ldr r1,[r3]
 959 0014 134A     	 ldr r2,.L97+4
 960 0016 0A40     	 and r2,r1
 961 0018 1543     	 orr r5,r2
 962              	.LVL65:
 687:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 963              	 .loc 1 687 0
 964 001a 134A     	 ldr r2,.L97+8
 965 001c 1543     	 orr r5,r2
 686:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 966              	 .loc 1 686 0
 967 001e 1D60     	 str r5,[r3]
 968              	.L93:
 691:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 969              	 .loc 1 691 0 discriminator 1
 970 0020 0F4B     	 ldr r3,.L97
 971 0022 1B68     	 ldr r3,[r3]
 972 0024 5B00     	 lsl r3,r3,#1
 973 0026 FBD4     	 bmi .L93
 696:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 974              	 .loc 1 696 0
 975 0028 A042     	 cmp r0,r4
 976 002a 03D8     	 bhi .L94
 699:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 977              	 .loc 1 699 0
 978 002c 211C     	 mov r1,r4
 979 002e FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyDownScaling
 980              	.LVL66:
 981 0032 02E0     	 b .L95
 982              	.LVL67:
 983              	.L94:
 704:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 984              	 .loc 1 704 0
 985 0034 211C     	 mov r1,r4
 986 0036 FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyUpScaling
 987              	.LVL68:
 988              	.L95:
 707:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 989              	 .loc 1 707 0
 990 003a 094A     	 ldr r2,.L97
 991 003c 1168     	 ldr r1,[r2]
 992 003e 0B4B     	 ldr r3,.L97+12
 993 0040 0B40     	 and r3,r1
 708:../Libraries/XMCLib/src/xmc1_scu.c **** 
 994              	 .loc 1 708 0
 995 0042 2402     	 lsl r4,r4,#8
 996              	.LVL69:
 707:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 997              	 .loc 1 707 0
 998 0044 1C43     	 orr r4,r3
 708:../Libraries/XMCLib/src/xmc1_scu.c **** 
 999              	 .loc 1 708 0
 1000 0046 084B     	 ldr r3,.L97+8
 1001 0048 1C43     	 orr r4,r3
 707:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1002              	 .loc 1 707 0
 1003 004a 1460     	 str r4,[r2]
 1004              	.L96:
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1005              	 .loc 1 710 0 discriminator 1
 1006 004c 044B     	 ldr r3,.L97
 1007 004e 1B68     	 ldr r3,[r3]
 1008 0050 5B00     	 lsl r3,r3,#1
 1009 0052 FBD4     	 bmi .L96
 715:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1010              	 .loc 1 715 0
 1011 0054 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 1012              	.LVL70:
 717:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1013              	 .loc 1 717 0
 1014 0058 FFF7FEFF 	 bl SystemCoreClockUpdate
 1015              	.LVL71:
 719:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1016              	 .loc 1 719 0
 1017              	 
 1018 005c 38BD     	 pop {r3,r4,r5,pc}
 1019              	.L98:
 1020 005e C046     	 .align 2
 1021              	.L97:
 1022 0060 00030140 	 .word 1073808128
 1023 0064 00FF0FC0 	 .word -1072693504
 1024 0068 0000F03F 	 .word 1072693248
 1025 006c FF000FC0 	 .word -1072758529
 1026              	 .cfi_endproc
 1027              	.LFE75:
 1029              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 1030              	 .align 2
 1031              	 .global XMC_SCU_CLOCK_Init
 1032              	 .code 16
 1033              	 .thumb_func
 1035              	XMC_SCU_CLOCK_Init:
 1036              	.LFB68:
 518:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 1037              	 .loc 1 518 0
 1038              	 .cfi_startproc
 1039              	.LVL72:
 1040 0000 10B5     	 push {r4,lr}
 1041              	.LCFI11:
 1042              	 .cfi_def_cfa_offset 8
 1043              	 .cfi_offset 4,-8
 1044              	 .cfi_offset 14,-4
 1045 0002 041C     	 mov r4,r0
 520:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1046              	 .loc 1 520 0
 1047 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 1048              	.LVL73:
 563:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1049              	 .loc 1 563 0
 1050 0008 074A     	 ldr r2,.L100
 1051 000a 1168     	 ldr r1,[r2]
 1052 000c 074B     	 ldr r3,.L100+4
 1053 000e 0B40     	 and r3,r1
 1054 0010 A168     	 ldr r1,[r4,#8]
 1055 0012 0B43     	 orr r3,r1
 564:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 1056              	 .loc 1 564 0
 1057 0014 6168     	 ldr r1,[r4,#4]
 1058 0016 0B43     	 orr r3,r1
 563:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1059              	 .loc 1 563 0
 1060 0018 1360     	 str r3,[r2]
 568:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1061              	 .loc 1 568 0
 1062 001a FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 1063              	.LVL74:
 571:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1064              	 .loc 1 571 0
 1065 001e 6078     	 ldrb r0,[r4,#1]
 1066 0020 2178     	 ldrb r1,[r4]
 1067 0022 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1068              	.LVL75:
 573:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1069              	 .loc 1 573 0
 1070              	 
 1071              	.LVL76:
 1072 0026 10BD     	 pop {r4,pc}
 1073              	.L101:
 1074              	 .align 2
 1075              	.L100:
 1076 0028 00030140 	 .word 1073808128
 1077 002c FFFFF0FF 	 .word -983041
 1078              	 .cfi_endproc
 1079              	.LFE68:
 1081              	 .global __aeabi_uidiv
 1082              	 .section .text.XMC_SCU_CLOCK_SetMCLKFrequency,"ax",%progbits
 1083              	 .align 2
 1084              	 .global XMC_SCU_CLOCK_SetMCLKFrequency
 1085              	 .code 16
 1086              	 .thumb_func
 1088              	XMC_SCU_CLOCK_SetMCLKFrequency:
 1089              	.LFB74:
 627:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1090              	 .loc 1 627 0
 1091              	 .cfi_startproc
 1092              	.LVL77:
 1093 0000 08B5     	 push {r3,lr}
 1094              	.LCFI12:
 1095              	 .cfi_def_cfa_offset 8
 1096              	 .cfi_offset 3,-8
 1097              	 .cfi_offset 14,-4
 1098 0002 011C     	 mov r1,r0
 651:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1099              	 .loc 1 651 0
 1100 0004 FA20     	 mov r0,#250
 1101              	.LVL78:
 1102 0006 C003     	 lsl r0,r0,#15
 1103 0008 FFF7FEFF 	 bl __aeabi_uidiv
 1104              	.LVL79:
 1105 000c 011E     	 sub r1,r0,#0
 1106              	.LVL80:
 654:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1107              	 .loc 1 654 0
 1108 000e 054B     	 ldr r3,.L105
 1109 0010 9942     	 cmp r1,r3
 1110 0012 00D9     	 bls .L103
 656:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1111              	 .loc 1 656 0
 1112 0014 191C     	 mov r1,r3
 1113              	.L103:
 1114              	.LVL81:
 659:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 1115              	 .loc 1 659 0
 1116 0016 080A     	 lsr r0,r1,#8
 1117              	.LVL82:
 660:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 1118              	 .loc 1 660 0
 1119 0018 FF23     	 mov r3,#255
 1120 001a 1940     	 and r1,r3
 1121              	.LVL83:
 663:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1122              	 .loc 1 663 0
 1123 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1124              	.LVL84:
 664:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1125              	 .loc 1 664 0
 1126              	 
 1127 0020 08BD     	 pop {r3,pc}
 1128              	.L106:
 1129 0022 C046     	 .align 2
 1130              	.L105:
 1131 0024 FFFF0000 	 .word 65535
 1132              	 .cfi_endproc
 1133              	.LFE74:
 1135              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1136              	 .align 2
 1137              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1138              	 .code 16
 1139              	 .thumb_func
 1141              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1142              	.LFB78:
 760:../Libraries/XMCLib/src/xmc1_scu.c **** 
 761:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 762:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 763:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 764:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 765:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1143              	 .loc 1 765 0
 1144              	 .cfi_startproc
 766:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1145              	 .loc 1 766 0
 1146 0000 014B     	 ldr r3,.L108
 1147 0002 1868     	 ldr r0,[r3]
 767:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1148              	 .loc 1 767 0
 1149              	 
 1150 0004 7047     	 bx lr
 1151              	.L109:
 1152 0006 C046     	 .align 2
 1153              	.L108:
 1154 0008 00000000 	 .word SystemCoreClock
 1155              	 .cfi_endproc
 1156              	.LFE78:
 1158              	 .section .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency,"ax",%progbits
 1159              	 .align 2
 1160              	 .global XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
 1161              	 .code 16
 1162              	 .thumb_func
 1164              	XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:
 1165              	.LFB79:
 768:../Libraries/XMCLib/src/xmc1_scu.c **** 
 769:../Libraries/XMCLib/src/xmc1_scu.c **** /* Provides the clock frequency of peripherals on the peripheral bus that are using a shared functi
 770:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetFastPeripheralClockFrequency(void)
 771:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1166              	 .loc 1 771 0
 1167              	 .cfi_startproc
 772:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1168              	 .loc 1 772 0
 1169 0000 044B     	 ldr r3,.L111
 1170 0002 1B68     	 ldr r3,[r3]
 1171 0004 044A     	 ldr r2,.L111+4
 1172 0006 1068     	 ldr r0,[r2]
 1173 0008 C003     	 lsl r0,r0,#15
 1174 000a C00F     	 lsr r0,r0,#31
 1175 000c 8340     	 lsl r3,r3,r0
 1176 000e 181C     	 mov r0,r3
 773:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1177              	 .loc 1 773 0
 1178              	 
 1179 0010 7047     	 bx lr
 1180              	.L112:
 1181 0012 C046     	 .align 2
 1182              	.L111:
 1183 0014 00000000 	 .word SystemCoreClock
 1184 0018 00030140 	 .word 1073808128
 1185              	 .cfi_endproc
 1186              	.LFE79:
 1188              	 .global __aeabi_idiv
 1189              	 .section .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature,"ax",%progbits
 1190              	 .align 2
 1191              	 .global XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
 1192              	 .code 16
 1193              	 .thumb_func
 1195              	XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:
 1196              	.LFB80:
 774:../Libraries/XMCLib/src/xmc1_scu.c **** 
 775:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 776:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature(int32_t temperature)
 777:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1197              	 .loc 1 777 0
 1198              	 .cfi_startproc
 1199              	.LVL85:
 1200 0000 10B5     	 push {r4,lr}
 1201              	.LCFI13:
 1202              	 .cfi_def_cfa_offset 8
 1203              	 .cfi_offset 4,-8
 1204              	 .cfi_offset 14,-4
 778:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t a;
 779:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t b;
 780:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t d;
 781:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t e;
 782:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t offset;
 783:../Libraries/XMCLib/src/xmc1_scu.c **** 
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   a = *((uint8_t*)DCO_ADJLO_T2);
 1205              	 .loc 1 784 0
 1206 0002 0D4B     	 ldr r3,.L114
 1207 0004 1A78     	 ldrb r2,[r3]
 1208              	.LVL86:
 785:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1209              	 .loc 1 785 0
 1210 0006 0D4B     	 ldr r3,.L114+4
 1211 0008 1C78     	 ldrb r4,[r3]
 1212              	.LVL87:
 786:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 1213              	 .loc 1 786 0
 1214 000a 0D4B     	 ldr r3,.L114+8
 1215 000c 1978     	 ldrb r1,[r3]
 1216              	.LVL88:
 787:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 1217              	 .loc 1 787 0
 1218 000e 0D4B     	 ldr r3,.L114+12
 1219 0010 1B78     	 ldrb r3,[r3]
 1220              	.LVL89:
 788:../Libraries/XMCLib/src/xmc1_scu.c **** 
 789:../Libraries/XMCLib/src/xmc1_scu.c ****   offset = b + (((a - b) * (temperature - d)) / (e - d));
 1221              	 .loc 1 789 0
 1222 0012 121B     	 sub r2,r2,r4
 1223              	.LVL90:
 1224 0014 401A     	 sub r0,r0,r1
 1225              	.LVL91:
 1226 0016 5043     	 mul r0,r2
 1227 0018 591A     	 sub r1,r3,r1
 1228              	.LVL92:
 1229 001a FFF7FEFF 	 bl __aeabi_idiv
 1230              	.LVL93:
 1231 001e 0419     	 add r4,r0,r4
 1232              	.LVL94:
 790:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1233              	 .loc 1 790 0
 1234 0020 0F20     	 mov r0,#15
 1235 0022 0440     	 and r4,r0
 1236              	.LVL95:
 791:../Libraries/XMCLib/src/xmc1_scu.c **** 
 792:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1237              	 .loc 1 792 0
 1238 0024 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 1239              	.LVL96:
 793:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 1240              	 .loc 1 793 0
 1241 0028 A4B2     	 uxth r4,r4
 1242              	.LVL97:
 1243 002a 6C23     	 mov r3,#108
 1244 002c 064A     	 ldr r2,.L114+16
 1245 002e D452     	 strh r4,[r2,r3]
 794:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1246              	 .loc 1 794 0
 1247 0030 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 1248              	.LVL98:
 795:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1249              	 .loc 1 795 0
 1250              	 
 1251 0034 10BD     	 pop {r4,pc}
 1252              	.L115:
 1253 0036 C046     	 .align 2
 1254              	.L114:
 1255 0038 330F0010 	 .word 268439347
 1256 003c 320F0010 	 .word 268439346
 1257 0040 300F0010 	 .word 268439344
 1258 0044 310F0010 	 .word 268439345
 1259 0048 00100140 	 .word 1073811456
 1260              	 .cfi_endproc
 1261              	.LFE80:
 1263              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 1264              	 .align 2
 1265              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 1266              	 .code 16
 1267              	 .thumb_func
 1269              	XMC_SCU_INTERRUPT_SetEventHandler:
 1270              	.LFB81:
 796:../Libraries/XMCLib/src/xmc1_scu.c **** 
 797:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 798:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event
 799:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 800:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRU
 801:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1271              	 .loc 1 801 0
 1272              	 .cfi_startproc
 1273              	.LVL99:
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status;
 804:../Libraries/XMCLib/src/xmc1_scu.c **** 
 805:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(eve
 806:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);
 807:../Libraries/XMCLib/src/xmc1_scu.c **** 
 808:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 1274              	 .loc 1 808 0
 1275 0000 0023     	 mov r3,#0
 809:../Libraries/XMCLib/src/xmc1_scu.c **** 
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 1276              	 .loc 1 810 0
 1277 0002 00E0     	 b .L117
 1278              	.LVL100:
 1279              	.L119:
 811:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 812:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1280              	 .loc 1 812 0
 1281 0004 0133     	 add r3,r3,#1
 1282              	.LVL101:
 1283              	.L117:
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1284              	 .loc 1 810 0
 1285 0006 021C     	 mov r2,r0
 1286 0008 DA40     	 lsr r2,r2,r3
 1287 000a D207     	 lsl r2,r2,#31
 1288 000c 01D4     	 bmi .L118
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1289              	 .loc 1 810 0 is_stmt 0 discriminator 1
 1290 000e 1F2B     	 cmp r3,#31
 1291 0010 F8D9     	 bls .L119
 1292              	.L118:
 813:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 814:../Libraries/XMCLib/src/xmc1_scu.c **** 
 815:../Libraries/XMCLib/src/xmc1_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 1293              	 .loc 1 815 0 is_stmt 1
 1294 0012 202B     	 cmp r3,#32
 1295 0014 04D0     	 beq .L121
 816:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 817:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 818:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 819:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 820:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 821:../Libraries/XMCLib/src/xmc1_scu.c ****     event_handler_list[index] = handler;
 1296              	 .loc 1 821 0
 1297 0016 9B00     	 lsl r3,r3,#2
 1298              	.LVL102:
 1299 0018 024A     	 ldr r2,.L122
 1300 001a 9950     	 str r1,[r3,r2]
 1301              	.LVL103:
 822:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 1302              	 .loc 1 822 0
 1303 001c 0020     	 mov r0,#0
 1304              	.LVL104:
 1305 001e 00E0     	 b .L120
 1306              	.LVL105:
 1307              	.L121:
 817:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1308              	 .loc 1 817 0
 1309 0020 0120     	 mov r0,#1
 1310              	.LVL106:
 1311              	.L120:
 823:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 824:../Libraries/XMCLib/src/xmc1_scu.c **** 
 825:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 826:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1312              	 .loc 1 826 0
 1313              	 
 1314 0022 7047     	 bx lr
 1315              	.L123:
 1316              	 .align 2
 1317              	.L122:
 1318 0024 00000000 	 .word .LANCHOR0
 1319              	 .cfi_endproc
 1320              	.LFE81:
 1322              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 1323              	 .align 2
 1324              	 .global XMC_SCU_IRQHandler
 1325              	 .code 16
 1326              	 .thumb_func
 1328              	XMC_SCU_IRQHandler:
 1329              	.LFB82:
 827:../Libraries/XMCLib/src/xmc1_scu.c **** 
 828:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 829:../Libraries/XMCLib/src/xmc1_scu.c ****  * A common function to execute callback functions for multiple events
 830:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 831:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
 832:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1330              	 .loc 1 832 0
 1331              	 .cfi_startproc
 1332              	.LVL107:
 1333 0000 38B5     	 push {r3,r4,r5,lr}
 1334              	.LCFI14:
 1335              	 .cfi_def_cfa_offset 16
 1336              	 .cfi_offset 3,-16
 1337              	 .cfi_offset 4,-12
 1338              	 .cfi_offset 5,-8
 1339              	 .cfi_offset 14,-4
 1340 0002 041C     	 mov r4,r0
 1341              	.LVL108:
 833:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_IRQHandler: Invalid sr_num", sr_num < SCU_IRQ_NUM);
 834:../Libraries/XMCLib/src/xmc1_scu.c **** 
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 836:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
 837:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
 838:../Libraries/XMCLib/src/xmc1_scu.c **** 
 839:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 840:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 1342              	 .loc 1 840 0
 1343 0004 FFF7FEFF 	 bl XMC_SCU_INTERUPT_GetEventStatus
 1344              	.LVL109:
 1345 0008 A400     	 lsl r4,r4,#2
 1346              	.LVL110:
 1347 000a 0D4B     	 ldr r3,.L129
 1348 000c E558     	 ldr r5,[r4,r3]
 1349 000e 0540     	 and r5,r0
 1350              	.LVL111:
 841:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 1351              	 .loc 1 841 0
 1352 0010 281C     	 mov r0,r5
 1353 0012 FFF7FEFF 	 bl XMC_SCU_INTERRUPT_ClearEventStatus
 1354              	.LVL112:
 839:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 1355              	 .loc 1 839 0
 1356 0016 0024     	 mov r4,#0
 842:../Libraries/XMCLib/src/xmc1_scu.c **** 
 843:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 1357              	 .loc 1 843 0
 1358 0018 0DE0     	 b .L125
 1359              	.LVL113:
 1360              	.L128:
 844:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 845:../Libraries/XMCLib/src/xmc1_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 1361              	 .loc 1 845 0
 1362 001a 2B1C     	 mov r3,r5
 1363 001c E340     	 lsr r3,r3,r4
 1364 001e DB07     	 lsl r3,r3,#31
 1365 0020 08D5     	 bpl .L126
 846:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 847:../Libraries/XMCLib/src/xmc1_scu.c ****       event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
 1366              	 .loc 1 847 0
 1367 0022 0123     	 mov r3,#1
 1368 0024 A340     	 lsl r3,r3,r4
 1369 0026 9D43     	 bic r5,r3
 1370              	.LVL114:
 848:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 1371              	 .loc 1 848 0
 1372 0028 A300     	 lsl r3,r4,#2
 1373 002a 064A     	 ldr r2,.L129+4
 1374 002c 9B58     	 ldr r3,[r3,r2]
 1375              	.LVL115:
 849:../Libraries/XMCLib/src/xmc1_scu.c ****       if (event_handler != NULL)
 1376              	 .loc 1 849 0
 1377 002e 002B     	 cmp r3,#0
 1378 0030 00D0     	 beq .L126
 850:../Libraries/XMCLib/src/xmc1_scu.c ****       {
 851:../Libraries/XMCLib/src/xmc1_scu.c ****         event_handler();
 1379              	 .loc 1 851 0
 1380 0032 9847     	 blx r3
 1381              	.LVL116:
 1382              	.L126:
 852:../Libraries/XMCLib/src/xmc1_scu.c ****       }
 853:../Libraries/XMCLib/src/xmc1_scu.c **** 
 854:../Libraries/XMCLib/src/xmc1_scu.c ****       /* break; XMC1: Only PULSE interrupts */
 855:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 856:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1383              	 .loc 1 856 0
 1384 0034 0134     	 add r4,r4,#1
 1385              	.LVL117:
 1386              	.L125:
 843:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1387              	 .loc 1 843 0
 1388 0036 002D     	 cmp r5,#0
 1389 0038 01D0     	 beq .L124
 843:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1390              	 .loc 1 843 0 is_stmt 0 discriminator 1
 1391 003a 1F2C     	 cmp r4,#31
 1392 003c EDD9     	 bls .L128
 1393              	.L124:
 857:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 858:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1394              	 .loc 1 858 0 is_stmt 1
 1395              	 
 1396              	.LVL118:
 1397              	.LVL119:
 1398 003e 38BD     	 pop {r3,r4,r5,pc}
 1399              	.L130:
 1400              	 .align 2
 1401              	.L129:
 1402 0040 00000000 	 .word .LANCHOR1
 1403 0044 00000000 	 .word .LANCHOR0
 1404              	 .cfi_endproc
 1405              	.LFE82:
 1407              	 .section .text.XMC_SCU_SetBMI,"ax",%progbits
 1408              	 .align 2
 1409              	 .global XMC_SCU_SetBMI
 1410              	 .code 16
 1411              	 .thumb_func
 1413              	XMC_SCU_SetBMI:
 1414              	.LFB83:
 859:../Libraries/XMCLib/src/xmc1_scu.c **** 
 860:../Libraries/XMCLib/src/xmc1_scu.c **** /* Install BMI */
 861:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_SetBMI(uint32_t flags, uint8_t timeout)
 862:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1415              	 .loc 1 862 0
 1416              	 .cfi_startproc
 1417              	.LVL120:
 1418 0000 08B5     	 push {r3,lr}
 1419              	.LCFI15:
 1420              	 .cfi_def_cfa_offset 8
 1421              	 .cfi_offset 3,-8
 1422              	 .cfi_offset 14,-4
 863:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 864:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x0fffU) | ((timeout << 12) & 0xf000U));
 865:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 866:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x07ffU) | ((timeout << 12) & 0xf000U) | 0x0800U);
 1423              	 .loc 1 866 0
 1424 0002 8423     	 mov r3,#132
 1425 0004 5B00     	 lsl r3,r3,#1
 1426 0006 1B68     	 ldr r3,[r3]
 1427 0008 4005     	 lsl r0,r0,#21
 1428              	.LVL121:
 1429 000a 400D     	 lsr r0,r0,#21
 1430 000c 0907     	 lsl r1,r1,#28
 1431              	.LVL122:
 1432 000e 090C     	 lsr r1,r1,#16
 1433 0010 0843     	 orr r0,r1
 1434 0012 8021     	 mov r1,#128
 1435 0014 0901     	 lsl r1,r1,#4
 1436 0016 0843     	 orr r0,r1
 1437 0018 9847     	 blx r3
 1438              	.LVL123:
 867:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 868:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1439              	 .loc 1 868 0
 1440              	 
 1441 001a 08BD     	 pop {r3,pc}
 1442              	 .cfi_endproc
 1443              	.LFE83:
 1445              	 .section .bss.event_handler_list,"aw",%nobits
 1446              	 .align 2
 1447              	 .set .LANCHOR0,.+0
 1450              	event_handler_list:
 1451 0000 00000000 	 .space 128
 1451      00000000 
 1451      00000000 
 1451      00000000 
 1451      00000000 
 1452              	 .section .rodata.event_masks,"a",%progbits
 1453              	 .align 2
 1454              	 .set .LANCHOR1,.+0
 1457              	event_masks:
 1458 0000 00001F00 	 .word 2031616
 1459 0004 8F0060FF 	 .word -10485617
 1460 0008 00000000 	 .word 0
 1461              	 .text
 1462              	.Letext0:
 1463              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1464              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1465              	 .file 4 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 1466              	 .file 5 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/XMCLib/inc/xmc_scu.h"
 1467              	 .file 6 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/XMCLib/inc/xmc1_scu.h"
 1468              	 .file 7 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Infineon/XMC1100_series/Include/system_XMC1100.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_scu.c
    {standard input}:18     .text.XMC_SCU_CalcTSEVAR:00000000 $t
    {standard input}:22     .text.XMC_SCU_CalcTSEVAR:00000000 XMC_SCU_CalcTSEVAR
    {standard input}:71     .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 $t
    {standard input}:75     .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 XMC_SCU_CLOCK_lFrequencyUpScaling
    {standard input}:122    .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000028 $d
    {standard input}:129    .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 $t
    {standard input}:133    .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 XMC_SCU_CLOCK_lFrequencyDownScaling
    {standard input}:187    .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000030 $d
    {standard input}:194    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:199    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:216    .text.XMC_SCU_INTERRUPT_EnableEvent:0000000c $d
    {standard input}:221    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:226    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:242    .text.XMC_SCU_INTERRUPT_DisableEvent:0000000c $d
    {standard input}:247    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:252    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:269    .text.XMC_SCU_INTERRUPT_TriggerEvent:0000000c $d
    {standard input}:274    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:279    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:293    .text.XMC_SCU_INTERUPT_GetEventStatus:00000008 $d
    {standard input}:298    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:303    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:320    .text.XMC_SCU_INTERRUPT_ClearEventStatus:0000000c $d
    {standard input}:325    .text.XMC_SCU_LockProtectedBits:00000000 $t
    {standard input}:330    .text.XMC_SCU_LockProtectedBits:00000000 XMC_SCU_LockProtectedBits
    {standard input}:344    .text.XMC_SCU_LockProtectedBits:00000008 $d
    {standard input}:349    .text.XMC_SCU_UnlockProtectedBits:00000000 $t
    {standard input}:354    .text.XMC_SCU_UnlockProtectedBits:00000000 XMC_SCU_UnlockProtectedBits
    {standard input}:374    .text.XMC_SCU_UnlockProtectedBits:00000010 $d
    {standard input}:379    .text.XMC_SCU_SupplyMonitorInit:00000000 $t
    {standard input}:384    .text.XMC_SCU_SupplyMonitorInit:00000000 XMC_SCU_SupplyMonitorInit
    {standard input}:450    .text.XMC_SCU_SupplyMonitorInit:00000044 $d
    {standard input}:456    .text.XMC_SCU_SetTempLowLimit:00000000 $t
    {standard input}:461    .text.XMC_SCU_SetTempLowLimit:00000000 XMC_SCU_SetTempLowLimit
    {standard input}:498    .text.XMC_SCU_SetTempLowLimit:00000018 $d
    {standard input}:503    .text.XMC_SCU_SetTempHighLimit:00000000 $t
    {standard input}:508    .text.XMC_SCU_SetTempHighLimit:00000000 XMC_SCU_SetTempHighLimit
    {standard input}:545    .text.XMC_SCU_SetTempHighLimit:00000018 $d
    {standard input}:550    .text.XMC_SCU_SetRawTempLimits:00000000 $t
    {standard input}:555    .text.XMC_SCU_SetRawTempLimits:00000000 XMC_SCU_SetRawTempLimits
    {standard input}:575    .text.XMC_SCU_SetRawTempLimits:0000000c $d
    {standard input}:580    .text.XMC_SCU_StartTempMeasurement:00000000 $t
    {standard input}:585    .text.XMC_SCU_StartTempMeasurement:00000000 XMC_SCU_StartTempMeasurement
    {standard input}:601    .text.XMC_SCU_StartTempMeasurement:0000000c $d
    {standard input}:606    .text.XMC_SCU_StopTempMeasurement:00000000 $t
    {standard input}:611    .text.XMC_SCU_StopTempMeasurement:00000000 XMC_SCU_StopTempMeasurement
    {standard input}:627    .text.XMC_SCU_StopTempMeasurement:0000000c $d
    {standard input}:632    .text.XMC_SCU_HighTemperature:00000000 $t
    {standard input}:637    .text.XMC_SCU_HighTemperature:00000000 XMC_SCU_HighTemperature
    {standard input}:652    .text.XMC_SCU_HighTemperature:0000000c $d
    {standard input}:657    .text.XMC_SCU_LowTemperature:00000000 $t
    {standard input}:662    .text.XMC_SCU_LowTemperature:00000000 XMC_SCU_LowTemperature
    {standard input}:676    .text.XMC_SCU_LowTemperature:00000008 $d
    {standard input}:681    .text.XMC_SCU_GetTemperature:00000000 $t
    {standard input}:686    .text.XMC_SCU_GetTemperature:00000000 XMC_SCU_GetTemperature
    {standard input}:702    .text.XMC_SCU_GetTemperature:0000000c $d
    {standard input}:707    .text.XMC_SCU_CalcTemperature:00000000 $t
    {standard input}:712    .text.XMC_SCU_CalcTemperature:00000000 XMC_SCU_CalcTemperature
    {standard input}:734    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 $t
    {standard input}:739    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 XMC_SCU_CLOCK_SetRtcClockSource
    {standard input}:770    .text.XMC_SCU_CLOCK_SetRtcClockSource:0000001c $d
    {standard input}:776    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 $t
    {standard input}:781    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 XMC_SCU_CLOCK_SetFastPeripheralClockSource
    {standard input}:812    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:0000001c $d
    {standard input}:818    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:823    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:851    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000018 $d
    {standard input}:856    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:861    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:895    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000020 $d
    {standard input}:900    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:905    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:924    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000010 $d
    {standard input}:929    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 $t
    {standard input}:934    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 XMC_SCU_CLOCK_ScaleMCLKFrequency
    {standard input}:1022   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000060 $d
    {standard input}:1030   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:1035   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:1076   .text.XMC_SCU_CLOCK_Init:00000028 $d
    {standard input}:1083   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 $t
    {standard input}:1088   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 XMC_SCU_CLOCK_SetMCLKFrequency
    {standard input}:1131   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000024 $d
    {standard input}:1136   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1141   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1154   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000008 $d
    {standard input}:1159   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 $t
    {standard input}:1164   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
    {standard input}:1183   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000014 $d
    {standard input}:1190   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 $t
    {standard input}:1195   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
    {standard input}:1255   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000038 $d
    {standard input}:1264   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:1269   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:1318   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000024 $d
    {standard input}:1323   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:1328   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:1402   .text.XMC_SCU_IRQHandler:00000040 $d
    {standard input}:1408   .text.XMC_SCU_SetBMI:00000000 $t
    {standard input}:1413   .text.XMC_SCU_SetBMI:00000000 XMC_SCU_SetBMI
    {standard input}:1446   .bss.event_handler_list:00000000 $d
    {standard input}:1450   .bss.event_handler_list:00000000 event_handler_list
    {standard input}:1453   .rodata.event_masks:00000000 $d
    {standard input}:1457   .rodata.event_masks:00000000 event_masks
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClockUpdate
__aeabi_uidiv
SystemCoreClock
__aeabi_idiv
