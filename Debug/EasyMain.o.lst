   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "EasyMain.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.__NVIC_SetPriority,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	__NVIC_SetPriority:
  23              	.LFB27:
  24              	 .file 1 "D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include/core_cm0.h"
   1:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * @version  V5.0.1
   5:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * @date     25. November 2016
   6:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
   7:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*
   8:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  *
  10:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  *
  12:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * not use this file except in compliance with the License.
  14:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * You may obtain a copy of the License at
  15:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  *
  16:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  *
  18:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * See the License for the specific language governing permissions and
  22:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  * limitations under the License.
  23:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
  24:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  25:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #if   defined ( __ICCARM__ )
  26:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  27:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  28:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif
  30:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  31:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  34:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #include <stdint.h>
  35:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  36:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  37:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
  38:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif
  39:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  40:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
  41:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  44:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  47:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  49:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  50:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
  53:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  54:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  55:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
  56:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  57:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  58:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
  59:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup Cortex_M0
  60:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
  61:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
  62:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  63:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  64:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  ( 5U)                                  /*!< [31:16] CMSIS HAL mai
  65:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   ( 0U)                                  /*!< [15:0]  CMSIS HAL sub
  66:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  67:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< CMSIS HAL version num
  68:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  69:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  70:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  71:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  72:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     This core does not support an FPU at all
  73:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** */
  74:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define __FPU_USED       0U
  75:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  76:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
  77:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
  78:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  79:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  80:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  81:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  82:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARM_PCS_VFP
  83:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  84:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  85:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  86:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  87:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  88:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  89:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  90:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  91:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  92:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
  93:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  94:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  95:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
  96:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TI_ARM__ )
  97:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
  98:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  99:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 100:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 101:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 102:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 103:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 104:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 105:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 106:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __CSMC__ )
 107:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 108:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 109:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 110:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 111:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif
 112:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 113:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 114:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 115:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 116:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 117:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 118:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif
 119:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 120:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 121:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 122:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 123:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 124:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 125:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 126:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 127:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 128:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
 129:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif
 130:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 131:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 132:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 133:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 134:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000U
 135:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 136:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 137:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 138:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 139:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 140:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 141:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 142:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 143:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 144:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 145:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 146:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 147:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif
 148:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 149:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 150:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 151:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 152:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 153:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 154:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 155:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 156:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** */
 157:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 158:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 159:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #else
 160:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 161:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif
 162:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 163:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 164:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 165:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* following defines should be used for structure members */
 166:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 167:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 168:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 169:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 170:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 171:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 172:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 173:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 174:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 175:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 176:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   Core Register contain:
 177:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register
 178:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 179:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   - Core SCB Register
 180:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 181:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 182:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 183:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 184:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 185:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** */
 186:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 187:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 188:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 189:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 190:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Core Register type definitions.
 191:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 192:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 193:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 194:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 195:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 196:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 197:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 198:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 199:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   struct
 200:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 201:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 202:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 203:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 204:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 205:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 206:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 207:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 208:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** } APSR_Type;
 209:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 210:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* APSR Register Definitions */
 211:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 212:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 213:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 214:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 215:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 216:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 217:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 218:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 219:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 220:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 221:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 222:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 223:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 224:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 225:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 226:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 227:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 228:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 229:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   struct
 230:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 231:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 232:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 233:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 234:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 235:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** } IPSR_Type;
 236:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 237:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* IPSR Register Definitions */
 238:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 239:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 240:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 241:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 242:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 243:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 244:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 245:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 246:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 247:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   struct
 248:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 249:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 250:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 251:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 252:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 253:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 254:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 255:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 256:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 257:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 258:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 259:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** } xPSR_Type;
 260:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 261:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* xPSR Register Definitions */
 262:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 263:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 264:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 265:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 266:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 267:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 268:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 269:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 270:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 271:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 272:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 273:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 274:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 275:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 276:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 277:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 278:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 279:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 280:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 281:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 282:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 283:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 284:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 285:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 286:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   struct
 287:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 288:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 289:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 290:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 291:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 292:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 293:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 294:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 295:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* CONTROL Register Definitions */
 296:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 297:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 298:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 299:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 300:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 301:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 302:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 303:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 304:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 305:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 306:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 307:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 308:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 309:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 310:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 311:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 312:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 313:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 314:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 315:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0[31U];
 316:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 317:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RSERVED1[31U];
 318:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 319:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED2[31U];
 320:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 321:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED3[31U];
 322:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED4[64U];
 323:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 324:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 325:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 326:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 327:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 328:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 329:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 330:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 331:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 332:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 333:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 334:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 335:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 336:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 337:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 338:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 339:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 340:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 341:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 342:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 343:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0;
 344:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 345:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 346:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 347:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1;
 348:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 349:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 350:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** } SCB_Type;
 351:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 352:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 353:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 354:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 355:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 356:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 357:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 358:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 359:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 360:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 361:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 362:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 363:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 364:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 365:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 366:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 367:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 368:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 369:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 370:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 371:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 372:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 373:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 374:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 375:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 376:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 377:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 378:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 379:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 380:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 381:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 382:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 383:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 384:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 385:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 386:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 387:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 388:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 389:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 390:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 391:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 392:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 393:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 394:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 395:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 396:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 397:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 398:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 399:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 400:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 401:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 402:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 403:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 404:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 405:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 406:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 407:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 408:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 409:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 410:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 411:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 412:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 413:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 414:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 415:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 416:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 417:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 418:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 419:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 420:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 421:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 422:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 423:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 424:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 425:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 426:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 427:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 428:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 429:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 430:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 431:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 432:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 433:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 434:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 435:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 436:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 437:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 438:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 439:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 440:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 441:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 442:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 443:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 444:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 445:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 446:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 447:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 448:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 449:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 450:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 451:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 452:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** } SysTick_Type;
 453:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 454:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 455:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 456:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 457:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 458:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 459:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 460:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 461:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 462:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 463:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 464:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 465:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 466:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 467:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 468:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 469:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 470:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 471:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 472:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 473:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 474:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 475:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 476:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 477:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 478:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 479:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 480:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 481:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 482:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 483:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 484:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 485:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 486:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 487:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 488:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 489:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 490:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 491:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 492:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 493:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 494:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 495:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 496:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 497:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 498:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 499:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 500:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 501:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 502:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 503:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 504:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 505:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 506:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 507:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 508:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 509:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted value.
 510:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** */
 511:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 512:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 513:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 514:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 515:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 516:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 517:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted bit field value.
 518:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** */
 519:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 520:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 521:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 522:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 523:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 524:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 525:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 526:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 527:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 528:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 529:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 530:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 531:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* Memory mapping of Core Hardware */
 532:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 533:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 534:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 535:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 536:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 537:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 538:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 539:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 540:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 541:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 542:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} */
 543:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 544:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 545:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 546:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 547:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 548:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 549:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 550:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 551:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 552:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 553:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 554:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 555:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** */
 556:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 557:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 558:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 559:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 560:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 561:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 562:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 563:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 564:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 565:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 566:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 567:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifndef CMSIS_NVIC_VIRTUAL
 568:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0 */
 569:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0 */
 570:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 571:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 572:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 573:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 574:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 575:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 576:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 577:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 578:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 579:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 580:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 581:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #ifndef CMSIS_VECTAB_VIRTUAL
 582:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 583:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 584:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 585:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 586:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 587:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 588:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 589:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 590:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 591:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 592:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 593:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 594:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 595:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 596:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 597:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Enable Interrupt
 598:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 599:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 600:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 601:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 602:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 603:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 604:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 605:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 606:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 607:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 608:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 609:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 610:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 611:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 612:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Enable status
 613:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 614:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 615:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt is not enabled.
 616:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt is enabled.
 617:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 618:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 619:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 620:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 621:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 622:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 623:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 624:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 625:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   else
 626:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 627:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 628:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 629:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 630:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 631:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 632:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 633:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Disable Interrupt
 634:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 635:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 637:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 638:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 639:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 640:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 641:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 642:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     __DSB();
 644:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     __ISB();
 645:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 646:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 647:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 648:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 649:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 650:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Pending Interrupt
 651:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 652:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 653:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt status is not pending.
 654:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt status is pending.
 655:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 656:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 657:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 658:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 659:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 660:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 661:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 662:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 663:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   else
 664:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 665:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 666:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 667:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 668:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 669:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 670:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 671:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Pending Interrupt
 672:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 673:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 675:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 676:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 677:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 678:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 679:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 680:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 681:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 682:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 683:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 684:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 685:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 686:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Clear Pending Interrupt
 687:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 688:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 689:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 690:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 691:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 692:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 693:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 694:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 695:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 696:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 697:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 698:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 699:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 700:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 701:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Priority
 702:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 703:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 704:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 705:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 706:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]  priority  Priority to set.
 707:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 708:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 709:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 710:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
  25              	 .loc 1 710 0
  26              	 .cfi_startproc
  27 0000 B0B5     	 push {r4,r5,r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 16
  30              	 .cfi_offset 4,-16
  31              	 .cfi_offset 5,-12
  32              	 .cfi_offset 7,-8
  33              	 .cfi_offset 14,-4
  34 0002 82B0     	 sub sp,sp,#8
  35              	.LCFI1:
  36              	 .cfi_def_cfa_offset 24
  37 0004 00AF     	 add r7,sp,#0
  38              	.LCFI2:
  39              	 .cfi_def_cfa_register 7
  40 0006 021C     	 mov r2,r0
  41 0008 3960     	 str r1,[r7]
  42 000a FB1D     	 add r3,r7,#7
  43 000c 1A70     	 strb r2,[r3]
 711:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  44              	 .loc 1 711 0
  45 000e FB1D     	 add r3,r7,#7
  46 0010 1B78     	 ldrb r3,[r3]
  47 0012 7F2B     	 cmp r3,#127
  48 0014 27D8     	 bhi .L2
 712:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 713:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  49              	 .loc 1 713 0
  50 0016 2D4C     	 ldr r4,.L4
  51 0018 FB1D     	 add r3,r7,#7
  52 001a 1B78     	 ldrb r3,[r3]
  53 001c 5BB2     	 sxtb r3,r3
  54 001e 9B08     	 lsr r3,r3,#2
  55 0020 2A49     	 ldr r1,.L4
  56 0022 FA1D     	 add r2,r7,#7
  57 0024 1278     	 ldrb r2,[r2]
  58 0026 52B2     	 sxtb r2,r2
  59 0028 9208     	 lsr r2,r2,#2
  60 002a C032     	 add r2,r2,#192
  61 002c 9200     	 lsl r2,r2,#2
  62 002e 5258     	 ldr r2,[r2,r1]
  63 0030 F91D     	 add r1,r7,#7
  64 0032 0978     	 ldrb r1,[r1]
  65 0034 081C     	 mov r0,r1
  66 0036 0321     	 mov r1,#3
  67 0038 0140     	 and r1,r0
  68 003a C900     	 lsl r1,r1,#3
  69 003c 081C     	 mov r0,r1
  70 003e FF21     	 mov r1,#255
  71 0040 8140     	 lsl r1,r1,r0
  72 0042 C943     	 mvn r1,r1
  73 0044 1140     	 and r1,r2
 714:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  74              	 .loc 1 714 0
  75 0046 3A68     	 ldr r2,[r7]
  76 0048 9201     	 lsl r2,r2,#6
  77 004a FF20     	 mov r0,#255
  78 004c 0240     	 and r2,r0
  79 004e F81D     	 add r0,r7,#7
  80 0050 0078     	 ldrb r0,[r0]
  81 0052 051C     	 mov r5,r0
  82 0054 0320     	 mov r0,#3
  83 0056 2840     	 and r0,r5
  84 0058 C000     	 lsl r0,r0,#3
  85 005a 8240     	 lsl r2,r2,r0
 713:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  86              	 .loc 1 713 0
  87 005c 0A43     	 orr r2,r1
  88 005e C033     	 add r3,r3,#192
  89 0060 9B00     	 lsl r3,r3,#2
  90 0062 1A51     	 str r2,[r3,r4]
  91 0064 2EE0     	 b .L1
  92              	.L2:
 715:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 716:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   else
 717:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 718:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
  93              	 .loc 1 718 0
  94 0066 1A4C     	 ldr r4,.L4+4
  95 0068 FB1D     	 add r3,r7,#7
  96 006a 1B78     	 ldrb r3,[r3]
  97 006c 1A1C     	 mov r2,r3
  98 006e 0F23     	 mov r3,#15
  99 0070 1340     	 and r3,r2
 100 0072 083B     	 sub r3,r3,#8
 101 0074 9908     	 lsr r1,r3,#2
 102 0076 164A     	 ldr r2,.L4+4
 103 0078 FB1D     	 add r3,r7,#7
 104 007a 1B78     	 ldrb r3,[r3]
 105 007c 181C     	 mov r0,r3
 106 007e 0F23     	 mov r3,#15
 107 0080 0340     	 and r3,r0
 108 0082 083B     	 sub r3,r3,#8
 109 0084 9B08     	 lsr r3,r3,#2
 110 0086 0633     	 add r3,r3,#6
 111 0088 9B00     	 lsl r3,r3,#2
 112 008a D318     	 add r3,r2,r3
 113 008c 5B68     	 ldr r3,[r3,#4]
 114 008e FA1D     	 add r2,r7,#7
 115 0090 1278     	 ldrb r2,[r2]
 116 0092 101C     	 mov r0,r2
 117 0094 0322     	 mov r2,#3
 118 0096 0240     	 and r2,r0
 119 0098 D200     	 lsl r2,r2,#3
 120 009a 101C     	 mov r0,r2
 121 009c FF22     	 mov r2,#255
 122 009e 8240     	 lsl r2,r2,r0
 123 00a0 D243     	 mvn r2,r2
 124 00a2 1A40     	 and r2,r3
 719:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 125              	 .loc 1 719 0
 126 00a4 3B68     	 ldr r3,[r7]
 127 00a6 9B01     	 lsl r3,r3,#6
 128 00a8 FF20     	 mov r0,#255
 129 00aa 0340     	 and r3,r0
 130 00ac F81D     	 add r0,r7,#7
 131 00ae 0078     	 ldrb r0,[r0]
 132 00b0 051C     	 mov r5,r0
 133 00b2 0320     	 mov r0,#3
 134 00b4 2840     	 and r0,r5
 135 00b6 C000     	 lsl r0,r0,#3
 136 00b8 8340     	 lsl r3,r3,r0
 718:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 137              	 .loc 1 718 0
 138 00ba 1A43     	 orr r2,r3
 139 00bc 8B1D     	 add r3,r1,#6
 140 00be 9B00     	 lsl r3,r3,#2
 141 00c0 E318     	 add r3,r4,r3
 142 00c2 5A60     	 str r2,[r3,#4]
 143              	.L1:
 720:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 721:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 144              	 .loc 1 721 0
 145 00c4 BD46     	 mov sp,r7
 146 00c6 02B0     	 add sp,sp,#8
 147              	 
 148 00c8 B0BD     	 pop {r4,r5,r7,pc}
 149              	.L5:
 150 00ca C046     	 .align 2
 151              	.L4:
 152 00cc 00E100E0 	 .word -536813312
 153 00d0 00ED00E0 	 .word -536810240
 154              	 .cfi_endproc
 155              	.LFE27:
 157              	 .section .text.SysTick_Config,"ax",%progbits
 158              	 .align 2
 159              	 .code 16
 160              	 .thumb_func
 162              	SysTick_Config:
 163              	.LFB33:
 722:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 723:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 724:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 725:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Priority
 726:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 727:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 728:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 729:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 730:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return             Interrupt Priority.
 731:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 732:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 733:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 734:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 735:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 736:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 737:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 738:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 739:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 740:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   else
 741:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 742:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 743:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 744:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 745:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 746:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 747:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 748:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Vector
 749:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 750:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 751:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 752:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            Address 0 must be mapped to SRAM.
 753:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   IRQn      Interrupt number
 754:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   vector    Address of interrupt handler function
 755:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 756:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 757:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 758:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 759:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 760:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 761:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 762:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 763:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 764:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Vector
 765:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads an interrupt vector from interrupt vector table.
 766:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 767:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 768:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]   IRQn      Interrupt number.
 769:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return                 Address of interrupt handler function
 770:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 771:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 772:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 773:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 774:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 775:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 776:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 777:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 778:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 779:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   System Reset
 780:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 781:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 782:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 783:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 784:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 785:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****                                                                        buffered write are completed
 786:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 787:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 788:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 789:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 790:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   for(;;)                                                           /* wait until reset */
 791:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 792:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     __NOP();
 793:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 794:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 795:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 796:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 797:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 798:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 799:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################  FPU functions  #################################### */
 800:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 801:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 802:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
 803:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Function that provides FPU type.
 804:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 805:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 806:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 807:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 808:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   get FPU type
 809:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details returns the FPU type
 810:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \returns
 811:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****    - \b  0: No FPU
 812:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****    - \b  1: Single precision FPU
 813:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****    - \b  2: Double + Single precision FPU
 814:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 815:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
 816:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 817:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return 0U;           /* No FPU */
 818:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 819:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 820:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 821:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of CMSIS_Core_FpuFunctions */
 822:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 823:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 824:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 825:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /* ##################################    SysTick function  ########################################
 826:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 827:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 828:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
 829:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that configure the System.
 830:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   @{
 831:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 832:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 833:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
 834:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 835:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** /**
 836:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \brief   System Tick Configuration
 837:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 838:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            Counter is in free running mode to generate periodic interrupts.
 839:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]  ticks  Number of ticks between two interrupts.
 840:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return          0  Function succeeded.
 841:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \return          1  Function failed.
 842:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 843:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
 844:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****            must contain a vendor-specific implementation of this function.
 845:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****  */
 846:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 847:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** {
 164              	 .loc 1 847 0
 165              	 .cfi_startproc
 166 0000 80B5     	 push {r7,lr}
 167              	.LCFI3:
 168              	 .cfi_def_cfa_offset 8
 169              	 .cfi_offset 7,-8
 170              	 .cfi_offset 14,-4
 171 0002 82B0     	 sub sp,sp,#8
 172              	.LCFI4:
 173              	 .cfi_def_cfa_offset 16
 174 0004 00AF     	 add r7,sp,#0
 175              	.LCFI5:
 176              	 .cfi_def_cfa_register 7
 177 0006 7860     	 str r0,[r7,#4]
 848:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 178              	 .loc 1 848 0
 179 0008 7B68     	 ldr r3,[r7,#4]
 180 000a 013B     	 sub r3,r3,#1
 181 000c 0C4A     	 ldr r2,.L9
 182 000e 9342     	 cmp r3,r2
 183 0010 01D9     	 bls .L7
 849:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   {
 850:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****     return (1UL);                                                   /* Reload value impossible */
 184              	 .loc 1 850 0
 185 0012 0123     	 mov r3,#1
 186 0014 10E0     	 b .L8
 187              	.L7:
 851:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   }
 852:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** 
 853:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 188              	 .loc 1 853 0
 189 0016 0B4B     	 ldr r3,.L9+4
 190 0018 7A68     	 ldr r2,[r7,#4]
 191 001a 013A     	 sub r2,r2,#1
 192 001c 5A60     	 str r2,[r3,#4]
 854:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 193              	 .loc 1 854 0
 194 001e 0123     	 mov r3,#1
 195 0020 5B42     	 neg r3,r3
 196 0022 181C     	 mov r0,r3
 197 0024 0321     	 mov r1,#3
 198 0026 FFF7FEFF 	 bl __NVIC_SetPriority
 855:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 199              	 .loc 1 855 0
 200 002a 064B     	 ldr r3,.L9+4
 201 002c 0022     	 mov r2,#0
 202 002e 9A60     	 str r2,[r3,#8]
 856:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 203              	 .loc 1 856 0
 204 0030 044B     	 ldr r3,.L9+4
 205 0032 0722     	 mov r2,#7
 206 0034 1A60     	 str r2,[r3]
 857:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   |
 858:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
 859:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h ****   return (0UL);                                                     /* Function successful */
 207              	 .loc 1 859 0
 208 0036 0023     	 mov r3,#0
 209              	.L8:
 860:D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Include\core_cm0.h **** }
 210              	 .loc 1 860 0
 211 0038 181C     	 mov r0,r3
 212 003a BD46     	 mov sp,r7
 213 003c 02B0     	 add sp,sp,#8
 214              	 
 215 003e 80BD     	 pop {r7,pc}
 216              	.L10:
 217              	 .align 2
 218              	.L9:
 219 0040 FFFFFF00 	 .word 16777215
 220 0044 10E000E0 	 .word -536813552
 221              	 .cfi_endproc
 222              	.LFE33:
 224              	 .section .text.P0_1_set_mode,"ax",%progbits
 225              	 .align 2
 226              	 .code 16
 227              	 .thumb_func
 229              	P0_1_set_mode:
 230              	.LFB44:
 231              	 .file 2 "../GPIO.h"
   1:../GPIO.h     **** #ifndef __GPIO_H__
   2:../GPIO.h     **** #define __GPIO_H__
   3:../GPIO.h     **** 
   4:../GPIO.h     **** /* Generated for XMC1100_TSSOP38 */
   5:../GPIO.h     **** 
   6:../GPIO.h     **** #include <XMC1100.h>
   7:../GPIO.h     **** 
   8:../GPIO.h     **** #define INPUT           0x00U
   9:../GPIO.h     **** #define INPUT_PD        0x08U
  10:../GPIO.h     **** #define INPUT_PU        0x10U
  11:../GPIO.h     **** #define INPUT_PPS       0x18U
  12:../GPIO.h     **** #define INPUT_INV       0x20U
  13:../GPIO.h     **** #define INPUT_INV_PD    0x28U
  14:../GPIO.h     **** #define INPUT_INV_PU    0x30U
  15:../GPIO.h     **** #define INPUT_INV_PPS   0x38U
  16:../GPIO.h     **** #define OUTPUT_PP_GP    0x80U
  17:../GPIO.h     **** #define OUTPUT_PP_AF1   0x88U
  18:../GPIO.h     **** #define OUTPUT_PP_AF2   0x90U
  19:../GPIO.h     **** #define OUTPUT_PP_AF3   0x98U
  20:../GPIO.h     **** #define OUTPUT_PP_AF4   0xA0U
  21:../GPIO.h     **** #define OUTPUT_PP_AF5   0xA8U
  22:../GPIO.h     **** #define OUTPUT_PP_AF6   0xB0U
  23:../GPIO.h     **** #define OUTPUT_PP_AF7   0xB8U
  24:../GPIO.h     **** #define OUTPUT_OD_GP    0xC0U
  25:../GPIO.h     **** #define OUTPUT_OD_AF1   0xC8U
  26:../GPIO.h     **** #define OUTPUT_OD_AF2   0xD0U
  27:../GPIO.h     **** #define OUTPUT_OD_AF3   0xD8U
  28:../GPIO.h     **** #define OUTPUT_OD_AF4   0XE0U
  29:../GPIO.h     **** #define OUTPUT_OD_AF5   0xE8U
  30:../GPIO.h     **** #define OUTPUT_OD_AF6   0xF0U
  31:../GPIO.h     **** #define OUTPUT_OD_AF7   0XF8U
  32:../GPIO.h     **** 
  33:../GPIO.h     **** #define SOFTWARE        0x0UL
  34:../GPIO.h     **** #define HW0             0x1UL
  35:../GPIO.h     **** #define HW1             0x2UL
  36:../GPIO.h     **** 
  37:../GPIO.h     **** __STATIC_INLINE void P0_0_set_mode(uint8_t mode){
  38:../GPIO.h     ****     PORT0->IOCR0 &= ~0x000000f8UL;
  39:../GPIO.h     ****     PORT0->IOCR0 |= mode << 0;
  40:../GPIO.h     **** }
  41:../GPIO.h     **** 
  42:../GPIO.h     **** __STATIC_INLINE void P0_0_set_hwsel(uint32_t config){
  43:../GPIO.h     ****     PORT0->HWSEL &= ~0x00000003UL;
  44:../GPIO.h     ****     PORT0->HWSEL |= config << 0;
  45:../GPIO.h     **** }
  46:../GPIO.h     **** 
  47:../GPIO.h     **** __STATIC_INLINE void P0_0_set_standard_hysteresis(){
  48:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00000004UL;
  49:../GPIO.h     **** }
  50:../GPIO.h     **** 
  51:../GPIO.h     **** __STATIC_INLINE void P0_0_set_large_hysteresis(){
  52:../GPIO.h     ****     PORT0->PHCR0 |= 0x00000004UL;
  53:../GPIO.h     **** }
  54:../GPIO.h     **** 
  55:../GPIO.h     **** __STATIC_INLINE void P0_0_set(void){
  56:../GPIO.h     ****     PORT0->OMR = 0x00000001UL;
  57:../GPIO.h     **** }
  58:../GPIO.h     **** 
  59:../GPIO.h     **** __STATIC_INLINE void P0_0_reset(void){
  60:../GPIO.h     ****     PORT0->OMR = 0x00010000UL;
  61:../GPIO.h     **** }
  62:../GPIO.h     **** 
  63:../GPIO.h     **** __STATIC_INLINE void P0_0_toggle(void){
  64:../GPIO.h     ****     PORT0->OMR = 0x00010001UL;
  65:../GPIO.h     **** }
  66:../GPIO.h     **** 
  67:../GPIO.h     **** __STATIC_INLINE uint32_t P0_0_read(void){
  68:../GPIO.h     ****     return(PORT0->IN & 0x00000001UL);
  69:../GPIO.h     **** }
  70:../GPIO.h     **** 
  71:../GPIO.h     **** __STATIC_INLINE void P0_0_enable_pps(void){
  72:../GPIO.h     ****     PORT0->PPS |= 0x00000001UL;
  73:../GPIO.h     **** }
  74:../GPIO.h     **** 
  75:../GPIO.h     **** __STATIC_INLINE void P0_0_disable_pps(void){
  76:../GPIO.h     ****     PORT0->PPS &= ~0x00000001UL;
  77:../GPIO.h     **** }
  78:../GPIO.h     **** 
  79:../GPIO.h     **** __STATIC_INLINE void P0_1_set_mode(uint8_t mode){
 232              	 .loc 2 79 0
 233              	 .cfi_startproc
 234 0000 80B5     	 push {r7,lr}
 235              	.LCFI6:
 236              	 .cfi_def_cfa_offset 8
 237              	 .cfi_offset 7,-8
 238              	 .cfi_offset 14,-4
 239 0002 82B0     	 sub sp,sp,#8
 240              	.LCFI7:
 241              	 .cfi_def_cfa_offset 16
 242 0004 00AF     	 add r7,sp,#0
 243              	.LCFI8:
 244              	 .cfi_def_cfa_register 7
 245 0006 021C     	 mov r2,r0
 246 0008 FB1D     	 add r3,r7,#7
 247 000a 1A70     	 strb r2,[r3]
  80:../GPIO.h     ****     PORT0->IOCR0 &= ~0x0000f800UL;
 248              	 .loc 2 80 0
 249 000c 084B     	 ldr r3,.L12
 250 000e 084A     	 ldr r2,.L12
 251 0010 1269     	 ldr r2,[r2,#16]
 252 0012 0849     	 ldr r1,.L12+4
 253 0014 0A40     	 and r2,r1
 254 0016 1A61     	 str r2,[r3,#16]
  81:../GPIO.h     ****     PORT0->IOCR0 |= mode << 8;
 255              	 .loc 2 81 0
 256 0018 054B     	 ldr r3,.L12
 257 001a 054A     	 ldr r2,.L12
 258 001c 1269     	 ldr r2,[r2,#16]
 259 001e F91D     	 add r1,r7,#7
 260 0020 0978     	 ldrb r1,[r1]
 261 0022 0902     	 lsl r1,r1,#8
 262 0024 0A43     	 orr r2,r1
 263 0026 1A61     	 str r2,[r3,#16]
  82:../GPIO.h     **** }
 264              	 .loc 2 82 0
 265 0028 BD46     	 mov sp,r7
 266 002a 02B0     	 add sp,sp,#8
 267              	 
 268 002c 80BD     	 pop {r7,pc}
 269              	.L13:
 270 002e C046     	 .align 2
 271              	.L12:
 272 0030 00000440 	 .word 1074003968
 273 0034 FF07FFFF 	 .word -63489
 274              	 .cfi_endproc
 275              	.LFE44:
 277              	 .section .text.P0_2_set_mode,"ax",%progbits
 278              	 .align 2
 279              	 .code 16
 280              	 .thumb_func
 282              	P0_2_set_mode:
 283              	.LFB54:
  83:../GPIO.h     **** 
  84:../GPIO.h     **** __STATIC_INLINE void P0_1_set_hwsel(uint32_t config){
  85:../GPIO.h     ****     PORT0->HWSEL &= ~0x0000000cUL;
  86:../GPIO.h     ****     PORT0->HWSEL |= config << 2;
  87:../GPIO.h     **** }
  88:../GPIO.h     **** 
  89:../GPIO.h     **** __STATIC_INLINE void P0_1_set_standard_hysteresis(){
  90:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00000040UL;
  91:../GPIO.h     **** }
  92:../GPIO.h     **** 
  93:../GPIO.h     **** __STATIC_INLINE void P0_1_set_large_hysteresis(){
  94:../GPIO.h     ****     PORT0->PHCR0 |= 0x00000040UL;
  95:../GPIO.h     **** }
  96:../GPIO.h     **** 
  97:../GPIO.h     **** __STATIC_INLINE void P0_1_set(void){
  98:../GPIO.h     ****     PORT0->OMR = 0x00000002UL;
  99:../GPIO.h     **** }
 100:../GPIO.h     **** 
 101:../GPIO.h     **** __STATIC_INLINE void P0_1_reset(void){
 102:../GPIO.h     ****     PORT0->OMR = 0x00020000UL;
 103:../GPIO.h     **** }
 104:../GPIO.h     **** 
 105:../GPIO.h     **** __STATIC_INLINE void P0_1_toggle(void){
 106:../GPIO.h     ****     PORT0->OMR = 0x00020002UL;
 107:../GPIO.h     **** }
 108:../GPIO.h     **** 
 109:../GPIO.h     **** __STATIC_INLINE uint32_t P0_1_read(void){
 110:../GPIO.h     ****     return(PORT0->IN & 0x00000002UL);
 111:../GPIO.h     **** }
 112:../GPIO.h     **** 
 113:../GPIO.h     **** __STATIC_INLINE void P0_1_enable_pps(void){
 114:../GPIO.h     ****     PORT0->PPS |= 0x00000002UL;
 115:../GPIO.h     **** }
 116:../GPIO.h     **** 
 117:../GPIO.h     **** __STATIC_INLINE void P0_1_disable_pps(void){
 118:../GPIO.h     ****     PORT0->PPS &= ~0x00000002UL;
 119:../GPIO.h     **** }
 120:../GPIO.h     **** 
 121:../GPIO.h     **** __STATIC_INLINE void P0_2_set_mode(uint8_t mode){
 284              	 .loc 2 121 0
 285              	 .cfi_startproc
 286 0000 80B5     	 push {r7,lr}
 287              	.LCFI9:
 288              	 .cfi_def_cfa_offset 8
 289              	 .cfi_offset 7,-8
 290              	 .cfi_offset 14,-4
 291 0002 82B0     	 sub sp,sp,#8
 292              	.LCFI10:
 293              	 .cfi_def_cfa_offset 16
 294 0004 00AF     	 add r7,sp,#0
 295              	.LCFI11:
 296              	 .cfi_def_cfa_register 7
 297 0006 021C     	 mov r2,r0
 298 0008 FB1D     	 add r3,r7,#7
 299 000a 1A70     	 strb r2,[r3]
 122:../GPIO.h     ****     PORT0->IOCR0 &= ~0x00f80000UL;
 300              	 .loc 2 122 0
 301 000c 084B     	 ldr r3,.L15
 302 000e 084A     	 ldr r2,.L15
 303 0010 1269     	 ldr r2,[r2,#16]
 304 0012 0849     	 ldr r1,.L15+4
 305 0014 0A40     	 and r2,r1
 306 0016 1A61     	 str r2,[r3,#16]
 123:../GPIO.h     ****     PORT0->IOCR0 |= mode << 16;
 307              	 .loc 2 123 0
 308 0018 054B     	 ldr r3,.L15
 309 001a 054A     	 ldr r2,.L15
 310 001c 1269     	 ldr r2,[r2,#16]
 311 001e F91D     	 add r1,r7,#7
 312 0020 0978     	 ldrb r1,[r1]
 313 0022 0904     	 lsl r1,r1,#16
 314 0024 0A43     	 orr r2,r1
 315 0026 1A61     	 str r2,[r3,#16]
 124:../GPIO.h     **** }
 316              	 .loc 2 124 0
 317 0028 BD46     	 mov sp,r7
 318 002a 02B0     	 add sp,sp,#8
 319              	 
 320 002c 80BD     	 pop {r7,pc}
 321              	.L16:
 322 002e C046     	 .align 2
 323              	.L15:
 324 0030 00000440 	 .word 1074003968
 325 0034 FFFF07FF 	 .word -16252929
 326              	 .cfi_endproc
 327              	.LFE54:
 329              	 .section .text.P0_3_set_mode,"ax",%progbits
 330              	 .align 2
 331              	 .code 16
 332              	 .thumb_func
 334              	P0_3_set_mode:
 335              	.LFB64:
 125:../GPIO.h     **** 
 126:../GPIO.h     **** __STATIC_INLINE void P0_2_set_hwsel(uint32_t config){
 127:../GPIO.h     ****     PORT0->HWSEL &= ~0x00000030UL;
 128:../GPIO.h     ****     PORT0->HWSEL |= config << 4;
 129:../GPIO.h     **** }
 130:../GPIO.h     **** 
 131:../GPIO.h     **** __STATIC_INLINE void P0_2_set_standard_hysteresis(){
 132:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00000400UL;
 133:../GPIO.h     **** }
 134:../GPIO.h     **** 
 135:../GPIO.h     **** __STATIC_INLINE void P0_2_set_large_hysteresis(){
 136:../GPIO.h     ****     PORT0->PHCR0 |= 0x00000400UL;
 137:../GPIO.h     **** }
 138:../GPIO.h     **** 
 139:../GPIO.h     **** __STATIC_INLINE void P0_2_set(void){
 140:../GPIO.h     ****     PORT0->OMR = 0x00000004UL;
 141:../GPIO.h     **** }
 142:../GPIO.h     **** 
 143:../GPIO.h     **** __STATIC_INLINE void P0_2_reset(void){
 144:../GPIO.h     ****     PORT0->OMR = 0x00040000UL;
 145:../GPIO.h     **** }
 146:../GPIO.h     **** 
 147:../GPIO.h     **** __STATIC_INLINE void P0_2_toggle(void){
 148:../GPIO.h     ****     PORT0->OMR = 0x00040004UL;
 149:../GPIO.h     **** }
 150:../GPIO.h     **** 
 151:../GPIO.h     **** __STATIC_INLINE uint32_t P0_2_read(void){
 152:../GPIO.h     ****     return(PORT0->IN & 0x00000004UL);
 153:../GPIO.h     **** }
 154:../GPIO.h     **** 
 155:../GPIO.h     **** __STATIC_INLINE void P0_2_enable_pps(void){
 156:../GPIO.h     ****     PORT0->PPS |= 0x00000004UL;
 157:../GPIO.h     **** }
 158:../GPIO.h     **** 
 159:../GPIO.h     **** __STATIC_INLINE void P0_2_disable_pps(void){
 160:../GPIO.h     ****     PORT0->PPS &= ~0x00000004UL;
 161:../GPIO.h     **** }
 162:../GPIO.h     **** 
 163:../GPIO.h     **** __STATIC_INLINE void P0_3_set_mode(uint8_t mode){
 336              	 .loc 2 163 0
 337              	 .cfi_startproc
 338 0000 80B5     	 push {r7,lr}
 339              	.LCFI12:
 340              	 .cfi_def_cfa_offset 8
 341              	 .cfi_offset 7,-8
 342              	 .cfi_offset 14,-4
 343 0002 82B0     	 sub sp,sp,#8
 344              	.LCFI13:
 345              	 .cfi_def_cfa_offset 16
 346 0004 00AF     	 add r7,sp,#0
 347              	.LCFI14:
 348              	 .cfi_def_cfa_register 7
 349 0006 021C     	 mov r2,r0
 350 0008 FB1D     	 add r3,r7,#7
 351 000a 1A70     	 strb r2,[r3]
 164:../GPIO.h     ****     PORT0->IOCR0 &= ~0xf8000000UL;
 352              	 .loc 2 164 0
 353 000c 084B     	 ldr r3,.L18
 354 000e 084A     	 ldr r2,.L18
 355 0010 1269     	 ldr r2,[r2,#16]
 356 0012 5201     	 lsl r2,r2,#5
 357 0014 5209     	 lsr r2,r2,#5
 358 0016 1A61     	 str r2,[r3,#16]
 165:../GPIO.h     ****     PORT0->IOCR0 |= mode << 24;
 359              	 .loc 2 165 0
 360 0018 054B     	 ldr r3,.L18
 361 001a 054A     	 ldr r2,.L18
 362 001c 1269     	 ldr r2,[r2,#16]
 363 001e F91D     	 add r1,r7,#7
 364 0020 0978     	 ldrb r1,[r1]
 365 0022 0906     	 lsl r1,r1,#24
 366 0024 0A43     	 orr r2,r1
 367 0026 1A61     	 str r2,[r3,#16]
 166:../GPIO.h     **** }
 368              	 .loc 2 166 0
 369 0028 BD46     	 mov sp,r7
 370 002a 02B0     	 add sp,sp,#8
 371              	 
 372 002c 80BD     	 pop {r7,pc}
 373              	.L19:
 374 002e C046     	 .align 2
 375              	.L18:
 376 0030 00000440 	 .word 1074003968
 377              	 .cfi_endproc
 378              	.LFE64:
 380              	 .section .text.P0_3_reset,"ax",%progbits
 381              	 .align 2
 382              	 .code 16
 383              	 .thumb_func
 385              	P0_3_reset:
 386              	.LFB69:
 167:../GPIO.h     **** 
 168:../GPIO.h     **** __STATIC_INLINE void P0_3_set_hwsel(uint32_t config){
 169:../GPIO.h     ****     PORT0->HWSEL &= ~0x000000c0UL;
 170:../GPIO.h     ****     PORT0->HWSEL |= config << 6;
 171:../GPIO.h     **** }
 172:../GPIO.h     **** 
 173:../GPIO.h     **** __STATIC_INLINE void P0_3_set_standard_hysteresis(){
 174:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00004000UL;
 175:../GPIO.h     **** }
 176:../GPIO.h     **** 
 177:../GPIO.h     **** __STATIC_INLINE void P0_3_set_large_hysteresis(){
 178:../GPIO.h     ****     PORT0->PHCR0 |= 0x00004000UL;
 179:../GPIO.h     **** }
 180:../GPIO.h     **** 
 181:../GPIO.h     **** __STATIC_INLINE void P0_3_set(void){
 182:../GPIO.h     ****     PORT0->OMR = 0x00000008UL;
 183:../GPIO.h     **** }
 184:../GPIO.h     **** 
 185:../GPIO.h     **** __STATIC_INLINE void P0_3_reset(void){
 387              	 .loc 2 185 0
 388              	 .cfi_startproc
 389 0000 80B5     	 push {r7,lr}
 390              	.LCFI15:
 391              	 .cfi_def_cfa_offset 8
 392              	 .cfi_offset 7,-8
 393              	 .cfi_offset 14,-4
 394 0002 00AF     	 add r7,sp,#0
 395              	.LCFI16:
 396              	 .cfi_def_cfa_register 7
 186:../GPIO.h     ****     PORT0->OMR = 0x00080000UL;
 397              	 .loc 2 186 0
 398 0004 024B     	 ldr r3,.L21
 399 0006 8022     	 mov r2,#128
 400 0008 1203     	 lsl r2,r2,#12
 401 000a 5A60     	 str r2,[r3,#4]
 187:../GPIO.h     **** }
 402              	 .loc 2 187 0
 403 000c BD46     	 mov sp,r7
 404              	 
 405 000e 80BD     	 pop {r7,pc}
 406              	.L22:
 407              	 .align 2
 408              	.L21:
 409 0010 00000440 	 .word 1074003968
 410              	 .cfi_endproc
 411              	.LFE69:
 413              	 .section .text.P0_4_set_mode,"ax",%progbits
 414              	 .align 2
 415              	 .code 16
 416              	 .thumb_func
 418              	P0_4_set_mode:
 419              	.LFB74:
 188:../GPIO.h     **** 
 189:../GPIO.h     **** __STATIC_INLINE void P0_3_toggle(void){
 190:../GPIO.h     ****     PORT0->OMR = 0x00080008UL;
 191:../GPIO.h     **** }
 192:../GPIO.h     **** 
 193:../GPIO.h     **** __STATIC_INLINE uint32_t P0_3_read(void){
 194:../GPIO.h     ****     return(PORT0->IN & 0x00000008UL);
 195:../GPIO.h     **** }
 196:../GPIO.h     **** 
 197:../GPIO.h     **** __STATIC_INLINE void P0_3_enable_pps(void){
 198:../GPIO.h     ****     PORT0->PPS |= 0x00000008UL;
 199:../GPIO.h     **** }
 200:../GPIO.h     **** 
 201:../GPIO.h     **** __STATIC_INLINE void P0_3_disable_pps(void){
 202:../GPIO.h     ****     PORT0->PPS &= ~0x00000008UL;
 203:../GPIO.h     **** }
 204:../GPIO.h     **** 
 205:../GPIO.h     **** __STATIC_INLINE void P0_4_set_mode(uint8_t mode){
 420              	 .loc 2 205 0
 421              	 .cfi_startproc
 422 0000 80B5     	 push {r7,lr}
 423              	.LCFI17:
 424              	 .cfi_def_cfa_offset 8
 425              	 .cfi_offset 7,-8
 426              	 .cfi_offset 14,-4
 427 0002 82B0     	 sub sp,sp,#8
 428              	.LCFI18:
 429              	 .cfi_def_cfa_offset 16
 430 0004 00AF     	 add r7,sp,#0
 431              	.LCFI19:
 432              	 .cfi_def_cfa_register 7
 433 0006 021C     	 mov r2,r0
 434 0008 FB1D     	 add r3,r7,#7
 435 000a 1A70     	 strb r2,[r3]
 206:../GPIO.h     ****     PORT0->IOCR4 &= ~0x000000f8UL;
 436              	 .loc 2 206 0
 437 000c 074B     	 ldr r3,.L24
 438 000e 074A     	 ldr r2,.L24
 439 0010 5269     	 ldr r2,[r2,#20]
 440 0012 F821     	 mov r1,#248
 441 0014 8A43     	 bic r2,r1
 442 0016 5A61     	 str r2,[r3,#20]
 207:../GPIO.h     ****     PORT0->IOCR4 |= mode << 0;
 443              	 .loc 2 207 0
 444 0018 044B     	 ldr r3,.L24
 445 001a 044A     	 ldr r2,.L24
 446 001c 5169     	 ldr r1,[r2,#20]
 447 001e FA1D     	 add r2,r7,#7
 448 0020 1278     	 ldrb r2,[r2]
 449 0022 0A43     	 orr r2,r1
 450 0024 5A61     	 str r2,[r3,#20]
 208:../GPIO.h     **** }
 451              	 .loc 2 208 0
 452 0026 BD46     	 mov sp,r7
 453 0028 02B0     	 add sp,sp,#8
 454              	 
 455 002a 80BD     	 pop {r7,pc}
 456              	.L25:
 457              	 .align 2
 458              	.L24:
 459 002c 00000440 	 .word 1074003968
 460              	 .cfi_endproc
 461              	.LFE74:
 463              	 .section .text.P0_4_reset,"ax",%progbits
 464              	 .align 2
 465              	 .code 16
 466              	 .thumb_func
 468              	P0_4_reset:
 469              	.LFB79:
 209:../GPIO.h     **** 
 210:../GPIO.h     **** __STATIC_INLINE void P0_4_set_hwsel(uint32_t config){
 211:../GPIO.h     ****     PORT0->HWSEL &= ~0x00000300UL;
 212:../GPIO.h     ****     PORT0->HWSEL |= config << 8;
 213:../GPIO.h     **** }
 214:../GPIO.h     **** 
 215:../GPIO.h     **** __STATIC_INLINE void P0_4_set_standard_hysteresis(){
 216:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00040000UL;
 217:../GPIO.h     **** }
 218:../GPIO.h     **** 
 219:../GPIO.h     **** __STATIC_INLINE void P0_4_set_large_hysteresis(){
 220:../GPIO.h     ****     PORT0->PHCR0 |= 0x00040000UL;
 221:../GPIO.h     **** }
 222:../GPIO.h     **** 
 223:../GPIO.h     **** __STATIC_INLINE void P0_4_set(void){
 224:../GPIO.h     ****     PORT0->OMR = 0x00000010UL;
 225:../GPIO.h     **** }
 226:../GPIO.h     **** 
 227:../GPIO.h     **** __STATIC_INLINE void P0_4_reset(void){
 470              	 .loc 2 227 0
 471              	 .cfi_startproc
 472 0000 80B5     	 push {r7,lr}
 473              	.LCFI20:
 474              	 .cfi_def_cfa_offset 8
 475              	 .cfi_offset 7,-8
 476              	 .cfi_offset 14,-4
 477 0002 00AF     	 add r7,sp,#0
 478              	.LCFI21:
 479              	 .cfi_def_cfa_register 7
 228:../GPIO.h     ****     PORT0->OMR = 0x00100000UL;
 480              	 .loc 2 228 0
 481 0004 024B     	 ldr r3,.L27
 482 0006 8022     	 mov r2,#128
 483 0008 5203     	 lsl r2,r2,#13
 484 000a 5A60     	 str r2,[r3,#4]
 229:../GPIO.h     **** }
 485              	 .loc 2 229 0
 486 000c BD46     	 mov sp,r7
 487              	 
 488 000e 80BD     	 pop {r7,pc}
 489              	.L28:
 490              	 .align 2
 491              	.L27:
 492 0010 00000440 	 .word 1074003968
 493              	 .cfi_endproc
 494              	.LFE79:
 496              	 .section .text.P0_4_toggle,"ax",%progbits
 497              	 .align 2
 498              	 .code 16
 499              	 .thumb_func
 501              	P0_4_toggle:
 502              	.LFB80:
 230:../GPIO.h     **** 
 231:../GPIO.h     **** __STATIC_INLINE void P0_4_toggle(void){
 503              	 .loc 2 231 0
 504              	 .cfi_startproc
 505 0000 80B5     	 push {r7,lr}
 506              	.LCFI22:
 507              	 .cfi_def_cfa_offset 8
 508              	 .cfi_offset 7,-8
 509              	 .cfi_offset 14,-4
 510 0002 00AF     	 add r7,sp,#0
 511              	.LCFI23:
 512              	 .cfi_def_cfa_register 7
 232:../GPIO.h     ****     PORT0->OMR = 0x00100010UL;
 513              	 .loc 2 232 0
 514 0004 024B     	 ldr r3,.L30
 515 0006 034A     	 ldr r2,.L30+4
 516 0008 5A60     	 str r2,[r3,#4]
 233:../GPIO.h     **** }
 517              	 .loc 2 233 0
 518 000a BD46     	 mov sp,r7
 519              	 
 520 000c 80BD     	 pop {r7,pc}
 521              	.L31:
 522 000e C046     	 .align 2
 523              	.L30:
 524 0010 00000440 	 .word 1074003968
 525 0014 10001000 	 .word 1048592
 526              	 .cfi_endproc
 527              	.LFE80:
 529              	 .section .text.P1_0_set_mode,"ax",%progbits
 530              	 .align 2
 531              	 .code 16
 532              	 .thumb_func
 534              	P1_0_set_mode:
 535              	.LFB194:
 234:../GPIO.h     **** 
 235:../GPIO.h     **** __STATIC_INLINE uint32_t P0_4_read(void){
 236:../GPIO.h     ****     return(PORT0->IN & 0x00000010UL);
 237:../GPIO.h     **** }
 238:../GPIO.h     **** 
 239:../GPIO.h     **** __STATIC_INLINE void P0_4_enable_pps(void){
 240:../GPIO.h     ****     PORT0->PPS |= 0x00000010UL;
 241:../GPIO.h     **** }
 242:../GPIO.h     **** 
 243:../GPIO.h     **** __STATIC_INLINE void P0_4_disable_pps(void){
 244:../GPIO.h     ****     PORT0->PPS &= ~0x00000010UL;
 245:../GPIO.h     **** }
 246:../GPIO.h     **** 
 247:../GPIO.h     **** __STATIC_INLINE void P0_5_set_mode(uint8_t mode){
 248:../GPIO.h     ****     PORT0->IOCR4 &= ~0x0000f800UL;
 249:../GPIO.h     ****     PORT0->IOCR4 |= mode << 8;
 250:../GPIO.h     **** }
 251:../GPIO.h     **** 
 252:../GPIO.h     **** __STATIC_INLINE void P0_5_set_hwsel(uint32_t config){
 253:../GPIO.h     ****     PORT0->HWSEL &= ~0x00000c00UL;
 254:../GPIO.h     ****     PORT0->HWSEL |= config << 10;
 255:../GPIO.h     **** }
 256:../GPIO.h     **** 
 257:../GPIO.h     **** __STATIC_INLINE void P0_5_set_standard_hysteresis(){
 258:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00400000UL;
 259:../GPIO.h     **** }
 260:../GPIO.h     **** 
 261:../GPIO.h     **** __STATIC_INLINE void P0_5_set_large_hysteresis(){
 262:../GPIO.h     ****     PORT0->PHCR0 |= 0x00400000UL;
 263:../GPIO.h     **** }
 264:../GPIO.h     **** 
 265:../GPIO.h     **** __STATIC_INLINE void P0_5_set(void){
 266:../GPIO.h     ****     PORT0->OMR = 0x00000020UL;
 267:../GPIO.h     **** }
 268:../GPIO.h     **** 
 269:../GPIO.h     **** __STATIC_INLINE void P0_5_reset(void){
 270:../GPIO.h     ****     PORT0->OMR = 0x00200000UL;
 271:../GPIO.h     **** }
 272:../GPIO.h     **** 
 273:../GPIO.h     **** __STATIC_INLINE void P0_5_toggle(void){
 274:../GPIO.h     ****     PORT0->OMR = 0x00200020UL;
 275:../GPIO.h     **** }
 276:../GPIO.h     **** 
 277:../GPIO.h     **** __STATIC_INLINE uint32_t P0_5_read(void){
 278:../GPIO.h     ****     return(PORT0->IN & 0x00000020UL);
 279:../GPIO.h     **** }
 280:../GPIO.h     **** 
 281:../GPIO.h     **** __STATIC_INLINE void P0_5_enable_pps(void){
 282:../GPIO.h     ****     PORT0->PPS |= 0x00000020UL;
 283:../GPIO.h     **** }
 284:../GPIO.h     **** 
 285:../GPIO.h     **** __STATIC_INLINE void P0_5_disable_pps(void){
 286:../GPIO.h     ****     PORT0->PPS &= ~0x00000020UL;
 287:../GPIO.h     **** }
 288:../GPIO.h     **** 
 289:../GPIO.h     **** __STATIC_INLINE void P0_6_set_mode(uint8_t mode){
 290:../GPIO.h     ****     PORT0->IOCR4 &= ~0x00f80000UL;
 291:../GPIO.h     ****     PORT0->IOCR4 |= mode << 16;
 292:../GPIO.h     **** }
 293:../GPIO.h     **** 
 294:../GPIO.h     **** __STATIC_INLINE void P0_6_set_hwsel(uint32_t config){
 295:../GPIO.h     ****     PORT0->HWSEL &= ~0x00003000UL;
 296:../GPIO.h     ****     PORT0->HWSEL |= config << 12;
 297:../GPIO.h     **** }
 298:../GPIO.h     **** 
 299:../GPIO.h     **** __STATIC_INLINE void P0_6_set_standard_hysteresis(){
 300:../GPIO.h     ****     PORT0->PHCR0 &= ~0x04000000UL;
 301:../GPIO.h     **** }
 302:../GPIO.h     **** 
 303:../GPIO.h     **** __STATIC_INLINE void P0_6_set_large_hysteresis(){
 304:../GPIO.h     ****     PORT0->PHCR0 |= 0x04000000UL;
 305:../GPIO.h     **** }
 306:../GPIO.h     **** 
 307:../GPIO.h     **** __STATIC_INLINE void P0_6_set(void){
 308:../GPIO.h     ****     PORT0->OMR = 0x00000040UL;
 309:../GPIO.h     **** }
 310:../GPIO.h     **** 
 311:../GPIO.h     **** __STATIC_INLINE void P0_6_reset(void){
 312:../GPIO.h     ****     PORT0->OMR = 0x00400000UL;
 313:../GPIO.h     **** }
 314:../GPIO.h     **** 
 315:../GPIO.h     **** __STATIC_INLINE void P0_6_toggle(void){
 316:../GPIO.h     ****     PORT0->OMR = 0x00400040UL;
 317:../GPIO.h     **** }
 318:../GPIO.h     **** 
 319:../GPIO.h     **** __STATIC_INLINE uint32_t P0_6_read(void){
 320:../GPIO.h     ****     return(PORT0->IN & 0x00000040UL);
 321:../GPIO.h     **** }
 322:../GPIO.h     **** 
 323:../GPIO.h     **** __STATIC_INLINE void P0_6_enable_pps(void){
 324:../GPIO.h     ****     PORT0->PPS |= 0x00000040UL;
 325:../GPIO.h     **** }
 326:../GPIO.h     **** 
 327:../GPIO.h     **** __STATIC_INLINE void P0_6_disable_pps(void){
 328:../GPIO.h     ****     PORT0->PPS &= ~0x00000040UL;
 329:../GPIO.h     **** }
 330:../GPIO.h     **** 
 331:../GPIO.h     **** __STATIC_INLINE void P0_7_set_mode(uint8_t mode){
 332:../GPIO.h     ****     PORT0->IOCR4 &= ~0xf8000000UL;
 333:../GPIO.h     ****     PORT0->IOCR4 |= mode << 24;
 334:../GPIO.h     **** }
 335:../GPIO.h     **** 
 336:../GPIO.h     **** __STATIC_INLINE void P0_7_set_hwsel(uint32_t config){
 337:../GPIO.h     ****     PORT0->HWSEL &= ~0x0000c000UL;
 338:../GPIO.h     ****     PORT0->HWSEL |= config << 14;
 339:../GPIO.h     **** }
 340:../GPIO.h     **** 
 341:../GPIO.h     **** __STATIC_INLINE void P0_7_set_standard_hysteresis(){
 342:../GPIO.h     ****     PORT0->PHCR0 &= ~0x40000000UL;
 343:../GPIO.h     **** }
 344:../GPIO.h     **** 
 345:../GPIO.h     **** __STATIC_INLINE void P0_7_set_large_hysteresis(){
 346:../GPIO.h     ****     PORT0->PHCR0 |= 0x40000000UL;
 347:../GPIO.h     **** }
 348:../GPIO.h     **** 
 349:../GPIO.h     **** __STATIC_INLINE void P0_7_set(void){
 350:../GPIO.h     ****     PORT0->OMR = 0x00000080UL;
 351:../GPIO.h     **** }
 352:../GPIO.h     **** 
 353:../GPIO.h     **** __STATIC_INLINE void P0_7_reset(void){
 354:../GPIO.h     ****     PORT0->OMR = 0x00800000UL;
 355:../GPIO.h     **** }
 356:../GPIO.h     **** 
 357:../GPIO.h     **** __STATIC_INLINE void P0_7_toggle(void){
 358:../GPIO.h     ****     PORT0->OMR = 0x00800080UL;
 359:../GPIO.h     **** }
 360:../GPIO.h     **** 
 361:../GPIO.h     **** __STATIC_INLINE uint32_t P0_7_read(void){
 362:../GPIO.h     ****     return(PORT0->IN & 0x00000080UL);
 363:../GPIO.h     **** }
 364:../GPIO.h     **** 
 365:../GPIO.h     **** __STATIC_INLINE void P0_7_enable_pps(void){
 366:../GPIO.h     ****     PORT0->PPS |= 0x00000080UL;
 367:../GPIO.h     **** }
 368:../GPIO.h     **** 
 369:../GPIO.h     **** __STATIC_INLINE void P0_7_disable_pps(void){
 370:../GPIO.h     ****     PORT0->PPS &= ~0x00000080UL;
 371:../GPIO.h     **** }
 372:../GPIO.h     **** 
 373:../GPIO.h     **** __STATIC_INLINE void P0_8_set_mode(uint8_t mode){
 374:../GPIO.h     ****     PORT0->IOCR8 &= ~0x000000f8UL;
 375:../GPIO.h     ****     PORT0->IOCR8 |= mode << 0;
 376:../GPIO.h     **** }
 377:../GPIO.h     **** 
 378:../GPIO.h     **** __STATIC_INLINE void P0_8_set_hwsel(uint32_t config){
 379:../GPIO.h     ****     PORT0->HWSEL &= ~0x00030000UL;
 380:../GPIO.h     ****     PORT0->HWSEL |= config << 16;
 381:../GPIO.h     **** }
 382:../GPIO.h     **** 
 383:../GPIO.h     **** __STATIC_INLINE void P0_8_set_standard_hysteresis(){
 384:../GPIO.h     ****     PORT0->PHCR1 &= ~0x00000004UL;
 385:../GPIO.h     **** }
 386:../GPIO.h     **** 
 387:../GPIO.h     **** __STATIC_INLINE void P0_8_set_large_hysteresis(){
 388:../GPIO.h     ****     PORT0->PHCR1 |= 0x00000004UL;
 389:../GPIO.h     **** }
 390:../GPIO.h     **** 
 391:../GPIO.h     **** __STATIC_INLINE void P0_8_set(void){
 392:../GPIO.h     ****     PORT0->OMR = 0x00000100UL;
 393:../GPIO.h     **** }
 394:../GPIO.h     **** 
 395:../GPIO.h     **** __STATIC_INLINE void P0_8_reset(void){
 396:../GPIO.h     ****     PORT0->OMR = 0x01000000UL;
 397:../GPIO.h     **** }
 398:../GPIO.h     **** 
 399:../GPIO.h     **** __STATIC_INLINE void P0_8_toggle(void){
 400:../GPIO.h     ****     PORT0->OMR = 0x01000100UL;
 401:../GPIO.h     **** }
 402:../GPIO.h     **** 
 403:../GPIO.h     **** __STATIC_INLINE uint32_t P0_8_read(void){
 404:../GPIO.h     ****     return(PORT0->IN & 0x00000100UL);
 405:../GPIO.h     **** }
 406:../GPIO.h     **** 
 407:../GPIO.h     **** __STATIC_INLINE void P0_8_enable_pps(void){
 408:../GPIO.h     ****     PORT0->PPS |= 0x00000100UL;
 409:../GPIO.h     **** }
 410:../GPIO.h     **** 
 411:../GPIO.h     **** __STATIC_INLINE void P0_8_disable_pps(void){
 412:../GPIO.h     ****     PORT0->PPS &= ~0x00000100UL;
 413:../GPIO.h     **** }
 414:../GPIO.h     **** 
 415:../GPIO.h     **** __STATIC_INLINE void P0_9_set_mode(uint8_t mode){
 416:../GPIO.h     ****     PORT0->IOCR8 &= ~0x0000f800UL;
 417:../GPIO.h     ****     PORT0->IOCR8 |= mode << 8;
 418:../GPIO.h     **** }
 419:../GPIO.h     **** 
 420:../GPIO.h     **** __STATIC_INLINE void P0_9_set_hwsel(uint32_t config){
 421:../GPIO.h     ****     PORT0->HWSEL &= ~0x000c0000UL;
 422:../GPIO.h     ****     PORT0->HWSEL |= config << 18;
 423:../GPIO.h     **** }
 424:../GPIO.h     **** 
 425:../GPIO.h     **** __STATIC_INLINE void P0_9_set_standard_hysteresis(){
 426:../GPIO.h     ****     PORT0->PHCR1 &= ~0x00000040UL;
 427:../GPIO.h     **** }
 428:../GPIO.h     **** 
 429:../GPIO.h     **** __STATIC_INLINE void P0_9_set_large_hysteresis(){
 430:../GPIO.h     ****     PORT0->PHCR1 |= 0x00000040UL;
 431:../GPIO.h     **** }
 432:../GPIO.h     **** 
 433:../GPIO.h     **** __STATIC_INLINE void P0_9_set(void){
 434:../GPIO.h     ****     PORT0->OMR = 0x00000200UL;
 435:../GPIO.h     **** }
 436:../GPIO.h     **** 
 437:../GPIO.h     **** __STATIC_INLINE void P0_9_reset(void){
 438:../GPIO.h     ****     PORT0->OMR = 0x02000000UL;
 439:../GPIO.h     **** }
 440:../GPIO.h     **** 
 441:../GPIO.h     **** __STATIC_INLINE void P0_9_toggle(void){
 442:../GPIO.h     ****     PORT0->OMR = 0x02000200UL;
 443:../GPIO.h     **** }
 444:../GPIO.h     **** 
 445:../GPIO.h     **** __STATIC_INLINE uint32_t P0_9_read(void){
 446:../GPIO.h     ****     return(PORT0->IN & 0x00000200UL);
 447:../GPIO.h     **** }
 448:../GPIO.h     **** 
 449:../GPIO.h     **** __STATIC_INLINE void P0_9_enable_pps(void){
 450:../GPIO.h     ****     PORT0->PPS |= 0x00000200UL;
 451:../GPIO.h     **** }
 452:../GPIO.h     **** 
 453:../GPIO.h     **** __STATIC_INLINE void P0_9_disable_pps(void){
 454:../GPIO.h     ****     PORT0->PPS &= ~0x00000200UL;
 455:../GPIO.h     **** }
 456:../GPIO.h     **** 
 457:../GPIO.h     **** __STATIC_INLINE void P0_10_set_mode(uint8_t mode){
 458:../GPIO.h     ****     PORT0->IOCR8 &= ~0x00f80000UL;
 459:../GPIO.h     ****     PORT0->IOCR8 |= mode << 16;
 460:../GPIO.h     **** }
 461:../GPIO.h     **** 
 462:../GPIO.h     **** __STATIC_INLINE void P0_10_set_hwsel(uint32_t config){
 463:../GPIO.h     ****     PORT0->HWSEL &= ~0x00300000UL;
 464:../GPIO.h     ****     PORT0->HWSEL |= config << 20;
 465:../GPIO.h     **** }
 466:../GPIO.h     **** 
 467:../GPIO.h     **** __STATIC_INLINE void P0_10_set_standard_hysteresis(){
 468:../GPIO.h     ****     PORT0->PHCR1 &= ~0x00000400UL;
 469:../GPIO.h     **** }
 470:../GPIO.h     **** 
 471:../GPIO.h     **** __STATIC_INLINE void P0_10_set_large_hysteresis(){
 472:../GPIO.h     ****     PORT0->PHCR1 |= 0x00000400UL;
 473:../GPIO.h     **** }
 474:../GPIO.h     **** 
 475:../GPIO.h     **** __STATIC_INLINE void P0_10_set(void){
 476:../GPIO.h     ****     PORT0->OMR = 0x00000400UL;
 477:../GPIO.h     **** }
 478:../GPIO.h     **** 
 479:../GPIO.h     **** __STATIC_INLINE void P0_10_reset(void){
 480:../GPIO.h     ****     PORT0->OMR = 0x04000000UL;
 481:../GPIO.h     **** }
 482:../GPIO.h     **** 
 483:../GPIO.h     **** __STATIC_INLINE void P0_10_toggle(void){
 484:../GPIO.h     ****     PORT0->OMR = 0x04000400UL;
 485:../GPIO.h     **** }
 486:../GPIO.h     **** 
 487:../GPIO.h     **** __STATIC_INLINE uint32_t P0_10_read(void){
 488:../GPIO.h     ****     return(PORT0->IN & 0x00000400UL);
 489:../GPIO.h     **** }
 490:../GPIO.h     **** 
 491:../GPIO.h     **** __STATIC_INLINE void P0_10_enable_pps(void){
 492:../GPIO.h     ****     PORT0->PPS |= 0x00000400UL;
 493:../GPIO.h     **** }
 494:../GPIO.h     **** 
 495:../GPIO.h     **** __STATIC_INLINE void P0_10_disable_pps(void){
 496:../GPIO.h     ****     PORT0->PPS &= ~0x00000400UL;
 497:../GPIO.h     **** }
 498:../GPIO.h     **** 
 499:../GPIO.h     **** __STATIC_INLINE void P0_11_set_mode(uint8_t mode){
 500:../GPIO.h     ****     PORT0->IOCR8 &= ~0xf8000000UL;
 501:../GPIO.h     ****     PORT0->IOCR8 |= mode << 24;
 502:../GPIO.h     **** }
 503:../GPIO.h     **** 
 504:../GPIO.h     **** __STATIC_INLINE void P0_11_set_hwsel(uint32_t config){
 505:../GPIO.h     ****     PORT0->HWSEL &= ~0x00c00000UL;
 506:../GPIO.h     ****     PORT0->HWSEL |= config << 22;
 507:../GPIO.h     **** }
 508:../GPIO.h     **** 
 509:../GPIO.h     **** __STATIC_INLINE void P0_11_set_standard_hysteresis(){
 510:../GPIO.h     ****     PORT0->PHCR1 &= ~0x00004000UL;
 511:../GPIO.h     **** }
 512:../GPIO.h     **** 
 513:../GPIO.h     **** __STATIC_INLINE void P0_11_set_large_hysteresis(){
 514:../GPIO.h     ****     PORT0->PHCR1 |= 0x00004000UL;
 515:../GPIO.h     **** }
 516:../GPIO.h     **** 
 517:../GPIO.h     **** __STATIC_INLINE void P0_11_set(void){
 518:../GPIO.h     ****     PORT0->OMR = 0x00000800UL;
 519:../GPIO.h     **** }
 520:../GPIO.h     **** 
 521:../GPIO.h     **** __STATIC_INLINE void P0_11_reset(void){
 522:../GPIO.h     ****     PORT0->OMR = 0x08000000UL;
 523:../GPIO.h     **** }
 524:../GPIO.h     **** 
 525:../GPIO.h     **** __STATIC_INLINE void P0_11_toggle(void){
 526:../GPIO.h     ****     PORT0->OMR = 0x08000800UL;
 527:../GPIO.h     **** }
 528:../GPIO.h     **** 
 529:../GPIO.h     **** __STATIC_INLINE uint32_t P0_11_read(void){
 530:../GPIO.h     ****     return(PORT0->IN & 0x00000800UL);
 531:../GPIO.h     **** }
 532:../GPIO.h     **** 
 533:../GPIO.h     **** __STATIC_INLINE void P0_11_enable_pps(void){
 534:../GPIO.h     ****     PORT0->PPS |= 0x00000800UL;
 535:../GPIO.h     **** }
 536:../GPIO.h     **** 
 537:../GPIO.h     **** __STATIC_INLINE void P0_11_disable_pps(void){
 538:../GPIO.h     ****     PORT0->PPS &= ~0x00000800UL;
 539:../GPIO.h     **** }
 540:../GPIO.h     **** 
 541:../GPIO.h     **** __STATIC_INLINE void P0_12_set_mode(uint8_t mode){
 542:../GPIO.h     ****     PORT0->IOCR12 &= ~0x000000f8UL;
 543:../GPIO.h     ****     PORT0->IOCR12 |= mode << 0;
 544:../GPIO.h     **** }
 545:../GPIO.h     **** 
 546:../GPIO.h     **** __STATIC_INLINE void P0_12_set_hwsel(uint32_t config){
 547:../GPIO.h     ****     PORT0->HWSEL &= ~0x03000000UL;
 548:../GPIO.h     ****     PORT0->HWSEL |= config << 24;
 549:../GPIO.h     **** }
 550:../GPIO.h     **** 
 551:../GPIO.h     **** __STATIC_INLINE void P0_12_set_standard_hysteresis(){
 552:../GPIO.h     ****     PORT0->PHCR1 &= ~0x00040000UL;
 553:../GPIO.h     **** }
 554:../GPIO.h     **** 
 555:../GPIO.h     **** __STATIC_INLINE void P0_12_set_large_hysteresis(){
 556:../GPIO.h     ****     PORT0->PHCR1 |= 0x00040000UL;
 557:../GPIO.h     **** }
 558:../GPIO.h     **** 
 559:../GPIO.h     **** __STATIC_INLINE void P0_12_set(void){
 560:../GPIO.h     ****     PORT0->OMR = 0x00001000UL;
 561:../GPIO.h     **** }
 562:../GPIO.h     **** 
 563:../GPIO.h     **** __STATIC_INLINE void P0_12_reset(void){
 564:../GPIO.h     ****     PORT0->OMR = 0x10000000UL;
 565:../GPIO.h     **** }
 566:../GPIO.h     **** 
 567:../GPIO.h     **** __STATIC_INLINE void P0_12_toggle(void){
 568:../GPIO.h     ****     PORT0->OMR = 0x10001000UL;
 569:../GPIO.h     **** }
 570:../GPIO.h     **** 
 571:../GPIO.h     **** __STATIC_INLINE uint32_t P0_12_read(void){
 572:../GPIO.h     ****     return(PORT0->IN & 0x00001000UL);
 573:../GPIO.h     **** }
 574:../GPIO.h     **** 
 575:../GPIO.h     **** __STATIC_INLINE void P0_12_enable_pps(void){
 576:../GPIO.h     ****     PORT0->PPS |= 0x00001000UL;
 577:../GPIO.h     **** }
 578:../GPIO.h     **** 
 579:../GPIO.h     **** __STATIC_INLINE void P0_12_disable_pps(void){
 580:../GPIO.h     ****     PORT0->PPS &= ~0x00001000UL;
 581:../GPIO.h     **** }
 582:../GPIO.h     **** 
 583:../GPIO.h     **** __STATIC_INLINE void P0_13_set_mode(uint8_t mode){
 584:../GPIO.h     ****     PORT0->IOCR12 &= ~0x0000f800UL;
 585:../GPIO.h     ****     PORT0->IOCR12 |= mode << 8;
 586:../GPIO.h     **** }
 587:../GPIO.h     **** 
 588:../GPIO.h     **** __STATIC_INLINE void P0_13_set_hwsel(uint32_t config){
 589:../GPIO.h     ****     PORT0->HWSEL &= ~0x0c000000UL;
 590:../GPIO.h     ****     PORT0->HWSEL |= config << 26;
 591:../GPIO.h     **** }
 592:../GPIO.h     **** 
 593:../GPIO.h     **** __STATIC_INLINE void P0_13_set_standard_hysteresis(){
 594:../GPIO.h     ****     PORT0->PHCR1 &= ~0x00400000UL;
 595:../GPIO.h     **** }
 596:../GPIO.h     **** 
 597:../GPIO.h     **** __STATIC_INLINE void P0_13_set_large_hysteresis(){
 598:../GPIO.h     ****     PORT0->PHCR1 |= 0x00400000UL;
 599:../GPIO.h     **** }
 600:../GPIO.h     **** 
 601:../GPIO.h     **** __STATIC_INLINE void P0_13_set(void){
 602:../GPIO.h     ****     PORT0->OMR = 0x00002000UL;
 603:../GPIO.h     **** }
 604:../GPIO.h     **** 
 605:../GPIO.h     **** __STATIC_INLINE void P0_13_reset(void){
 606:../GPIO.h     ****     PORT0->OMR = 0x20000000UL;
 607:../GPIO.h     **** }
 608:../GPIO.h     **** 
 609:../GPIO.h     **** __STATIC_INLINE void P0_13_toggle(void){
 610:../GPIO.h     ****     PORT0->OMR = 0x20002000UL;
 611:../GPIO.h     **** }
 612:../GPIO.h     **** 
 613:../GPIO.h     **** __STATIC_INLINE uint32_t P0_13_read(void){
 614:../GPIO.h     ****     return(PORT0->IN & 0x00002000UL);
 615:../GPIO.h     **** }
 616:../GPIO.h     **** 
 617:../GPIO.h     **** __STATIC_INLINE void P0_13_enable_pps(void){
 618:../GPIO.h     ****     PORT0->PPS |= 0x00002000UL;
 619:../GPIO.h     **** }
 620:../GPIO.h     **** 
 621:../GPIO.h     **** __STATIC_INLINE void P0_13_disable_pps(void){
 622:../GPIO.h     ****     PORT0->PPS &= ~0x00002000UL;
 623:../GPIO.h     **** }
 624:../GPIO.h     **** 
 625:../GPIO.h     **** __STATIC_INLINE void P0_14_set_mode(uint8_t mode){
 626:../GPIO.h     ****     PORT0->IOCR12 &= ~0x00f80000UL;
 627:../GPIO.h     ****     PORT0->IOCR12 |= mode << 16;
 628:../GPIO.h     **** }
 629:../GPIO.h     **** 
 630:../GPIO.h     **** __STATIC_INLINE void P0_14_set_hwsel(uint32_t config){
 631:../GPIO.h     ****     PORT0->HWSEL &= ~0x30000000UL;
 632:../GPIO.h     ****     PORT0->HWSEL |= config << 28;
 633:../GPIO.h     **** }
 634:../GPIO.h     **** 
 635:../GPIO.h     **** __STATIC_INLINE void P0_14_set_standard_hysteresis(){
 636:../GPIO.h     ****     PORT0->PHCR1 &= ~0x04000000UL;
 637:../GPIO.h     **** }
 638:../GPIO.h     **** 
 639:../GPIO.h     **** __STATIC_INLINE void P0_14_set_large_hysteresis(){
 640:../GPIO.h     ****     PORT0->PHCR1 |= 0x04000000UL;
 641:../GPIO.h     **** }
 642:../GPIO.h     **** 
 643:../GPIO.h     **** __STATIC_INLINE void P0_14_set(void){
 644:../GPIO.h     ****     PORT0->OMR = 0x00004000UL;
 645:../GPIO.h     **** }
 646:../GPIO.h     **** 
 647:../GPIO.h     **** __STATIC_INLINE void P0_14_reset(void){
 648:../GPIO.h     ****     PORT0->OMR = 0x40000000UL;
 649:../GPIO.h     **** }
 650:../GPIO.h     **** 
 651:../GPIO.h     **** __STATIC_INLINE void P0_14_toggle(void){
 652:../GPIO.h     ****     PORT0->OMR = 0x40004000UL;
 653:../GPIO.h     **** }
 654:../GPIO.h     **** 
 655:../GPIO.h     **** __STATIC_INLINE uint32_t P0_14_read(void){
 656:../GPIO.h     ****     return(PORT0->IN & 0x00004000UL);
 657:../GPIO.h     **** }
 658:../GPIO.h     **** 
 659:../GPIO.h     **** __STATIC_INLINE void P0_14_enable_pps(void){
 660:../GPIO.h     ****     PORT0->PPS |= 0x00004000UL;
 661:../GPIO.h     **** }
 662:../GPIO.h     **** 
 663:../GPIO.h     **** __STATIC_INLINE void P0_14_disable_pps(void){
 664:../GPIO.h     ****     PORT0->PPS &= ~0x00004000UL;
 665:../GPIO.h     **** }
 666:../GPIO.h     **** 
 667:../GPIO.h     **** __STATIC_INLINE void P0_15_set_mode(uint8_t mode){
 668:../GPIO.h     ****     PORT0->IOCR12 &= ~0xf8000000UL;
 669:../GPIO.h     ****     PORT0->IOCR12 |= mode << 24;
 670:../GPIO.h     **** }
 671:../GPIO.h     **** 
 672:../GPIO.h     **** __STATIC_INLINE void P0_15_set_hwsel(uint32_t config){
 673:../GPIO.h     ****     PORT0->HWSEL &= ~0xc0000000UL;
 674:../GPIO.h     ****     PORT0->HWSEL |= config << 30;
 675:../GPIO.h     **** }
 676:../GPIO.h     **** 
 677:../GPIO.h     **** __STATIC_INLINE void P0_15_set_standard_hysteresis(){
 678:../GPIO.h     ****     PORT0->PHCR1 &= ~0x40000000UL;
 679:../GPIO.h     **** }
 680:../GPIO.h     **** 
 681:../GPIO.h     **** __STATIC_INLINE void P0_15_set_large_hysteresis(){
 682:../GPIO.h     ****     PORT0->PHCR1 |= 0x40000000UL;
 683:../GPIO.h     **** }
 684:../GPIO.h     **** 
 685:../GPIO.h     **** __STATIC_INLINE void P0_15_set(void){
 686:../GPIO.h     ****     PORT0->OMR = 0x00008000UL;
 687:../GPIO.h     **** }
 688:../GPIO.h     **** 
 689:../GPIO.h     **** __STATIC_INLINE void P0_15_reset(void){
 690:../GPIO.h     ****     PORT0->OMR = 0x80000000UL;
 691:../GPIO.h     **** }
 692:../GPIO.h     **** 
 693:../GPIO.h     **** __STATIC_INLINE void P0_15_toggle(void){
 694:../GPIO.h     ****     PORT0->OMR = 0x80008000UL;
 695:../GPIO.h     **** }
 696:../GPIO.h     **** 
 697:../GPIO.h     **** __STATIC_INLINE uint32_t P0_15_read(void){
 698:../GPIO.h     ****     return(PORT0->IN & 0x00008000UL);
 699:../GPIO.h     **** }
 700:../GPIO.h     **** 
 701:../GPIO.h     **** __STATIC_INLINE void P0_15_enable_pps(void){
 702:../GPIO.h     ****     PORT0->PPS |= 0x00008000UL;
 703:../GPIO.h     **** }
 704:../GPIO.h     **** 
 705:../GPIO.h     **** __STATIC_INLINE void P0_15_disable_pps(void){
 706:../GPIO.h     ****     PORT0->PPS &= ~0x00008000UL;
 707:../GPIO.h     **** }
 708:../GPIO.h     **** 
 709:../GPIO.h     **** __STATIC_INLINE void P1_0_set_mode(uint8_t mode){
 536              	 .loc 2 709 0
 537              	 .cfi_startproc
 538 0000 80B5     	 push {r7,lr}
 539              	.LCFI24:
 540              	 .cfi_def_cfa_offset 8
 541              	 .cfi_offset 7,-8
 542              	 .cfi_offset 14,-4
 543 0002 82B0     	 sub sp,sp,#8
 544              	.LCFI25:
 545              	 .cfi_def_cfa_offset 16
 546 0004 00AF     	 add r7,sp,#0
 547              	.LCFI26:
 548              	 .cfi_def_cfa_register 7
 549 0006 021C     	 mov r2,r0
 550 0008 FB1D     	 add r3,r7,#7
 551 000a 1A70     	 strb r2,[r3]
 710:../GPIO.h     ****     PORT1->IOCR0 &= ~0x000000f8UL;
 552              	 .loc 2 710 0
 553 000c 074B     	 ldr r3,.L33
 554 000e 074A     	 ldr r2,.L33
 555 0010 1269     	 ldr r2,[r2,#16]
 556 0012 F821     	 mov r1,#248
 557 0014 8A43     	 bic r2,r1
 558 0016 1A61     	 str r2,[r3,#16]
 711:../GPIO.h     ****     PORT1->IOCR0 |= mode << 0;
 559              	 .loc 2 711 0
 560 0018 044B     	 ldr r3,.L33
 561 001a 044A     	 ldr r2,.L33
 562 001c 1169     	 ldr r1,[r2,#16]
 563 001e FA1D     	 add r2,r7,#7
 564 0020 1278     	 ldrb r2,[r2]
 565 0022 0A43     	 orr r2,r1
 566 0024 1A61     	 str r2,[r3,#16]
 712:../GPIO.h     **** }
 567              	 .loc 2 712 0
 568 0026 BD46     	 mov sp,r7
 569 0028 02B0     	 add sp,sp,#8
 570              	 
 571 002a 80BD     	 pop {r7,pc}
 572              	.L34:
 573              	 .align 2
 574              	.L33:
 575 002c 00010440 	 .word 1074004224
 576              	 .cfi_endproc
 577              	.LFE194:
 579              	 .section .text.P1_1_set_mode,"ax",%progbits
 580              	 .align 2
 581              	 .code 16
 582              	 .thumb_func
 584              	P1_1_set_mode:
 585              	.LFB204:
 713:../GPIO.h     **** 
 714:../GPIO.h     **** __STATIC_INLINE void P1_0_set_hwsel(uint32_t config){
 715:../GPIO.h     ****     PORT1->HWSEL &= ~0x00000003UL;
 716:../GPIO.h     ****     PORT1->HWSEL |= config << 0;
 717:../GPIO.h     **** }
 718:../GPIO.h     **** 
 719:../GPIO.h     **** __STATIC_INLINE void P1_0_set_standard_hysteresis(){
 720:../GPIO.h     ****     PORT1->PHCR0 &= ~0x00000004UL;
 721:../GPIO.h     **** }
 722:../GPIO.h     **** 
 723:../GPIO.h     **** __STATIC_INLINE void P1_0_set_large_hysteresis(){
 724:../GPIO.h     ****     PORT1->PHCR0 |= 0x00000004UL;
 725:../GPIO.h     **** }
 726:../GPIO.h     **** 
 727:../GPIO.h     **** __STATIC_INLINE void P1_0_set(void){
 728:../GPIO.h     ****     PORT1->OMR = 0x00000001UL;
 729:../GPIO.h     **** }
 730:../GPIO.h     **** 
 731:../GPIO.h     **** __STATIC_INLINE void P1_0_reset(void){
 732:../GPIO.h     ****     PORT1->OMR = 0x00010000UL;
 733:../GPIO.h     **** }
 734:../GPIO.h     **** 
 735:../GPIO.h     **** __STATIC_INLINE void P1_0_toggle(void){
 736:../GPIO.h     ****     PORT1->OMR = 0x00010001UL;
 737:../GPIO.h     **** }
 738:../GPIO.h     **** 
 739:../GPIO.h     **** __STATIC_INLINE uint32_t P1_0_read(void){
 740:../GPIO.h     ****     return(PORT1->IN & 0x00000001UL);
 741:../GPIO.h     **** }
 742:../GPIO.h     **** 
 743:../GPIO.h     **** __STATIC_INLINE void P1_0_enable_pps(void){
 744:../GPIO.h     ****     PORT1->PPS |= 0x00000001UL;
 745:../GPIO.h     **** }
 746:../GPIO.h     **** 
 747:../GPIO.h     **** __STATIC_INLINE void P1_0_disable_pps(void){
 748:../GPIO.h     ****     PORT1->PPS &= ~0x00000001UL;
 749:../GPIO.h     **** }
 750:../GPIO.h     **** 
 751:../GPIO.h     **** __STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 586              	 .loc 2 751 0
 587              	 .cfi_startproc
 588 0000 80B5     	 push {r7,lr}
 589              	.LCFI27:
 590              	 .cfi_def_cfa_offset 8
 591              	 .cfi_offset 7,-8
 592              	 .cfi_offset 14,-4
 593 0002 82B0     	 sub sp,sp,#8
 594              	.LCFI28:
 595              	 .cfi_def_cfa_offset 16
 596 0004 00AF     	 add r7,sp,#0
 597              	.LCFI29:
 598              	 .cfi_def_cfa_register 7
 599 0006 021C     	 mov r2,r0
 600 0008 FB1D     	 add r3,r7,#7
 601 000a 1A70     	 strb r2,[r3]
 752:../GPIO.h     ****     PORT1->IOCR0 &= ~0x0000f800UL;
 602              	 .loc 2 752 0
 603 000c 084B     	 ldr r3,.L36
 604 000e 084A     	 ldr r2,.L36
 605 0010 1269     	 ldr r2,[r2,#16]
 606 0012 0849     	 ldr r1,.L36+4
 607 0014 0A40     	 and r2,r1
 608 0016 1A61     	 str r2,[r3,#16]
 753:../GPIO.h     ****     PORT1->IOCR0 |= mode << 8;
 609              	 .loc 2 753 0
 610 0018 054B     	 ldr r3,.L36
 611 001a 054A     	 ldr r2,.L36
 612 001c 1269     	 ldr r2,[r2,#16]
 613 001e F91D     	 add r1,r7,#7
 614 0020 0978     	 ldrb r1,[r1]
 615 0022 0902     	 lsl r1,r1,#8
 616 0024 0A43     	 orr r2,r1
 617 0026 1A61     	 str r2,[r3,#16]
 754:../GPIO.h     **** }
 618              	 .loc 2 754 0
 619 0028 BD46     	 mov sp,r7
 620 002a 02B0     	 add sp,sp,#8
 621              	 
 622 002c 80BD     	 pop {r7,pc}
 623              	.L37:
 624 002e C046     	 .align 2
 625              	.L36:
 626 0030 00010440 	 .word 1074004224
 627 0034 FF07FFFF 	 .word -63489
 628              	 .cfi_endproc
 629              	.LFE204:
 631              	 .section .text.P1_2_set_mode,"ax",%progbits
 632              	 .align 2
 633              	 .code 16
 634              	 .thumb_func
 636              	P1_2_set_mode:
 637              	.LFB214:
 755:../GPIO.h     **** 
 756:../GPIO.h     **** __STATIC_INLINE void P1_1_set_hwsel(uint32_t config){
 757:../GPIO.h     ****     PORT1->HWSEL &= ~0x0000000cUL;
 758:../GPIO.h     ****     PORT1->HWSEL |= config << 2;
 759:../GPIO.h     **** }
 760:../GPIO.h     **** 
 761:../GPIO.h     **** __STATIC_INLINE void P1_1_set_standard_hysteresis(){
 762:../GPIO.h     ****     PORT1->PHCR0 &= ~0x00000040UL;
 763:../GPIO.h     **** }
 764:../GPIO.h     **** 
 765:../GPIO.h     **** __STATIC_INLINE void P1_1_set_large_hysteresis(){
 766:../GPIO.h     ****     PORT1->PHCR0 |= 0x00000040UL;
 767:../GPIO.h     **** }
 768:../GPIO.h     **** 
 769:../GPIO.h     **** __STATIC_INLINE void P1_1_set(void){
 770:../GPIO.h     ****     PORT1->OMR = 0x00000002UL;
 771:../GPIO.h     **** }
 772:../GPIO.h     **** 
 773:../GPIO.h     **** __STATIC_INLINE void P1_1_reset(void){
 774:../GPIO.h     ****     PORT1->OMR = 0x00020000UL;
 775:../GPIO.h     **** }
 776:../GPIO.h     **** 
 777:../GPIO.h     **** __STATIC_INLINE void P1_1_toggle(void){
 778:../GPIO.h     ****     PORT1->OMR = 0x00020002UL;
 779:../GPIO.h     **** }
 780:../GPIO.h     **** 
 781:../GPIO.h     **** __STATIC_INLINE uint32_t P1_1_read(void){
 782:../GPIO.h     ****     return(PORT1->IN & 0x00000002UL);
 783:../GPIO.h     **** }
 784:../GPIO.h     **** 
 785:../GPIO.h     **** __STATIC_INLINE void P1_1_enable_pps(void){
 786:../GPIO.h     ****     PORT1->PPS |= 0x00000002UL;
 787:../GPIO.h     **** }
 788:../GPIO.h     **** 
 789:../GPIO.h     **** __STATIC_INLINE void P1_1_disable_pps(void){
 790:../GPIO.h     ****     PORT1->PPS &= ~0x00000002UL;
 791:../GPIO.h     **** }
 792:../GPIO.h     **** 
 793:../GPIO.h     **** __STATIC_INLINE void P1_2_set_mode(uint8_t mode){
 638              	 .loc 2 793 0
 639              	 .cfi_startproc
 640 0000 80B5     	 push {r7,lr}
 641              	.LCFI30:
 642              	 .cfi_def_cfa_offset 8
 643              	 .cfi_offset 7,-8
 644              	 .cfi_offset 14,-4
 645 0002 82B0     	 sub sp,sp,#8
 646              	.LCFI31:
 647              	 .cfi_def_cfa_offset 16
 648 0004 00AF     	 add r7,sp,#0
 649              	.LCFI32:
 650              	 .cfi_def_cfa_register 7
 651 0006 021C     	 mov r2,r0
 652 0008 FB1D     	 add r3,r7,#7
 653 000a 1A70     	 strb r2,[r3]
 794:../GPIO.h     ****     PORT1->IOCR0 &= ~0x00f80000UL;
 654              	 .loc 2 794 0
 655 000c 084B     	 ldr r3,.L39
 656 000e 084A     	 ldr r2,.L39
 657 0010 1269     	 ldr r2,[r2,#16]
 658 0012 0849     	 ldr r1,.L39+4
 659 0014 0A40     	 and r2,r1
 660 0016 1A61     	 str r2,[r3,#16]
 795:../GPIO.h     ****     PORT1->IOCR0 |= mode << 16;
 661              	 .loc 2 795 0
 662 0018 054B     	 ldr r3,.L39
 663 001a 054A     	 ldr r2,.L39
 664 001c 1269     	 ldr r2,[r2,#16]
 665 001e F91D     	 add r1,r7,#7
 666 0020 0978     	 ldrb r1,[r1]
 667 0022 0904     	 lsl r1,r1,#16
 668 0024 0A43     	 orr r2,r1
 669 0026 1A61     	 str r2,[r3,#16]
 796:../GPIO.h     **** }
 670              	 .loc 2 796 0
 671 0028 BD46     	 mov sp,r7
 672 002a 02B0     	 add sp,sp,#8
 673              	 
 674 002c 80BD     	 pop {r7,pc}
 675              	.L40:
 676 002e C046     	 .align 2
 677              	.L39:
 678 0030 00010440 	 .word 1074004224
 679 0034 FFFF07FF 	 .word -16252929
 680              	 .cfi_endproc
 681              	.LFE214:
 683              	 .section .text.P1_3_set_mode,"ax",%progbits
 684              	 .align 2
 685              	 .code 16
 686              	 .thumb_func
 688              	P1_3_set_mode:
 689              	.LFB224:
 797:../GPIO.h     **** 
 798:../GPIO.h     **** __STATIC_INLINE void P1_2_set_hwsel(uint32_t config){
 799:../GPIO.h     ****     PORT1->HWSEL &= ~0x00000030UL;
 800:../GPIO.h     ****     PORT1->HWSEL |= config << 4;
 801:../GPIO.h     **** }
 802:../GPIO.h     **** 
 803:../GPIO.h     **** __STATIC_INLINE void P1_2_set_standard_hysteresis(){
 804:../GPIO.h     ****     PORT1->PHCR0 &= ~0x00000400UL;
 805:../GPIO.h     **** }
 806:../GPIO.h     **** 
 807:../GPIO.h     **** __STATIC_INLINE void P1_2_set_large_hysteresis(){
 808:../GPIO.h     ****     PORT1->PHCR0 |= 0x00000400UL;
 809:../GPIO.h     **** }
 810:../GPIO.h     **** 
 811:../GPIO.h     **** __STATIC_INLINE void P1_2_set(void){
 812:../GPIO.h     ****     PORT1->OMR = 0x00000004UL;
 813:../GPIO.h     **** }
 814:../GPIO.h     **** 
 815:../GPIO.h     **** __STATIC_INLINE void P1_2_reset(void){
 816:../GPIO.h     ****     PORT1->OMR = 0x00040000UL;
 817:../GPIO.h     **** }
 818:../GPIO.h     **** 
 819:../GPIO.h     **** __STATIC_INLINE void P1_2_toggle(void){
 820:../GPIO.h     ****     PORT1->OMR = 0x00040004UL;
 821:../GPIO.h     **** }
 822:../GPIO.h     **** 
 823:../GPIO.h     **** __STATIC_INLINE uint32_t P1_2_read(void){
 824:../GPIO.h     ****     return(PORT1->IN & 0x00000004UL);
 825:../GPIO.h     **** }
 826:../GPIO.h     **** 
 827:../GPIO.h     **** __STATIC_INLINE void P1_2_enable_pps(void){
 828:../GPIO.h     ****     PORT1->PPS |= 0x00000004UL;
 829:../GPIO.h     **** }
 830:../GPIO.h     **** 
 831:../GPIO.h     **** __STATIC_INLINE void P1_2_disable_pps(void){
 832:../GPIO.h     ****     PORT1->PPS &= ~0x00000004UL;
 833:../GPIO.h     **** }
 834:../GPIO.h     **** 
 835:../GPIO.h     **** __STATIC_INLINE void P1_3_set_mode(uint8_t mode){
 690              	 .loc 2 835 0
 691              	 .cfi_startproc
 692 0000 80B5     	 push {r7,lr}
 693              	.LCFI33:
 694              	 .cfi_def_cfa_offset 8
 695              	 .cfi_offset 7,-8
 696              	 .cfi_offset 14,-4
 697 0002 82B0     	 sub sp,sp,#8
 698              	.LCFI34:
 699              	 .cfi_def_cfa_offset 16
 700 0004 00AF     	 add r7,sp,#0
 701              	.LCFI35:
 702              	 .cfi_def_cfa_register 7
 703 0006 021C     	 mov r2,r0
 704 0008 FB1D     	 add r3,r7,#7
 705 000a 1A70     	 strb r2,[r3]
 836:../GPIO.h     ****     PORT1->IOCR0 &= ~0xf8000000UL;
 706              	 .loc 2 836 0
 707 000c 084B     	 ldr r3,.L42
 708 000e 084A     	 ldr r2,.L42
 709 0010 1269     	 ldr r2,[r2,#16]
 710 0012 5201     	 lsl r2,r2,#5
 711 0014 5209     	 lsr r2,r2,#5
 712 0016 1A61     	 str r2,[r3,#16]
 837:../GPIO.h     ****     PORT1->IOCR0 |= mode << 24;
 713              	 .loc 2 837 0
 714 0018 054B     	 ldr r3,.L42
 715 001a 054A     	 ldr r2,.L42
 716 001c 1269     	 ldr r2,[r2,#16]
 717 001e F91D     	 add r1,r7,#7
 718 0020 0978     	 ldrb r1,[r1]
 719 0022 0906     	 lsl r1,r1,#24
 720 0024 0A43     	 orr r2,r1
 721 0026 1A61     	 str r2,[r3,#16]
 838:../GPIO.h     **** }
 722              	 .loc 2 838 0
 723 0028 BD46     	 mov sp,r7
 724 002a 02B0     	 add sp,sp,#8
 725              	 
 726 002c 80BD     	 pop {r7,pc}
 727              	.L43:
 728 002e C046     	 .align 2
 729              	.L42:
 730 0030 00010440 	 .word 1074004224
 731              	 .cfi_endproc
 732              	.LFE224:
 734              	 .section .text.P1_4_set_mode,"ax",%progbits
 735              	 .align 2
 736              	 .code 16
 737              	 .thumb_func
 739              	P1_4_set_mode:
 740              	.LFB234:
 839:../GPIO.h     **** 
 840:../GPIO.h     **** __STATIC_INLINE void P1_3_set_hwsel(uint32_t config){
 841:../GPIO.h     ****     PORT1->HWSEL &= ~0x000000c0UL;
 842:../GPIO.h     ****     PORT1->HWSEL |= config << 6;
 843:../GPIO.h     **** }
 844:../GPIO.h     **** 
 845:../GPIO.h     **** __STATIC_INLINE void P1_3_set_standard_hysteresis(){
 846:../GPIO.h     ****     PORT1->PHCR0 &= ~0x00004000UL;
 847:../GPIO.h     **** }
 848:../GPIO.h     **** 
 849:../GPIO.h     **** __STATIC_INLINE void P1_3_set_large_hysteresis(){
 850:../GPIO.h     ****     PORT1->PHCR0 |= 0x00004000UL;
 851:../GPIO.h     **** }
 852:../GPIO.h     **** 
 853:../GPIO.h     **** __STATIC_INLINE void P1_3_set(void){
 854:../GPIO.h     ****     PORT1->OMR = 0x00000008UL;
 855:../GPIO.h     **** }
 856:../GPIO.h     **** 
 857:../GPIO.h     **** __STATIC_INLINE void P1_3_reset(void){
 858:../GPIO.h     ****     PORT1->OMR = 0x00080000UL;
 859:../GPIO.h     **** }
 860:../GPIO.h     **** 
 861:../GPIO.h     **** __STATIC_INLINE void P1_3_toggle(void){
 862:../GPIO.h     ****     PORT1->OMR = 0x00080008UL;
 863:../GPIO.h     **** }
 864:../GPIO.h     **** 
 865:../GPIO.h     **** __STATIC_INLINE uint32_t P1_3_read(void){
 866:../GPIO.h     ****     return(PORT1->IN & 0x00000008UL);
 867:../GPIO.h     **** }
 868:../GPIO.h     **** 
 869:../GPIO.h     **** __STATIC_INLINE void P1_3_enable_pps(void){
 870:../GPIO.h     ****     PORT1->PPS |= 0x00000008UL;
 871:../GPIO.h     **** }
 872:../GPIO.h     **** 
 873:../GPIO.h     **** __STATIC_INLINE void P1_3_disable_pps(void){
 874:../GPIO.h     ****     PORT1->PPS &= ~0x00000008UL;
 875:../GPIO.h     **** }
 876:../GPIO.h     **** 
 877:../GPIO.h     **** __STATIC_INLINE void P1_4_set_mode(uint8_t mode){
 741              	 .loc 2 877 0
 742              	 .cfi_startproc
 743 0000 80B5     	 push {r7,lr}
 744              	.LCFI36:
 745              	 .cfi_def_cfa_offset 8
 746              	 .cfi_offset 7,-8
 747              	 .cfi_offset 14,-4
 748 0002 82B0     	 sub sp,sp,#8
 749              	.LCFI37:
 750              	 .cfi_def_cfa_offset 16
 751 0004 00AF     	 add r7,sp,#0
 752              	.LCFI38:
 753              	 .cfi_def_cfa_register 7
 754 0006 021C     	 mov r2,r0
 755 0008 FB1D     	 add r3,r7,#7
 756 000a 1A70     	 strb r2,[r3]
 878:../GPIO.h     ****     PORT1->IOCR4 &= ~0x000000f8UL;
 757              	 .loc 2 878 0
 758 000c 074B     	 ldr r3,.L45
 759 000e 074A     	 ldr r2,.L45
 760 0010 5269     	 ldr r2,[r2,#20]
 761 0012 F821     	 mov r1,#248
 762 0014 8A43     	 bic r2,r1
 763 0016 5A61     	 str r2,[r3,#20]
 879:../GPIO.h     ****     PORT1->IOCR4 |= mode << 0;
 764              	 .loc 2 879 0
 765 0018 044B     	 ldr r3,.L45
 766 001a 044A     	 ldr r2,.L45
 767 001c 5169     	 ldr r1,[r2,#20]
 768 001e FA1D     	 add r2,r7,#7
 769 0020 1278     	 ldrb r2,[r2]
 770 0022 0A43     	 orr r2,r1
 771 0024 5A61     	 str r2,[r3,#20]
 880:../GPIO.h     **** }
 772              	 .loc 2 880 0
 773 0026 BD46     	 mov sp,r7
 774 0028 02B0     	 add sp,sp,#8
 775              	 
 776 002a 80BD     	 pop {r7,pc}
 777              	.L46:
 778              	 .align 2
 779              	.L45:
 780 002c 00010440 	 .word 1074004224
 781              	 .cfi_endproc
 782              	.LFE234:
 784              	 .section .text.P1_5_set_mode,"ax",%progbits
 785              	 .align 2
 786              	 .code 16
 787              	 .thumb_func
 789              	P1_5_set_mode:
 790              	.LFB244:
 881:../GPIO.h     **** 
 882:../GPIO.h     **** __STATIC_INLINE void P1_4_set_hwsel(uint32_t config){
 883:../GPIO.h     ****     PORT1->HWSEL &= ~0x00000300UL;
 884:../GPIO.h     ****     PORT1->HWSEL |= config << 8;
 885:../GPIO.h     **** }
 886:../GPIO.h     **** 
 887:../GPIO.h     **** __STATIC_INLINE void P1_4_set_standard_hysteresis(){
 888:../GPIO.h     ****     PORT1->PHCR0 &= ~0x00040000UL;
 889:../GPIO.h     **** }
 890:../GPIO.h     **** 
 891:../GPIO.h     **** __STATIC_INLINE void P1_4_set_large_hysteresis(){
 892:../GPIO.h     ****     PORT1->PHCR0 |= 0x00040000UL;
 893:../GPIO.h     **** }
 894:../GPIO.h     **** 
 895:../GPIO.h     **** __STATIC_INLINE void P1_4_set(void){
 896:../GPIO.h     ****     PORT1->OMR = 0x00000010UL;
 897:../GPIO.h     **** }
 898:../GPIO.h     **** 
 899:../GPIO.h     **** __STATIC_INLINE void P1_4_reset(void){
 900:../GPIO.h     ****     PORT1->OMR = 0x00100000UL;
 901:../GPIO.h     **** }
 902:../GPIO.h     **** 
 903:../GPIO.h     **** __STATIC_INLINE void P1_4_toggle(void){
 904:../GPIO.h     ****     PORT1->OMR = 0x00100010UL;
 905:../GPIO.h     **** }
 906:../GPIO.h     **** 
 907:../GPIO.h     **** __STATIC_INLINE uint32_t P1_4_read(void){
 908:../GPIO.h     ****     return(PORT1->IN & 0x00000010UL);
 909:../GPIO.h     **** }
 910:../GPIO.h     **** 
 911:../GPIO.h     **** __STATIC_INLINE void P1_4_enable_pps(void){
 912:../GPIO.h     ****     PORT1->PPS |= 0x00000010UL;
 913:../GPIO.h     **** }
 914:../GPIO.h     **** 
 915:../GPIO.h     **** __STATIC_INLINE void P1_4_disable_pps(void){
 916:../GPIO.h     ****     PORT1->PPS &= ~0x00000010UL;
 917:../GPIO.h     **** }
 918:../GPIO.h     **** 
 919:../GPIO.h     **** __STATIC_INLINE void P1_5_set_mode(uint8_t mode){
 791              	 .loc 2 919 0
 792              	 .cfi_startproc
 793 0000 80B5     	 push {r7,lr}
 794              	.LCFI39:
 795              	 .cfi_def_cfa_offset 8
 796              	 .cfi_offset 7,-8
 797              	 .cfi_offset 14,-4
 798 0002 82B0     	 sub sp,sp,#8
 799              	.LCFI40:
 800              	 .cfi_def_cfa_offset 16
 801 0004 00AF     	 add r7,sp,#0
 802              	.LCFI41:
 803              	 .cfi_def_cfa_register 7
 804 0006 021C     	 mov r2,r0
 805 0008 FB1D     	 add r3,r7,#7
 806 000a 1A70     	 strb r2,[r3]
 920:../GPIO.h     ****     PORT1->IOCR4 &= ~0x0000f800UL;
 807              	 .loc 2 920 0
 808 000c 084B     	 ldr r3,.L48
 809 000e 084A     	 ldr r2,.L48
 810 0010 5269     	 ldr r2,[r2,#20]
 811 0012 0849     	 ldr r1,.L48+4
 812 0014 0A40     	 and r2,r1
 813 0016 5A61     	 str r2,[r3,#20]
 921:../GPIO.h     ****     PORT1->IOCR4 |= mode << 8;
 814              	 .loc 2 921 0
 815 0018 054B     	 ldr r3,.L48
 816 001a 054A     	 ldr r2,.L48
 817 001c 5269     	 ldr r2,[r2,#20]
 818 001e F91D     	 add r1,r7,#7
 819 0020 0978     	 ldrb r1,[r1]
 820 0022 0902     	 lsl r1,r1,#8
 821 0024 0A43     	 orr r2,r1
 822 0026 5A61     	 str r2,[r3,#20]
 922:../GPIO.h     **** }
 823              	 .loc 2 922 0
 824 0028 BD46     	 mov sp,r7
 825 002a 02B0     	 add sp,sp,#8
 826              	 
 827 002c 80BD     	 pop {r7,pc}
 828              	.L49:
 829 002e C046     	 .align 2
 830              	.L48:
 831 0030 00010440 	 .word 1074004224
 832 0034 FF07FFFF 	 .word -63489
 833              	 .cfi_endproc
 834              	.LFE244:
 836              	 .section .text.P2_1_set,"ax",%progbits
 837              	 .align 2
 838              	 .code 16
 839              	 .thumb_func
 841              	P2_1_set:
 842              	.LFB272:
 923:../GPIO.h     **** 
 924:../GPIO.h     **** __STATIC_INLINE void P1_5_set_hwsel(uint32_t config){
 925:../GPIO.h     ****     PORT1->HWSEL &= ~0x00000c00UL;
 926:../GPIO.h     ****     PORT1->HWSEL |= config << 10;
 927:../GPIO.h     **** }
 928:../GPIO.h     **** 
 929:../GPIO.h     **** __STATIC_INLINE void P1_5_set_standard_hysteresis(){
 930:../GPIO.h     ****     PORT1->PHCR0 &= ~0x00400000UL;
 931:../GPIO.h     **** }
 932:../GPIO.h     **** 
 933:../GPIO.h     **** __STATIC_INLINE void P1_5_set_large_hysteresis(){
 934:../GPIO.h     ****     PORT1->PHCR0 |= 0x00400000UL;
 935:../GPIO.h     **** }
 936:../GPIO.h     **** 
 937:../GPIO.h     **** __STATIC_INLINE void P1_5_set(void){
 938:../GPIO.h     ****     PORT1->OMR = 0x00000020UL;
 939:../GPIO.h     **** }
 940:../GPIO.h     **** 
 941:../GPIO.h     **** __STATIC_INLINE void P1_5_reset(void){
 942:../GPIO.h     ****     PORT1->OMR = 0x00200000UL;
 943:../GPIO.h     **** }
 944:../GPIO.h     **** 
 945:../GPIO.h     **** __STATIC_INLINE void P1_5_toggle(void){
 946:../GPIO.h     ****     PORT1->OMR = 0x00200020UL;
 947:../GPIO.h     **** }
 948:../GPIO.h     **** 
 949:../GPIO.h     **** __STATIC_INLINE uint32_t P1_5_read(void){
 950:../GPIO.h     ****     return(PORT1->IN & 0x00000020UL);
 951:../GPIO.h     **** }
 952:../GPIO.h     **** 
 953:../GPIO.h     **** __STATIC_INLINE void P1_5_enable_pps(void){
 954:../GPIO.h     ****     PORT1->PPS |= 0x00000020UL;
 955:../GPIO.h     **** }
 956:../GPIO.h     **** 
 957:../GPIO.h     **** __STATIC_INLINE void P1_5_disable_pps(void){
 958:../GPIO.h     ****     PORT1->PPS &= ~0x00000020UL;
 959:../GPIO.h     **** }
 960:../GPIO.h     **** 
 961:../GPIO.h     **** __STATIC_INLINE void P2_0_set_mode(uint8_t mode){
 962:../GPIO.h     ****     PORT2->IOCR0 &= ~0x000000f8UL;
 963:../GPIO.h     ****     PORT2->IOCR0 |= mode << 0;
 964:../GPIO.h     **** }
 965:../GPIO.h     **** 
 966:../GPIO.h     **** __STATIC_INLINE void P2_0_set_hwsel(uint32_t config){
 967:../GPIO.h     ****     PORT2->HWSEL &= ~0x00000003UL;
 968:../GPIO.h     ****     PORT2->HWSEL |= config << 0;
 969:../GPIO.h     **** }
 970:../GPIO.h     **** 
 971:../GPIO.h     **** __STATIC_INLINE void P2_0_set_standard_hysteresis(){
 972:../GPIO.h     ****     PORT2->PHCR0 &= ~0x00000004UL;
 973:../GPIO.h     **** }
 974:../GPIO.h     **** 
 975:../GPIO.h     **** __STATIC_INLINE void P2_0_set_large_hysteresis(){
 976:../GPIO.h     ****     PORT2->PHCR0 |= 0x00000004UL;
 977:../GPIO.h     **** }
 978:../GPIO.h     **** 
 979:../GPIO.h     **** __STATIC_INLINE void P2_0_enable_digital(void){
 980:../GPIO.h     ****     PORT2->PDISC &= ~0x00000001UL;
 981:../GPIO.h     **** }
 982:../GPIO.h     **** 
 983:../GPIO.h     **** __STATIC_INLINE void P2_0_disable_digital(void){
 984:../GPIO.h     ****     PORT2->PDISC |= 0x00000001UL;
 985:../GPIO.h     **** }
 986:../GPIO.h     **** 
 987:../GPIO.h     **** __STATIC_INLINE void P2_0_set(void){
 988:../GPIO.h     ****     PORT2->OMR = 0x00000001UL;
 989:../GPIO.h     **** }
 990:../GPIO.h     **** 
 991:../GPIO.h     **** __STATIC_INLINE void P2_0_reset(void){
 992:../GPIO.h     ****     PORT2->OMR = 0x00010000UL;
 993:../GPIO.h     **** }
 994:../GPIO.h     **** 
 995:../GPIO.h     **** __STATIC_INLINE void P2_0_toggle(void){
 996:../GPIO.h     ****     PORT2->OMR = 0x00010001UL;
 997:../GPIO.h     **** }
 998:../GPIO.h     **** 
 999:../GPIO.h     **** __STATIC_INLINE uint32_t P2_0_read(void){
1000:../GPIO.h     ****     return(PORT2->IN & 0x00000001UL);
1001:../GPIO.h     **** }
1002:../GPIO.h     **** 
1003:../GPIO.h     **** __STATIC_INLINE void P2_0_enable_pps(void){
1004:../GPIO.h     ****     PORT2->PPS |= 0x00000001UL;
1005:../GPIO.h     **** }
1006:../GPIO.h     **** 
1007:../GPIO.h     **** __STATIC_INLINE void P2_0_disable_pps(void){
1008:../GPIO.h     ****     PORT2->PPS &= ~0x00000001UL;
1009:../GPIO.h     **** }
1010:../GPIO.h     **** 
1011:../GPIO.h     **** __STATIC_INLINE void P2_1_set_mode(uint8_t mode){
1012:../GPIO.h     ****     PORT2->IOCR0 &= ~0x0000f800UL;
1013:../GPIO.h     ****     PORT2->IOCR0 |= mode << 8;
1014:../GPIO.h     **** }
1015:../GPIO.h     **** 
1016:../GPIO.h     **** __STATIC_INLINE void P2_1_set_hwsel(uint32_t config){
1017:../GPIO.h     ****     PORT2->HWSEL &= ~0x0000000cUL;
1018:../GPIO.h     ****     PORT2->HWSEL |= config << 2;
1019:../GPIO.h     **** }
1020:../GPIO.h     **** 
1021:../GPIO.h     **** __STATIC_INLINE void P2_1_set_standard_hysteresis(){
1022:../GPIO.h     ****     PORT2->PHCR0 &= ~0x00000040UL;
1023:../GPIO.h     **** }
1024:../GPIO.h     **** 
1025:../GPIO.h     **** __STATIC_INLINE void P2_1_set_large_hysteresis(){
1026:../GPIO.h     ****     PORT2->PHCR0 |= 0x00000040UL;
1027:../GPIO.h     **** }
1028:../GPIO.h     **** 
1029:../GPIO.h     **** __STATIC_INLINE void P2_1_enable_digital(void){
1030:../GPIO.h     ****     PORT2->PDISC &= ~0x00000002UL;
1031:../GPIO.h     **** }
1032:../GPIO.h     **** 
1033:../GPIO.h     **** __STATIC_INLINE void P2_1_disable_digital(void){
1034:../GPIO.h     ****     PORT2->PDISC |= 0x00000002UL;
1035:../GPIO.h     **** }
1036:../GPIO.h     **** 
1037:../GPIO.h     **** __STATIC_INLINE void P2_1_set(void){
 843              	 .loc 2 1037 0
 844              	 .cfi_startproc
 845 0000 80B5     	 push {r7,lr}
 846              	.LCFI42:
 847              	 .cfi_def_cfa_offset 8
 848              	 .cfi_offset 7,-8
 849              	 .cfi_offset 14,-4
 850 0002 00AF     	 add r7,sp,#0
 851              	.LCFI43:
 852              	 .cfi_def_cfa_register 7
1038:../GPIO.h     ****     PORT2->OMR = 0x00000002UL;
 853              	 .loc 2 1038 0
 854 0004 024B     	 ldr r3,.L51
 855 0006 0222     	 mov r2,#2
 856 0008 5A60     	 str r2,[r3,#4]
1039:../GPIO.h     **** }
 857              	 .loc 2 1039 0
 858 000a BD46     	 mov sp,r7
 859              	 
 860 000c 80BD     	 pop {r7,pc}
 861              	.L52:
 862 000e C046     	 .align 2
 863              	.L51:
 864 0010 00020440 	 .word 1074004480
 865              	 .cfi_endproc
 866              	.LFE272:
 868              	 .section .text.P2_2_set_mode,"ax",%progbits
 869              	 .align 2
 870              	 .code 16
 871              	 .thumb_func
 873              	P2_2_set_mode:
 874              	.LFB278:
1040:../GPIO.h     **** 
1041:../GPIO.h     **** __STATIC_INLINE void P2_1_reset(void){
1042:../GPIO.h     ****     PORT2->OMR = 0x00020000UL;
1043:../GPIO.h     **** }
1044:../GPIO.h     **** 
1045:../GPIO.h     **** __STATIC_INLINE void P2_1_toggle(void){
1046:../GPIO.h     ****     PORT2->OMR = 0x00020002UL;
1047:../GPIO.h     **** }
1048:../GPIO.h     **** 
1049:../GPIO.h     **** __STATIC_INLINE uint32_t P2_1_read(void){
1050:../GPIO.h     ****     return(PORT2->IN & 0x00000002UL);
1051:../GPIO.h     **** }
1052:../GPIO.h     **** 
1053:../GPIO.h     **** __STATIC_INLINE void P2_1_enable_pps(void){
1054:../GPIO.h     ****     PORT2->PPS |= 0x00000002UL;
1055:../GPIO.h     **** }
1056:../GPIO.h     **** 
1057:../GPIO.h     **** __STATIC_INLINE void P2_1_disable_pps(void){
1058:../GPIO.h     ****     PORT2->PPS &= ~0x00000002UL;
1059:../GPIO.h     **** }
1060:../GPIO.h     **** 
1061:../GPIO.h     **** __STATIC_INLINE void P2_2_set_mode(uint8_t mode){
 875              	 .loc 2 1061 0
 876              	 .cfi_startproc
 877 0000 80B5     	 push {r7,lr}
 878              	.LCFI44:
 879              	 .cfi_def_cfa_offset 8
 880              	 .cfi_offset 7,-8
 881              	 .cfi_offset 14,-4
 882 0002 82B0     	 sub sp,sp,#8
 883              	.LCFI45:
 884              	 .cfi_def_cfa_offset 16
 885 0004 00AF     	 add r7,sp,#0
 886              	.LCFI46:
 887              	 .cfi_def_cfa_register 7
 888 0006 021C     	 mov r2,r0
 889 0008 FB1D     	 add r3,r7,#7
 890 000a 1A70     	 strb r2,[r3]
1062:../GPIO.h     ****     PORT2->IOCR0 &= ~0x00f80000UL;
 891              	 .loc 2 1062 0
 892 000c 084B     	 ldr r3,.L54
 893 000e 084A     	 ldr r2,.L54
 894 0010 1269     	 ldr r2,[r2,#16]
 895 0012 0849     	 ldr r1,.L54+4
 896 0014 0A40     	 and r2,r1
 897 0016 1A61     	 str r2,[r3,#16]
1063:../GPIO.h     ****     PORT2->IOCR0 |= mode << 16;
 898              	 .loc 2 1063 0
 899 0018 054B     	 ldr r3,.L54
 900 001a 054A     	 ldr r2,.L54
 901 001c 1269     	 ldr r2,[r2,#16]
 902 001e F91D     	 add r1,r7,#7
 903 0020 0978     	 ldrb r1,[r1]
 904 0022 0904     	 lsl r1,r1,#16
 905 0024 0A43     	 orr r2,r1
 906 0026 1A61     	 str r2,[r3,#16]
1064:../GPIO.h     **** }
 907              	 .loc 2 1064 0
 908 0028 BD46     	 mov sp,r7
 909 002a 02B0     	 add sp,sp,#8
 910              	 
 911 002c 80BD     	 pop {r7,pc}
 912              	.L55:
 913 002e C046     	 .align 2
 914              	.L54:
 915 0030 00020440 	 .word 1074004480
 916 0034 FFFF07FF 	 .word -16252929
 917              	 .cfi_endproc
 918              	.LFE278:
 920              	 .section .text.P2_2_reset,"ax",%progbits
 921              	 .align 2
 922              	 .code 16
 923              	 .thumb_func
 925              	P2_2_reset:
 926              	.LFB285:
1065:../GPIO.h     **** 
1066:../GPIO.h     **** __STATIC_INLINE void P2_2_set_hwsel(uint32_t config){
1067:../GPIO.h     ****     PORT2->HWSEL &= ~0x00000030UL;
1068:../GPIO.h     ****     PORT2->HWSEL |= config << 4;
1069:../GPIO.h     **** }
1070:../GPIO.h     **** 
1071:../GPIO.h     **** __STATIC_INLINE void P2_2_set_standard_hysteresis(){
1072:../GPIO.h     ****     PORT2->PHCR0 &= ~0x00000400UL;
1073:../GPIO.h     **** }
1074:../GPIO.h     **** 
1075:../GPIO.h     **** __STATIC_INLINE void P2_2_set_large_hysteresis(){
1076:../GPIO.h     ****     PORT2->PHCR0 |= 0x00000400UL;
1077:../GPIO.h     **** }
1078:../GPIO.h     **** 
1079:../GPIO.h     **** __STATIC_INLINE void P2_2_enable_digital(void){
1080:../GPIO.h     ****     PORT2->PDISC &= ~0x00000004UL;
1081:../GPIO.h     **** }
1082:../GPIO.h     **** 
1083:../GPIO.h     **** __STATIC_INLINE void P2_2_disable_digital(void){
1084:../GPIO.h     ****     PORT2->PDISC |= 0x00000004UL;
1085:../GPIO.h     **** }
1086:../GPIO.h     **** 
1087:../GPIO.h     **** __STATIC_INLINE void P2_2_set(void){
1088:../GPIO.h     ****     PORT2->OMR = 0x00000004UL;
1089:../GPIO.h     **** }
1090:../GPIO.h     **** 
1091:../GPIO.h     **** __STATIC_INLINE void P2_2_reset(void){
 927              	 .loc 2 1091 0
 928              	 .cfi_startproc
 929 0000 80B5     	 push {r7,lr}
 930              	.LCFI47:
 931              	 .cfi_def_cfa_offset 8
 932              	 .cfi_offset 7,-8
 933              	 .cfi_offset 14,-4
 934 0002 00AF     	 add r7,sp,#0
 935              	.LCFI48:
 936              	 .cfi_def_cfa_register 7
1092:../GPIO.h     ****     PORT2->OMR = 0x00040000UL;
 937              	 .loc 2 1092 0
 938 0004 024B     	 ldr r3,.L57
 939 0006 8022     	 mov r2,#128
 940 0008 D202     	 lsl r2,r2,#11
 941 000a 5A60     	 str r2,[r3,#4]
1093:../GPIO.h     **** }
 942              	 .loc 2 1093 0
 943 000c BD46     	 mov sp,r7
 944              	 
 945 000e 80BD     	 pop {r7,pc}
 946              	.L58:
 947              	 .align 2
 948              	.L57:
 949 0010 00020440 	 .word 1074004480
 950              	 .cfi_endproc
 951              	.LFE285:
 953              	 .section .text.P2_3_set_mode,"ax",%progbits
 954              	 .align 2
 955              	 .code 16
 956              	 .thumb_func
 958              	P2_3_set_mode:
 959              	.LFB290:
1094:../GPIO.h     **** 
1095:../GPIO.h     **** __STATIC_INLINE void P2_2_toggle(void){
1096:../GPIO.h     ****     PORT2->OMR = 0x00040004UL;
1097:../GPIO.h     **** }
1098:../GPIO.h     **** 
1099:../GPIO.h     **** __STATIC_INLINE uint32_t P2_2_read(void){
1100:../GPIO.h     ****     return(PORT2->IN & 0x00000004UL);
1101:../GPIO.h     **** }
1102:../GPIO.h     **** 
1103:../GPIO.h     **** __STATIC_INLINE void P2_2_enable_pps(void){
1104:../GPIO.h     ****     PORT2->PPS |= 0x00000004UL;
1105:../GPIO.h     **** }
1106:../GPIO.h     **** 
1107:../GPIO.h     **** __STATIC_INLINE void P2_2_disable_pps(void){
1108:../GPIO.h     ****     PORT2->PPS &= ~0x00000004UL;
1109:../GPIO.h     **** }
1110:../GPIO.h     **** 
1111:../GPIO.h     **** __STATIC_INLINE void P2_3_set_mode(uint8_t mode){
 960              	 .loc 2 1111 0
 961              	 .cfi_startproc
 962 0000 80B5     	 push {r7,lr}
 963              	.LCFI49:
 964              	 .cfi_def_cfa_offset 8
 965              	 .cfi_offset 7,-8
 966              	 .cfi_offset 14,-4
 967 0002 82B0     	 sub sp,sp,#8
 968              	.LCFI50:
 969              	 .cfi_def_cfa_offset 16
 970 0004 00AF     	 add r7,sp,#0
 971              	.LCFI51:
 972              	 .cfi_def_cfa_register 7
 973 0006 021C     	 mov r2,r0
 974 0008 FB1D     	 add r3,r7,#7
 975 000a 1A70     	 strb r2,[r3]
1112:../GPIO.h     ****     PORT2->IOCR0 &= ~0xf8000000UL;
 976              	 .loc 2 1112 0
 977 000c 084B     	 ldr r3,.L60
 978 000e 084A     	 ldr r2,.L60
 979 0010 1269     	 ldr r2,[r2,#16]
 980 0012 5201     	 lsl r2,r2,#5
 981 0014 5209     	 lsr r2,r2,#5
 982 0016 1A61     	 str r2,[r3,#16]
1113:../GPIO.h     ****     PORT2->IOCR0 |= mode << 24;
 983              	 .loc 2 1113 0
 984 0018 054B     	 ldr r3,.L60
 985 001a 054A     	 ldr r2,.L60
 986 001c 1269     	 ldr r2,[r2,#16]
 987 001e F91D     	 add r1,r7,#7
 988 0020 0978     	 ldrb r1,[r1]
 989 0022 0906     	 lsl r1,r1,#24
 990 0024 0A43     	 orr r2,r1
 991 0026 1A61     	 str r2,[r3,#16]
1114:../GPIO.h     **** }
 992              	 .loc 2 1114 0
 993 0028 BD46     	 mov sp,r7
 994 002a 02B0     	 add sp,sp,#8
 995              	 
 996 002c 80BD     	 pop {r7,pc}
 997              	.L61:
 998 002e C046     	 .align 2
 999              	.L60:
 1000 0030 00020440 	 .word 1074004480
 1001              	 .cfi_endproc
 1002              	.LFE290:
 1004              	 .section .text.P2_3_set,"ax",%progbits
 1005              	 .align 2
 1006              	 .code 16
 1007              	 .thumb_func
 1009              	P2_3_set:
 1010              	.LFB296:
1115:../GPIO.h     **** 
1116:../GPIO.h     **** __STATIC_INLINE void P2_3_set_hwsel(uint32_t config){
1117:../GPIO.h     ****     PORT2->HWSEL &= ~0x000000c0UL;
1118:../GPIO.h     ****     PORT2->HWSEL |= config << 6;
1119:../GPIO.h     **** }
1120:../GPIO.h     **** 
1121:../GPIO.h     **** __STATIC_INLINE void P2_3_set_standard_hysteresis(){
1122:../GPIO.h     ****     PORT2->PHCR0 &= ~0x00004000UL;
1123:../GPIO.h     **** }
1124:../GPIO.h     **** 
1125:../GPIO.h     **** __STATIC_INLINE void P2_3_set_large_hysteresis(){
1126:../GPIO.h     ****     PORT2->PHCR0 |= 0x00004000UL;
1127:../GPIO.h     **** }
1128:../GPIO.h     **** 
1129:../GPIO.h     **** __STATIC_INLINE void P2_3_enable_digital(void){
1130:../GPIO.h     ****     PORT2->PDISC &= ~0x00000008UL;
1131:../GPIO.h     **** }
1132:../GPIO.h     **** 
1133:../GPIO.h     **** __STATIC_INLINE void P2_3_disable_digital(void){
1134:../GPIO.h     ****     PORT2->PDISC |= 0x00000008UL;
1135:../GPIO.h     **** }
1136:../GPIO.h     **** 
1137:../GPIO.h     **** __STATIC_INLINE void P2_3_set(void){
 1011              	 .loc 2 1137 0
 1012              	 .cfi_startproc
 1013 0000 80B5     	 push {r7,lr}
 1014              	.LCFI52:
 1015              	 .cfi_def_cfa_offset 8
 1016              	 .cfi_offset 7,-8
 1017              	 .cfi_offset 14,-4
 1018 0002 00AF     	 add r7,sp,#0
 1019              	.LCFI53:
 1020              	 .cfi_def_cfa_register 7
1138:../GPIO.h     ****     PORT2->OMR = 0x00000008UL;
 1021              	 .loc 2 1138 0
 1022 0004 024B     	 ldr r3,.L63
 1023 0006 0822     	 mov r2,#8
 1024 0008 5A60     	 str r2,[r3,#4]
1139:../GPIO.h     **** }
 1025              	 .loc 2 1139 0
 1026 000a BD46     	 mov sp,r7
 1027              	 
 1028 000c 80BD     	 pop {r7,pc}
 1029              	.L64:
 1030 000e C046     	 .align 2
 1031              	.L63:
 1032 0010 00020440 	 .word 1074004480
 1033              	 .cfi_endproc
 1034              	.LFE296:
 1036              	 .section .text.P2_4_set_mode,"ax",%progbits
 1037              	 .align 2
 1038              	 .code 16
 1039              	 .thumb_func
 1041              	P2_4_set_mode:
 1042              	.LFB302:
1140:../GPIO.h     **** 
1141:../GPIO.h     **** __STATIC_INLINE void P2_3_reset(void){
1142:../GPIO.h     ****     PORT2->OMR = 0x00080000UL;
1143:../GPIO.h     **** }
1144:../GPIO.h     **** 
1145:../GPIO.h     **** __STATIC_INLINE void P2_3_toggle(void){
1146:../GPIO.h     ****     PORT2->OMR = 0x00080008UL;
1147:../GPIO.h     **** }
1148:../GPIO.h     **** 
1149:../GPIO.h     **** __STATIC_INLINE uint32_t P2_3_read(void){
1150:../GPIO.h     ****     return(PORT2->IN & 0x00000008UL);
1151:../GPIO.h     **** }
1152:../GPIO.h     **** 
1153:../GPIO.h     **** __STATIC_INLINE void P2_3_enable_pps(void){
1154:../GPIO.h     ****     PORT2->PPS |= 0x00000008UL;
1155:../GPIO.h     **** }
1156:../GPIO.h     **** 
1157:../GPIO.h     **** __STATIC_INLINE void P2_3_disable_pps(void){
1158:../GPIO.h     ****     PORT2->PPS &= ~0x00000008UL;
1159:../GPIO.h     **** }
1160:../GPIO.h     **** 
1161:../GPIO.h     **** __STATIC_INLINE void P2_4_set_mode(uint8_t mode){
 1043              	 .loc 2 1161 0
 1044              	 .cfi_startproc
 1045 0000 80B5     	 push {r7,lr}
 1046              	.LCFI54:
 1047              	 .cfi_def_cfa_offset 8
 1048              	 .cfi_offset 7,-8
 1049              	 .cfi_offset 14,-4
 1050 0002 82B0     	 sub sp,sp,#8
 1051              	.LCFI55:
 1052              	 .cfi_def_cfa_offset 16
 1053 0004 00AF     	 add r7,sp,#0
 1054              	.LCFI56:
 1055              	 .cfi_def_cfa_register 7
 1056 0006 021C     	 mov r2,r0
 1057 0008 FB1D     	 add r3,r7,#7
 1058 000a 1A70     	 strb r2,[r3]
1162:../GPIO.h     ****     PORT2->IOCR4 &= ~0x000000f8UL;
 1059              	 .loc 2 1162 0
 1060 000c 074B     	 ldr r3,.L66
 1061 000e 074A     	 ldr r2,.L66
 1062 0010 5269     	 ldr r2,[r2,#20]
 1063 0012 F821     	 mov r1,#248
 1064 0014 8A43     	 bic r2,r1
 1065 0016 5A61     	 str r2,[r3,#20]
1163:../GPIO.h     ****     PORT2->IOCR4 |= mode << 0;
 1066              	 .loc 2 1163 0
 1067 0018 044B     	 ldr r3,.L66
 1068 001a 044A     	 ldr r2,.L66
 1069 001c 5169     	 ldr r1,[r2,#20]
 1070 001e FA1D     	 add r2,r7,#7
 1071 0020 1278     	 ldrb r2,[r2]
 1072 0022 0A43     	 orr r2,r1
 1073 0024 5A61     	 str r2,[r3,#20]
1164:../GPIO.h     **** }
 1074              	 .loc 2 1164 0
 1075 0026 BD46     	 mov sp,r7
 1076 0028 02B0     	 add sp,sp,#8
 1077              	 
 1078 002a 80BD     	 pop {r7,pc}
 1079              	.L67:
 1080              	 .align 2
 1081              	.L66:
 1082 002c 00020440 	 .word 1074004480
 1083              	 .cfi_endproc
 1084              	.LFE302:
 1086              	 .section .text.P2_5_set_mode,"ax",%progbits
 1087              	 .align 2
 1088              	 .code 16
 1089              	 .thumb_func
 1091              	P2_5_set_mode:
 1092              	.LFB314:
1165:../GPIO.h     **** 
1166:../GPIO.h     **** __STATIC_INLINE void P2_4_set_hwsel(uint32_t config){
1167:../GPIO.h     ****     PORT2->HWSEL &= ~0x00000300UL;
1168:../GPIO.h     ****     PORT2->HWSEL |= config << 8;
1169:../GPIO.h     **** }
1170:../GPIO.h     **** 
1171:../GPIO.h     **** __STATIC_INLINE void P2_4_set_standard_hysteresis(){
1172:../GPIO.h     ****     PORT2->PHCR0 &= ~0x00040000UL;
1173:../GPIO.h     **** }
1174:../GPIO.h     **** 
1175:../GPIO.h     **** __STATIC_INLINE void P2_4_set_large_hysteresis(){
1176:../GPIO.h     ****     PORT2->PHCR0 |= 0x00040000UL;
1177:../GPIO.h     **** }
1178:../GPIO.h     **** 
1179:../GPIO.h     **** __STATIC_INLINE void P2_4_enable_digital(void){
1180:../GPIO.h     ****     PORT2->PDISC &= ~0x00000010UL;
1181:../GPIO.h     **** }
1182:../GPIO.h     **** 
1183:../GPIO.h     **** __STATIC_INLINE void P2_4_disable_digital(void){
1184:../GPIO.h     ****     PORT2->PDISC |= 0x00000010UL;
1185:../GPIO.h     **** }
1186:../GPIO.h     **** 
1187:../GPIO.h     **** __STATIC_INLINE void P2_4_set(void){
1188:../GPIO.h     ****     PORT2->OMR = 0x00000010UL;
1189:../GPIO.h     **** }
1190:../GPIO.h     **** 
1191:../GPIO.h     **** __STATIC_INLINE void P2_4_reset(void){
1192:../GPIO.h     ****     PORT2->OMR = 0x00100000UL;
1193:../GPIO.h     **** }
1194:../GPIO.h     **** 
1195:../GPIO.h     **** __STATIC_INLINE void P2_4_toggle(void){
1196:../GPIO.h     ****     PORT2->OMR = 0x00100010UL;
1197:../GPIO.h     **** }
1198:../GPIO.h     **** 
1199:../GPIO.h     **** __STATIC_INLINE uint32_t P2_4_read(void){
1200:../GPIO.h     ****     return(PORT2->IN & 0x00000010UL);
1201:../GPIO.h     **** }
1202:../GPIO.h     **** 
1203:../GPIO.h     **** __STATIC_INLINE void P2_4_enable_pps(void){
1204:../GPIO.h     ****     PORT2->PPS |= 0x00000010UL;
1205:../GPIO.h     **** }
1206:../GPIO.h     **** 
1207:../GPIO.h     **** __STATIC_INLINE void P2_4_disable_pps(void){
1208:../GPIO.h     ****     PORT2->PPS &= ~0x00000010UL;
1209:../GPIO.h     **** }
1210:../GPIO.h     **** 
1211:../GPIO.h     **** __STATIC_INLINE void P2_5_set_mode(uint8_t mode){
 1093              	 .loc 2 1211 0
 1094              	 .cfi_startproc
 1095 0000 80B5     	 push {r7,lr}
 1096              	.LCFI57:
 1097              	 .cfi_def_cfa_offset 8
 1098              	 .cfi_offset 7,-8
 1099              	 .cfi_offset 14,-4
 1100 0002 82B0     	 sub sp,sp,#8
 1101              	.LCFI58:
 1102              	 .cfi_def_cfa_offset 16
 1103 0004 00AF     	 add r7,sp,#0
 1104              	.LCFI59:
 1105              	 .cfi_def_cfa_register 7
 1106 0006 021C     	 mov r2,r0
 1107 0008 FB1D     	 add r3,r7,#7
 1108 000a 1A70     	 strb r2,[r3]
1212:../GPIO.h     ****     PORT2->IOCR4 &= ~0x0000f800UL;
 1109              	 .loc 2 1212 0
 1110 000c 084B     	 ldr r3,.L69
 1111 000e 084A     	 ldr r2,.L69
 1112 0010 5269     	 ldr r2,[r2,#20]
 1113 0012 0849     	 ldr r1,.L69+4
 1114 0014 0A40     	 and r2,r1
 1115 0016 5A61     	 str r2,[r3,#20]
1213:../GPIO.h     ****     PORT2->IOCR4 |= mode << 8;
 1116              	 .loc 2 1213 0
 1117 0018 054B     	 ldr r3,.L69
 1118 001a 054A     	 ldr r2,.L69
 1119 001c 5269     	 ldr r2,[r2,#20]
 1120 001e F91D     	 add r1,r7,#7
 1121 0020 0978     	 ldrb r1,[r1]
 1122 0022 0902     	 lsl r1,r1,#8
 1123 0024 0A43     	 orr r2,r1
 1124 0026 5A61     	 str r2,[r3,#20]
1214:../GPIO.h     **** }
 1125              	 .loc 2 1214 0
 1126 0028 BD46     	 mov sp,r7
 1127 002a 02B0     	 add sp,sp,#8
 1128              	 
 1129 002c 80BD     	 pop {r7,pc}
 1130              	.L70:
 1131 002e C046     	 .align 2
 1132              	.L69:
 1133 0030 00020440 	 .word 1074004480
 1134 0034 FF07FFFF 	 .word -63489
 1135              	 .cfi_endproc
 1136              	.LFE314:
 1138              	 .section .text.P2_6_set_mode,"ax",%progbits
 1139              	 .align 2
 1140              	 .code 16
 1141              	 .thumb_func
 1143              	P2_6_set_mode:
 1144              	.LFB326:
1215:../GPIO.h     **** 
1216:../GPIO.h     **** __STATIC_INLINE void P2_5_set_hwsel(uint32_t config){
1217:../GPIO.h     ****     PORT2->HWSEL &= ~0x00000c00UL;
1218:../GPIO.h     ****     PORT2->HWSEL |= config << 10;
1219:../GPIO.h     **** }
1220:../GPIO.h     **** 
1221:../GPIO.h     **** __STATIC_INLINE void P2_5_set_standard_hysteresis(){
1222:../GPIO.h     ****     PORT2->PHCR0 &= ~0x00400000UL;
1223:../GPIO.h     **** }
1224:../GPIO.h     **** 
1225:../GPIO.h     **** __STATIC_INLINE void P2_5_set_large_hysteresis(){
1226:../GPIO.h     ****     PORT2->PHCR0 |= 0x00400000UL;
1227:../GPIO.h     **** }
1228:../GPIO.h     **** 
1229:../GPIO.h     **** __STATIC_INLINE void P2_5_enable_digital(void){
1230:../GPIO.h     ****     PORT2->PDISC &= ~0x00000020UL;
1231:../GPIO.h     **** }
1232:../GPIO.h     **** 
1233:../GPIO.h     **** __STATIC_INLINE void P2_5_disable_digital(void){
1234:../GPIO.h     ****     PORT2->PDISC |= 0x00000020UL;
1235:../GPIO.h     **** }
1236:../GPIO.h     **** 
1237:../GPIO.h     **** __STATIC_INLINE void P2_5_set(void){
1238:../GPIO.h     ****     PORT2->OMR = 0x00000020UL;
1239:../GPIO.h     **** }
1240:../GPIO.h     **** 
1241:../GPIO.h     **** __STATIC_INLINE void P2_5_reset(void){
1242:../GPIO.h     ****     PORT2->OMR = 0x00200000UL;
1243:../GPIO.h     **** }
1244:../GPIO.h     **** 
1245:../GPIO.h     **** __STATIC_INLINE void P2_5_toggle(void){
1246:../GPIO.h     ****     PORT2->OMR = 0x00200020UL;
1247:../GPIO.h     **** }
1248:../GPIO.h     **** 
1249:../GPIO.h     **** __STATIC_INLINE uint32_t P2_5_read(void){
1250:../GPIO.h     ****     return(PORT2->IN & 0x00000020UL);
1251:../GPIO.h     **** }
1252:../GPIO.h     **** 
1253:../GPIO.h     **** __STATIC_INLINE void P2_5_enable_pps(void){
1254:../GPIO.h     ****     PORT2->PPS |= 0x00000020UL;
1255:../GPIO.h     **** }
1256:../GPIO.h     **** 
1257:../GPIO.h     **** __STATIC_INLINE void P2_5_disable_pps(void){
1258:../GPIO.h     ****     PORT2->PPS &= ~0x00000020UL;
1259:../GPIO.h     **** }
1260:../GPIO.h     **** 
1261:../GPIO.h     **** __STATIC_INLINE void P2_6_set_mode(uint8_t mode){
 1145              	 .loc 2 1261 0
 1146              	 .cfi_startproc
 1147 0000 80B5     	 push {r7,lr}
 1148              	.LCFI60:
 1149              	 .cfi_def_cfa_offset 8
 1150              	 .cfi_offset 7,-8
 1151              	 .cfi_offset 14,-4
 1152 0002 82B0     	 sub sp,sp,#8
 1153              	.LCFI61:
 1154              	 .cfi_def_cfa_offset 16
 1155 0004 00AF     	 add r7,sp,#0
 1156              	.LCFI62:
 1157              	 .cfi_def_cfa_register 7
 1158 0006 021C     	 mov r2,r0
 1159 0008 FB1D     	 add r3,r7,#7
 1160 000a 1A70     	 strb r2,[r3]
1262:../GPIO.h     ****     PORT2->IOCR4 &= ~0x00f80000UL;
 1161              	 .loc 2 1262 0
 1162 000c 084B     	 ldr r3,.L72
 1163 000e 084A     	 ldr r2,.L72
 1164 0010 5269     	 ldr r2,[r2,#20]
 1165 0012 0849     	 ldr r1,.L72+4
 1166 0014 0A40     	 and r2,r1
 1167 0016 5A61     	 str r2,[r3,#20]
1263:../GPIO.h     ****     PORT2->IOCR4 |= mode << 16;
 1168              	 .loc 2 1263 0
 1169 0018 054B     	 ldr r3,.L72
 1170 001a 054A     	 ldr r2,.L72
 1171 001c 5269     	 ldr r2,[r2,#20]
 1172 001e F91D     	 add r1,r7,#7
 1173 0020 0978     	 ldrb r1,[r1]
 1174 0022 0904     	 lsl r1,r1,#16
 1175 0024 0A43     	 orr r2,r1
 1176 0026 5A61     	 str r2,[r3,#20]
1264:../GPIO.h     **** }
 1177              	 .loc 2 1264 0
 1178 0028 BD46     	 mov sp,r7
 1179 002a 02B0     	 add sp,sp,#8
 1180              	 
 1181 002c 80BD     	 pop {r7,pc}
 1182              	.L73:
 1183 002e C046     	 .align 2
 1184              	.L72:
 1185 0030 00020440 	 .word 1074004480
 1186 0034 FFFF07FF 	 .word -16252929
 1187              	 .cfi_endproc
 1188              	.LFE326:
 1190              	 .section .text.P2_7_set_mode,"ax",%progbits
 1191              	 .align 2
 1192              	 .code 16
 1193              	 .thumb_func
 1195              	P2_7_set_mode:
 1196              	.LFB338:
1265:../GPIO.h     **** 
1266:../GPIO.h     **** __STATIC_INLINE void P2_6_set_hwsel(uint32_t config){
1267:../GPIO.h     ****     PORT2->HWSEL &= ~0x00003000UL;
1268:../GPIO.h     ****     PORT2->HWSEL |= config << 12;
1269:../GPIO.h     **** }
1270:../GPIO.h     **** 
1271:../GPIO.h     **** __STATIC_INLINE void P2_6_set_standard_hysteresis(){
1272:../GPIO.h     ****     PORT2->PHCR0 &= ~0x04000000UL;
1273:../GPIO.h     **** }
1274:../GPIO.h     **** 
1275:../GPIO.h     **** __STATIC_INLINE void P2_6_set_large_hysteresis(){
1276:../GPIO.h     ****     PORT2->PHCR0 |= 0x04000000UL;
1277:../GPIO.h     **** }
1278:../GPIO.h     **** 
1279:../GPIO.h     **** __STATIC_INLINE void P2_6_enable_digital(void){
1280:../GPIO.h     ****     PORT2->PDISC &= ~0x00000040UL;
1281:../GPIO.h     **** }
1282:../GPIO.h     **** 
1283:../GPIO.h     **** __STATIC_INLINE void P2_6_disable_digital(void){
1284:../GPIO.h     ****     PORT2->PDISC |= 0x00000040UL;
1285:../GPIO.h     **** }
1286:../GPIO.h     **** 
1287:../GPIO.h     **** __STATIC_INLINE void P2_6_set(void){
1288:../GPIO.h     ****     PORT2->OMR = 0x00000040UL;
1289:../GPIO.h     **** }
1290:../GPIO.h     **** 
1291:../GPIO.h     **** __STATIC_INLINE void P2_6_reset(void){
1292:../GPIO.h     ****     PORT2->OMR = 0x00400000UL;
1293:../GPIO.h     **** }
1294:../GPIO.h     **** 
1295:../GPIO.h     **** __STATIC_INLINE void P2_6_toggle(void){
1296:../GPIO.h     ****     PORT2->OMR = 0x00400040UL;
1297:../GPIO.h     **** }
1298:../GPIO.h     **** 
1299:../GPIO.h     **** __STATIC_INLINE uint32_t P2_6_read(void){
1300:../GPIO.h     ****     return(PORT2->IN & 0x00000040UL);
1301:../GPIO.h     **** }
1302:../GPIO.h     **** 
1303:../GPIO.h     **** __STATIC_INLINE void P2_6_enable_pps(void){
1304:../GPIO.h     ****     PORT2->PPS |= 0x00000040UL;
1305:../GPIO.h     **** }
1306:../GPIO.h     **** 
1307:../GPIO.h     **** __STATIC_INLINE void P2_6_disable_pps(void){
1308:../GPIO.h     ****     PORT2->PPS &= ~0x00000040UL;
1309:../GPIO.h     **** }
1310:../GPIO.h     **** 
1311:../GPIO.h     **** __STATIC_INLINE void P2_7_set_mode(uint8_t mode){
 1197              	 .loc 2 1311 0
 1198              	 .cfi_startproc
 1199 0000 80B5     	 push {r7,lr}
 1200              	.LCFI63:
 1201              	 .cfi_def_cfa_offset 8
 1202              	 .cfi_offset 7,-8
 1203              	 .cfi_offset 14,-4
 1204 0002 82B0     	 sub sp,sp,#8
 1205              	.LCFI64:
 1206              	 .cfi_def_cfa_offset 16
 1207 0004 00AF     	 add r7,sp,#0
 1208              	.LCFI65:
 1209              	 .cfi_def_cfa_register 7
 1210 0006 021C     	 mov r2,r0
 1211 0008 FB1D     	 add r3,r7,#7
 1212 000a 1A70     	 strb r2,[r3]
1312:../GPIO.h     ****     PORT2->IOCR4 &= ~0xf8000000UL;
 1213              	 .loc 2 1312 0
 1214 000c 084B     	 ldr r3,.L75
 1215 000e 084A     	 ldr r2,.L75
 1216 0010 5269     	 ldr r2,[r2,#20]
 1217 0012 5201     	 lsl r2,r2,#5
 1218 0014 5209     	 lsr r2,r2,#5
 1219 0016 5A61     	 str r2,[r3,#20]
1313:../GPIO.h     ****     PORT2->IOCR4 |= mode << 24;
 1220              	 .loc 2 1313 0
 1221 0018 054B     	 ldr r3,.L75
 1222 001a 054A     	 ldr r2,.L75
 1223 001c 5269     	 ldr r2,[r2,#20]
 1224 001e F91D     	 add r1,r7,#7
 1225 0020 0978     	 ldrb r1,[r1]
 1226 0022 0906     	 lsl r1,r1,#24
 1227 0024 0A43     	 orr r2,r1
 1228 0026 5A61     	 str r2,[r3,#20]
1314:../GPIO.h     **** }
 1229              	 .loc 2 1314 0
 1230 0028 BD46     	 mov sp,r7
 1231 002a 02B0     	 add sp,sp,#8
 1232              	 
 1233 002c 80BD     	 pop {r7,pc}
 1234              	.L76:
 1235 002e C046     	 .align 2
 1236              	.L75:
 1237 0030 00020440 	 .word 1074004480
 1238              	 .cfi_endproc
 1239              	.LFE338:
 1241              	 .section .text.P2_8_set_mode,"ax",%progbits
 1242              	 .align 2
 1243              	 .code 16
 1244              	 .thumb_func
 1246              	P2_8_set_mode:
 1247              	.LFB350:
1315:../GPIO.h     **** 
1316:../GPIO.h     **** __STATIC_INLINE void P2_7_set_hwsel(uint32_t config){
1317:../GPIO.h     ****     PORT2->HWSEL &= ~0x0000c000UL;
1318:../GPIO.h     ****     PORT2->HWSEL |= config << 14;
1319:../GPIO.h     **** }
1320:../GPIO.h     **** 
1321:../GPIO.h     **** __STATIC_INLINE void P2_7_set_standard_hysteresis(){
1322:../GPIO.h     ****     PORT2->PHCR0 &= ~0x40000000UL;
1323:../GPIO.h     **** }
1324:../GPIO.h     **** 
1325:../GPIO.h     **** __STATIC_INLINE void P2_7_set_large_hysteresis(){
1326:../GPIO.h     ****     PORT2->PHCR0 |= 0x40000000UL;
1327:../GPIO.h     **** }
1328:../GPIO.h     **** 
1329:../GPIO.h     **** __STATIC_INLINE void P2_7_enable_digital(void){
1330:../GPIO.h     ****     PORT2->PDISC &= ~0x00000080UL;
1331:../GPIO.h     **** }
1332:../GPIO.h     **** 
1333:../GPIO.h     **** __STATIC_INLINE void P2_7_disable_digital(void){
1334:../GPIO.h     ****     PORT2->PDISC |= 0x00000080UL;
1335:../GPIO.h     **** }
1336:../GPIO.h     **** 
1337:../GPIO.h     **** __STATIC_INLINE void P2_7_set(void){
1338:../GPIO.h     ****     PORT2->OMR = 0x00000080UL;
1339:../GPIO.h     **** }
1340:../GPIO.h     **** 
1341:../GPIO.h     **** __STATIC_INLINE void P2_7_reset(void){
1342:../GPIO.h     ****     PORT2->OMR = 0x00800000UL;
1343:../GPIO.h     **** }
1344:../GPIO.h     **** 
1345:../GPIO.h     **** __STATIC_INLINE void P2_7_toggle(void){
1346:../GPIO.h     ****     PORT2->OMR = 0x00800080UL;
1347:../GPIO.h     **** }
1348:../GPIO.h     **** 
1349:../GPIO.h     **** __STATIC_INLINE uint32_t P2_7_read(void){
1350:../GPIO.h     ****     return(PORT2->IN & 0x00000080UL);
1351:../GPIO.h     **** }
1352:../GPIO.h     **** 
1353:../GPIO.h     **** __STATIC_INLINE void P2_7_enable_pps(void){
1354:../GPIO.h     ****     PORT2->PPS |= 0x00000080UL;
1355:../GPIO.h     **** }
1356:../GPIO.h     **** 
1357:../GPIO.h     **** __STATIC_INLINE void P2_7_disable_pps(void){
1358:../GPIO.h     ****     PORT2->PPS &= ~0x00000080UL;
1359:../GPIO.h     **** }
1360:../GPIO.h     **** 
1361:../GPIO.h     **** __STATIC_INLINE void P2_8_set_mode(uint8_t mode){
 1248              	 .loc 2 1361 0
 1249              	 .cfi_startproc
 1250 0000 80B5     	 push {r7,lr}
 1251              	.LCFI66:
 1252              	 .cfi_def_cfa_offset 8
 1253              	 .cfi_offset 7,-8
 1254              	 .cfi_offset 14,-4
 1255 0002 82B0     	 sub sp,sp,#8
 1256              	.LCFI67:
 1257              	 .cfi_def_cfa_offset 16
 1258 0004 00AF     	 add r7,sp,#0
 1259              	.LCFI68:
 1260              	 .cfi_def_cfa_register 7
 1261 0006 021C     	 mov r2,r0
 1262 0008 FB1D     	 add r3,r7,#7
 1263 000a 1A70     	 strb r2,[r3]
1362:../GPIO.h     ****     PORT2->IOCR8 &= ~0x000000f8UL;
 1264              	 .loc 2 1362 0
 1265 000c 074B     	 ldr r3,.L78
 1266 000e 074A     	 ldr r2,.L78
 1267 0010 9269     	 ldr r2,[r2,#24]
 1268 0012 F821     	 mov r1,#248
 1269 0014 8A43     	 bic r2,r1
 1270 0016 9A61     	 str r2,[r3,#24]
1363:../GPIO.h     ****     PORT2->IOCR8 |= mode << 0;
 1271              	 .loc 2 1363 0
 1272 0018 044B     	 ldr r3,.L78
 1273 001a 044A     	 ldr r2,.L78
 1274 001c 9169     	 ldr r1,[r2,#24]
 1275 001e FA1D     	 add r2,r7,#7
 1276 0020 1278     	 ldrb r2,[r2]
 1277 0022 0A43     	 orr r2,r1
 1278 0024 9A61     	 str r2,[r3,#24]
1364:../GPIO.h     **** }
 1279              	 .loc 2 1364 0
 1280 0026 BD46     	 mov sp,r7
 1281 0028 02B0     	 add sp,sp,#8
 1282              	 
 1283 002a 80BD     	 pop {r7,pc}
 1284              	.L79:
 1285              	 .align 2
 1286              	.L78:
 1287 002c 00020440 	 .word 1074004480
 1288              	 .cfi_endproc
 1289              	.LFE350:
 1291              	 .section .text.P2_9_set_mode,"ax",%progbits
 1292              	 .align 2
 1293              	 .code 16
 1294              	 .thumb_func
 1296              	P2_9_set_mode:
 1297              	.LFB362:
1365:../GPIO.h     **** 
1366:../GPIO.h     **** __STATIC_INLINE void P2_8_set_hwsel(uint32_t config){
1367:../GPIO.h     ****     PORT2->HWSEL &= ~0x00030000UL;
1368:../GPIO.h     ****     PORT2->HWSEL |= config << 16;
1369:../GPIO.h     **** }
1370:../GPIO.h     **** 
1371:../GPIO.h     **** __STATIC_INLINE void P2_8_set_standard_hysteresis(){
1372:../GPIO.h     ****     PORT2->PHCR1 &= ~0x00000004UL;
1373:../GPIO.h     **** }
1374:../GPIO.h     **** 
1375:../GPIO.h     **** __STATIC_INLINE void P2_8_set_large_hysteresis(){
1376:../GPIO.h     ****     PORT2->PHCR1 |= 0x00000004UL;
1377:../GPIO.h     **** }
1378:../GPIO.h     **** 
1379:../GPIO.h     **** __STATIC_INLINE void P2_8_enable_digital(void){
1380:../GPIO.h     ****     PORT2->PDISC &= ~0x00000100UL;
1381:../GPIO.h     **** }
1382:../GPIO.h     **** 
1383:../GPIO.h     **** __STATIC_INLINE void P2_8_disable_digital(void){
1384:../GPIO.h     ****     PORT2->PDISC |= 0x00000100UL;
1385:../GPIO.h     **** }
1386:../GPIO.h     **** 
1387:../GPIO.h     **** __STATIC_INLINE void P2_8_set(void){
1388:../GPIO.h     ****     PORT2->OMR = 0x00000100UL;
1389:../GPIO.h     **** }
1390:../GPIO.h     **** 
1391:../GPIO.h     **** __STATIC_INLINE void P2_8_reset(void){
1392:../GPIO.h     ****     PORT2->OMR = 0x01000000UL;
1393:../GPIO.h     **** }
1394:../GPIO.h     **** 
1395:../GPIO.h     **** __STATIC_INLINE void P2_8_toggle(void){
1396:../GPIO.h     ****     PORT2->OMR = 0x01000100UL;
1397:../GPIO.h     **** }
1398:../GPIO.h     **** 
1399:../GPIO.h     **** __STATIC_INLINE uint32_t P2_8_read(void){
1400:../GPIO.h     ****     return(PORT2->IN & 0x00000100UL);
1401:../GPIO.h     **** }
1402:../GPIO.h     **** 
1403:../GPIO.h     **** __STATIC_INLINE void P2_8_enable_pps(void){
1404:../GPIO.h     ****     PORT2->PPS |= 0x00000100UL;
1405:../GPIO.h     **** }
1406:../GPIO.h     **** 
1407:../GPIO.h     **** __STATIC_INLINE void P2_8_disable_pps(void){
1408:../GPIO.h     ****     PORT2->PPS &= ~0x00000100UL;
1409:../GPIO.h     **** }
1410:../GPIO.h     **** 
1411:../GPIO.h     **** __STATIC_INLINE void P2_9_set_mode(uint8_t mode){
 1298              	 .loc 2 1411 0
 1299              	 .cfi_startproc
 1300 0000 80B5     	 push {r7,lr}
 1301              	.LCFI69:
 1302              	 .cfi_def_cfa_offset 8
 1303              	 .cfi_offset 7,-8
 1304              	 .cfi_offset 14,-4
 1305 0002 82B0     	 sub sp,sp,#8
 1306              	.LCFI70:
 1307              	 .cfi_def_cfa_offset 16
 1308 0004 00AF     	 add r7,sp,#0
 1309              	.LCFI71:
 1310              	 .cfi_def_cfa_register 7
 1311 0006 021C     	 mov r2,r0
 1312 0008 FB1D     	 add r3,r7,#7
 1313 000a 1A70     	 strb r2,[r3]
1412:../GPIO.h     ****     PORT2->IOCR8 &= ~0x0000f800UL;
 1314              	 .loc 2 1412 0
 1315 000c 084B     	 ldr r3,.L81
 1316 000e 084A     	 ldr r2,.L81
 1317 0010 9269     	 ldr r2,[r2,#24]
 1318 0012 0849     	 ldr r1,.L81+4
 1319 0014 0A40     	 and r2,r1
 1320 0016 9A61     	 str r2,[r3,#24]
1413:../GPIO.h     ****     PORT2->IOCR8 |= mode << 8;
 1321              	 .loc 2 1413 0
 1322 0018 054B     	 ldr r3,.L81
 1323 001a 054A     	 ldr r2,.L81
 1324 001c 9269     	 ldr r2,[r2,#24]
 1325 001e F91D     	 add r1,r7,#7
 1326 0020 0978     	 ldrb r1,[r1]
 1327 0022 0902     	 lsl r1,r1,#8
 1328 0024 0A43     	 orr r2,r1
 1329 0026 9A61     	 str r2,[r3,#24]
1414:../GPIO.h     **** }
 1330              	 .loc 2 1414 0
 1331 0028 BD46     	 mov sp,r7
 1332 002a 02B0     	 add sp,sp,#8
 1333              	 
 1334 002c 80BD     	 pop {r7,pc}
 1335              	.L82:
 1336 002e C046     	 .align 2
 1337              	.L81:
 1338 0030 00020440 	 .word 1074004480
 1339 0034 FF07FFFF 	 .word -63489
 1340              	 .cfi_endproc
 1341              	.LFE362:
 1343              	 .section .text.P2_10_set_mode,"ax",%progbits
 1344              	 .align 2
 1345              	 .code 16
 1346              	 .thumb_func
 1348              	P2_10_set_mode:
 1349              	.LFB374:
1415:../GPIO.h     **** 
1416:../GPIO.h     **** __STATIC_INLINE void P2_9_set_hwsel(uint32_t config){
1417:../GPIO.h     ****     PORT2->HWSEL &= ~0x000c0000UL;
1418:../GPIO.h     ****     PORT2->HWSEL |= config << 18;
1419:../GPIO.h     **** }
1420:../GPIO.h     **** 
1421:../GPIO.h     **** __STATIC_INLINE void P2_9_set_standard_hysteresis(){
1422:../GPIO.h     ****     PORT2->PHCR1 &= ~0x00000040UL;
1423:../GPIO.h     **** }
1424:../GPIO.h     **** 
1425:../GPIO.h     **** __STATIC_INLINE void P2_9_set_large_hysteresis(){
1426:../GPIO.h     ****     PORT2->PHCR1 |= 0x00000040UL;
1427:../GPIO.h     **** }
1428:../GPIO.h     **** 
1429:../GPIO.h     **** __STATIC_INLINE void P2_9_enable_digital(void){
1430:../GPIO.h     ****     PORT2->PDISC &= ~0x00000200UL;
1431:../GPIO.h     **** }
1432:../GPIO.h     **** 
1433:../GPIO.h     **** __STATIC_INLINE void P2_9_disable_digital(void){
1434:../GPIO.h     ****     PORT2->PDISC |= 0x00000200UL;
1435:../GPIO.h     **** }
1436:../GPIO.h     **** 
1437:../GPIO.h     **** __STATIC_INLINE void P2_9_set(void){
1438:../GPIO.h     ****     PORT2->OMR = 0x00000200UL;
1439:../GPIO.h     **** }
1440:../GPIO.h     **** 
1441:../GPIO.h     **** __STATIC_INLINE void P2_9_reset(void){
1442:../GPIO.h     ****     PORT2->OMR = 0x02000000UL;
1443:../GPIO.h     **** }
1444:../GPIO.h     **** 
1445:../GPIO.h     **** __STATIC_INLINE void P2_9_toggle(void){
1446:../GPIO.h     ****     PORT2->OMR = 0x02000200UL;
1447:../GPIO.h     **** }
1448:../GPIO.h     **** 
1449:../GPIO.h     **** __STATIC_INLINE uint32_t P2_9_read(void){
1450:../GPIO.h     ****     return(PORT2->IN & 0x00000200UL);
1451:../GPIO.h     **** }
1452:../GPIO.h     **** 
1453:../GPIO.h     **** __STATIC_INLINE void P2_9_enable_pps(void){
1454:../GPIO.h     ****     PORT2->PPS |= 0x00000200UL;
1455:../GPIO.h     **** }
1456:../GPIO.h     **** 
1457:../GPIO.h     **** __STATIC_INLINE void P2_9_disable_pps(void){
1458:../GPIO.h     ****     PORT2->PPS &= ~0x00000200UL;
1459:../GPIO.h     **** }
1460:../GPIO.h     **** 
1461:../GPIO.h     **** __STATIC_INLINE void P2_10_set_mode(uint8_t mode){
 1350              	 .loc 2 1461 0
 1351              	 .cfi_startproc
 1352 0000 80B5     	 push {r7,lr}
 1353              	.LCFI72:
 1354              	 .cfi_def_cfa_offset 8
 1355              	 .cfi_offset 7,-8
 1356              	 .cfi_offset 14,-4
 1357 0002 82B0     	 sub sp,sp,#8
 1358              	.LCFI73:
 1359              	 .cfi_def_cfa_offset 16
 1360 0004 00AF     	 add r7,sp,#0
 1361              	.LCFI74:
 1362              	 .cfi_def_cfa_register 7
 1363 0006 021C     	 mov r2,r0
 1364 0008 FB1D     	 add r3,r7,#7
 1365 000a 1A70     	 strb r2,[r3]
1462:../GPIO.h     ****     PORT2->IOCR8 &= ~0x00f80000UL;
 1366              	 .loc 2 1462 0
 1367 000c 084B     	 ldr r3,.L84
 1368 000e 084A     	 ldr r2,.L84
 1369 0010 9269     	 ldr r2,[r2,#24]
 1370 0012 0849     	 ldr r1,.L84+4
 1371 0014 0A40     	 and r2,r1
 1372 0016 9A61     	 str r2,[r3,#24]
1463:../GPIO.h     ****     PORT2->IOCR8 |= mode << 16;
 1373              	 .loc 2 1463 0
 1374 0018 054B     	 ldr r3,.L84
 1375 001a 054A     	 ldr r2,.L84
 1376 001c 9269     	 ldr r2,[r2,#24]
 1377 001e F91D     	 add r1,r7,#7
 1378 0020 0978     	 ldrb r1,[r1]
 1379 0022 0904     	 lsl r1,r1,#16
 1380 0024 0A43     	 orr r2,r1
 1381 0026 9A61     	 str r2,[r3,#24]
1464:../GPIO.h     **** }
 1382              	 .loc 2 1464 0
 1383 0028 BD46     	 mov sp,r7
 1384 002a 02B0     	 add sp,sp,#8
 1385              	 
 1386 002c 80BD     	 pop {r7,pc}
 1387              	.L85:
 1388 002e C046     	 .align 2
 1389              	.L84:
 1390 0030 00020440 	 .word 1074004480
 1391 0034 FFFF07FF 	 .word -16252929
 1392              	 .cfi_endproc
 1393              	.LFE374:
 1395              	 .section .text.P2_11_set_mode,"ax",%progbits
 1396              	 .align 2
 1397              	 .code 16
 1398              	 .thumb_func
 1400              	P2_11_set_mode:
 1401              	.LFB386:
1465:../GPIO.h     **** 
1466:../GPIO.h     **** __STATIC_INLINE void P2_10_set_hwsel(uint32_t config){
1467:../GPIO.h     ****     PORT2->HWSEL &= ~0x00300000UL;
1468:../GPIO.h     ****     PORT2->HWSEL |= config << 20;
1469:../GPIO.h     **** }
1470:../GPIO.h     **** 
1471:../GPIO.h     **** __STATIC_INLINE void P2_10_set_standard_hysteresis(){
1472:../GPIO.h     ****     PORT2->PHCR1 &= ~0x00000400UL;
1473:../GPIO.h     **** }
1474:../GPIO.h     **** 
1475:../GPIO.h     **** __STATIC_INLINE void P2_10_set_large_hysteresis(){
1476:../GPIO.h     ****     PORT2->PHCR1 |= 0x00000400UL;
1477:../GPIO.h     **** }
1478:../GPIO.h     **** 
1479:../GPIO.h     **** __STATIC_INLINE void P2_10_enable_digital(void){
1480:../GPIO.h     ****     PORT2->PDISC &= ~0x00000400UL;
1481:../GPIO.h     **** }
1482:../GPIO.h     **** 
1483:../GPIO.h     **** __STATIC_INLINE void P2_10_disable_digital(void){
1484:../GPIO.h     ****     PORT2->PDISC |= 0x00000400UL;
1485:../GPIO.h     **** }
1486:../GPIO.h     **** 
1487:../GPIO.h     **** __STATIC_INLINE void P2_10_set(void){
1488:../GPIO.h     ****     PORT2->OMR = 0x00000400UL;
1489:../GPIO.h     **** }
1490:../GPIO.h     **** 
1491:../GPIO.h     **** __STATIC_INLINE void P2_10_reset(void){
1492:../GPIO.h     ****     PORT2->OMR = 0x04000000UL;
1493:../GPIO.h     **** }
1494:../GPIO.h     **** 
1495:../GPIO.h     **** __STATIC_INLINE void P2_10_toggle(void){
1496:../GPIO.h     ****     PORT2->OMR = 0x04000400UL;
1497:../GPIO.h     **** }
1498:../GPIO.h     **** 
1499:../GPIO.h     **** __STATIC_INLINE uint32_t P2_10_read(void){
1500:../GPIO.h     ****     return(PORT2->IN & 0x00000400UL);
1501:../GPIO.h     **** }
1502:../GPIO.h     **** 
1503:../GPIO.h     **** __STATIC_INLINE void P2_10_enable_pps(void){
1504:../GPIO.h     ****     PORT2->PPS |= 0x00000400UL;
1505:../GPIO.h     **** }
1506:../GPIO.h     **** 
1507:../GPIO.h     **** __STATIC_INLINE void P2_10_disable_pps(void){
1508:../GPIO.h     ****     PORT2->PPS &= ~0x00000400UL;
1509:../GPIO.h     **** }
1510:../GPIO.h     **** 
1511:../GPIO.h     **** __STATIC_INLINE void P2_11_set_mode(uint8_t mode){
 1402              	 .loc 2 1511 0
 1403              	 .cfi_startproc
 1404 0000 80B5     	 push {r7,lr}
 1405              	.LCFI75:
 1406              	 .cfi_def_cfa_offset 8
 1407              	 .cfi_offset 7,-8
 1408              	 .cfi_offset 14,-4
 1409 0002 82B0     	 sub sp,sp,#8
 1410              	.LCFI76:
 1411              	 .cfi_def_cfa_offset 16
 1412 0004 00AF     	 add r7,sp,#0
 1413              	.LCFI77:
 1414              	 .cfi_def_cfa_register 7
 1415 0006 021C     	 mov r2,r0
 1416 0008 FB1D     	 add r3,r7,#7
 1417 000a 1A70     	 strb r2,[r3]
1512:../GPIO.h     ****     PORT2->IOCR8 &= ~0xf8000000UL;
 1418              	 .loc 2 1512 0
 1419 000c 084B     	 ldr r3,.L87
 1420 000e 084A     	 ldr r2,.L87
 1421 0010 9269     	 ldr r2,[r2,#24]
 1422 0012 5201     	 lsl r2,r2,#5
 1423 0014 5209     	 lsr r2,r2,#5
 1424 0016 9A61     	 str r2,[r3,#24]
1513:../GPIO.h     ****     PORT2->IOCR8 |= mode << 24;
 1425              	 .loc 2 1513 0
 1426 0018 054B     	 ldr r3,.L87
 1427 001a 054A     	 ldr r2,.L87
 1428 001c 9269     	 ldr r2,[r2,#24]
 1429 001e F91D     	 add r1,r7,#7
 1430 0020 0978     	 ldrb r1,[r1]
 1431 0022 0906     	 lsl r1,r1,#24
 1432 0024 0A43     	 orr r2,r1
 1433 0026 9A61     	 str r2,[r3,#24]
1514:../GPIO.h     **** }
 1434              	 .loc 2 1514 0
 1435 0028 BD46     	 mov sp,r7
 1436 002a 02B0     	 add sp,sp,#8
 1437              	 
 1438 002c 80BD     	 pop {r7,pc}
 1439              	.L88:
 1440 002e C046     	 .align 2
 1441              	.L87:
 1442 0030 00020440 	 .word 1074004480
 1443              	 .cfi_endproc
 1444              	.LFE386:
 1446              	 .global __aeabi_uidiv
 1447              	 .section .text.main,"ax",%progbits
 1448              	 .align 2
 1449              	 .global main
 1450              	 .code 16
 1451              	 .thumb_func
 1453              	main:
 1454              	.LFB398:
 1455              	 .file 3 "../EasyMain.c"
   1:../EasyMain.c **** /******************************************************************************
   2:../EasyMain.c ****  * @file     EasyMain.c
   3:../EasyMain.c ****  * @brief    Uses a system timer to toggle the  ports P0.5, P0.6, P1.5 and P1.6 with 200ms frequenc
   4:../EasyMain.c ****  *			 LEDs that are connected to these ports will toggle respectively.
   5:../EasyMain.c ****  * 			 In addition it uses the UART of USIC Channel 1 to send a message every 2s to a terminal
   6:../EasyMain.c ****  *			 emulator. The communication settings are 57.6kbps/8N1
   7:../EasyMain.c ****  *			 P1.3 is configured as input (RXD) and P1.2 is configured as output(TXD)
   8:../EasyMain.c ****  *			 This project runs without modifications on the XMC1100 kit for ARDUINO
   9:../EasyMain.c ****  * @version  V1.0
  10:../EasyMain.c ****  * @date     20. February 2015
  11:../EasyMain.c ****  * @note
  12:../EasyMain.c ****  * Copyright (C) 2015 Infineon Technologies AG. All rights reserved.
  13:../EasyMain.c ****  ******************************************************************************
  14:../EasyMain.c ****  * @par
  15:../EasyMain.c ****  * Infineon Technologies AG (Infineon) is supplying this software for use with
  16:../EasyMain.c ****  * Infineon�s microcontrollers.
  17:../EasyMain.c ****  * This file can be freely distributed within development tools that are
  18:../EasyMain.c ****  * supporting such microcontrollers.
  19:../EasyMain.c ****  * @par
  20:../EasyMain.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  21:../EasyMain.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  22:../EasyMain.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  23:../EasyMain.c ****  * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
  24:../EasyMain.c ****  * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  25:../EasyMain.c ****  *****************************************************************************/
  26:../EasyMain.c **** 
  27:../EasyMain.c **** #include <string.h>
  28:../EasyMain.c **** 
  29:../EasyMain.c **** #include "XMC1100.h"
  30:../EasyMain.c **** #include "GPIO.h"
  31:../EasyMain.c **** 
  32:../EasyMain.c **** // Ticks are generated every 100ms
  33:../EasyMain.c **** #define TICKS_PER_SECOND 10UL
  34:../EasyMain.c **** // Update LED status every 200ms
  35:../EasyMain.c **** #define TICKS_LED_EVENT 2UL
  36:../EasyMain.c **** // Update message 2s
  37:../EasyMain.c **** #define TICKS_UART_EVENT 20UL
  38:../EasyMain.c **** 
  39:../EasyMain.c **** // UART baud rate constants for 57.8kbps @ MCLK=8MHz
  40:../EasyMain.c **** #define FDR_STEP 590UL
  41:../EasyMain.c **** #define BRG_PDIV 4UL
  42:../EasyMain.c **** #define BRG_DCTQ 15UL
  43:../EasyMain.c **** #define BRG_PCTQ 0UL
  44:../EasyMain.c **** 
  45:../EasyMain.c **** void UART_Init();
  46:../EasyMain.c **** 
  47:../EasyMain.c **** int main(void)
  48:../EasyMain.c **** {
 1456              	 .loc 3 48 0
 1457              	 .cfi_startproc
 1458 0000 80B5     	 push {r7,lr}
 1459              	.LCFI78:
 1460              	 .cfi_def_cfa_offset 8
 1461              	 .cfi_offset 7,-8
 1462              	 .cfi_offset 14,-4
 1463 0002 00AF     	 add r7,sp,#0
 1464              	.LCFI79:
 1465              	 .cfi_def_cfa_register 7
  49:../EasyMain.c **** 	// Clock configuration
  50:../EasyMain.c **** 	SCU_GENERAL->PASSWD = 0x000000C0UL; // disable bit protection
 1466              	 .loc 3 50 0
 1467 0004 324B     	 ldr r3,.L92
 1468 0006 C022     	 mov r2,#192
 1469 0008 5A62     	 str r2,[r3,#36]
  51:../EasyMain.c **** 	SCU_CLK->CLKCR = 0x3FF00400UL; // MCLK = 8MHz, PCLK = 8MHz
 1470              	 .loc 3 51 0
 1471 000a 324B     	 ldr r3,.L92+4
 1472 000c 324A     	 ldr r2,.L92+8
 1473 000e 1A60     	 str r2,[r3]
  52:../EasyMain.c **** 	while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
 1474              	 .loc 3 52 0
 1475 0010 C046     	 mov r8,r8
 1476              	.L90:
 1477              	 .loc 3 52 0 is_stmt 0 discriminator 1
 1478 0012 304B     	 ldr r3,.L92+4
 1479 0014 1A68     	 ldr r2,[r3]
 1480 0016 8023     	 mov r3,#128
 1481 0018 DB05     	 lsl r3,r3,#23
 1482 001a 1340     	 and r3,r2
 1483 001c F9D1     	 bne .L90
  53:../EasyMain.c **** 	SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
 1484              	 .loc 3 53 0 is_stmt 1
 1485 001e 2C4B     	 ldr r3,.L92
 1486 0020 C322     	 mov r2,#195
 1487 0022 5A62     	 str r2,[r3,#36]
  54:../EasyMain.c **** 	SystemCoreClockUpdate();
 1488              	 .loc 3 54 0
 1489 0024 FFF7FEFF 	 bl SystemCoreClockUpdate
  55:../EasyMain.c **** 
  56:../EasyMain.c **** 	// Initialize and start UART
  57:../EasyMain.c **** 	//UART_Init();
  58:../EasyMain.c **** 
  59:../EasyMain.c **** 	/* ID Switch */
  60:../EasyMain.c **** 	/*
  61:../EasyMain.c **** 	 * P2.4
  62:../EasyMain.c **** 	 * P2.5
  63:../EasyMain.c **** 	 * P2.6
  64:../EasyMain.c **** 	 * P2.7
  65:../EasyMain.c **** 	 * P2.8
  66:../EasyMain.c **** 	 * P2.9
  67:../EasyMain.c **** 	 * P2.10
  68:../EasyMain.c **** 	 * P2.11
  69:../EasyMain.c **** 	 *
  70:../EasyMain.c **** 	 */
  71:../EasyMain.c **** 
  72:../EasyMain.c **** 	P2_4_set_mode(INPUT_PU);
 1490              	 .loc 3 72 0
 1491 0028 1020     	 mov r0,#16
 1492 002a FFF7FEFF 	 bl P2_4_set_mode
  73:../EasyMain.c **** 	P2_5_set_mode(INPUT_PU);
 1493              	 .loc 3 73 0
 1494 002e 1020     	 mov r0,#16
 1495 0030 FFF7FEFF 	 bl P2_5_set_mode
  74:../EasyMain.c **** 	P2_6_set_mode(INPUT_PU);
 1496              	 .loc 3 74 0
 1497 0034 1020     	 mov r0,#16
 1498 0036 FFF7FEFF 	 bl P2_6_set_mode
  75:../EasyMain.c **** 	P2_7_set_mode(INPUT_PU);
 1499              	 .loc 3 75 0
 1500 003a 1020     	 mov r0,#16
 1501 003c FFF7FEFF 	 bl P2_7_set_mode
  76:../EasyMain.c **** 	P2_8_set_mode(INPUT_PU);
 1502              	 .loc 3 76 0
 1503 0040 1020     	 mov r0,#16
 1504 0042 FFF7FEFF 	 bl P2_8_set_mode
  77:../EasyMain.c **** 	P2_9_set_mode(INPUT_PU);
 1505              	 .loc 3 77 0
 1506 0046 1020     	 mov r0,#16
 1507 0048 FFF7FEFF 	 bl P2_9_set_mode
  78:../EasyMain.c **** 	P2_10_set_mode(INPUT_PU);
 1508              	 .loc 3 78 0
 1509 004c 1020     	 mov r0,#16
 1510 004e FFF7FEFF 	 bl P2_10_set_mode
  79:../EasyMain.c **** 	P2_11_set_mode(INPUT_PU);
 1511              	 .loc 3 79 0
 1512 0052 1020     	 mov r0,#16
 1513 0054 FFF7FEFF 	 bl P2_11_set_mode
  80:../EasyMain.c **** 
  81:../EasyMain.c **** 	/* Output for Waveform Generation Flap Flap */
  82:../EasyMain.c **** 	P2_3_set_mode(OUTPUT_OD_GP); /* !AD    */
 1514              	 .loc 3 82 0
 1515 0058 C020     	 mov r0,#192
 1516 005a FFF7FEFF 	 bl P2_3_set_mode
  83:../EasyMain.c **** 	P0_1_set_mode(OUTPUT_OD_GP); /* !COL   */
 1517              	 .loc 3 83 0
 1518 005e C020     	 mov r0,#192
 1519 0060 FFF7FEFF 	 bl P0_1_set_mode
  84:../EasyMain.c **** 	P0_2_set_mode(OUTPUT_OD_GP); /* !Start */
 1520              	 .loc 3 84 0
 1521 0064 C020     	 mov r0,#192
 1522 0066 FFF7FEFF 	 bl P0_2_set_mode
  85:../EasyMain.c **** 
  86:../EasyMain.c **** 	/* LEDs */
  87:../EasyMain.c **** 
  88:../EasyMain.c **** 	P0_3_set_mode(OUTPUT_OD_GP); /*LED Green */
 1523              	 .loc 3 88 0
 1524 006a C020     	 mov r0,#192
 1525 006c FFF7FEFF 	 bl P0_3_set_mode
  89:../EasyMain.c **** 	P0_4_set_mode(OUTPUT_OD_GP); /* LED red */
 1526              	 .loc 3 89 0
 1527 0070 C020     	 mov r0,#192
 1528 0072 FFF7FEFF 	 bl P0_4_set_mode
  90:../EasyMain.c **** 
  91:../EasyMain.c **** 	/* Encoder Input */
  92:../EasyMain.c **** 	P1_0_set_mode(INPUT_INV_PU);
 1529              	 .loc 3 92 0
 1530 0076 3020     	 mov r0,#48
 1531 0078 FFF7FEFF 	 bl P1_0_set_mode
  93:../EasyMain.c **** 	P1_1_set_mode(INPUT_INV_PU);
 1532              	 .loc 3 93 0
 1533 007c 3020     	 mov r0,#48
 1534 007e FFF7FEFF 	 bl P1_1_set_mode
  94:../EasyMain.c **** 	P1_2_set_mode(INPUT_INV_PU);
 1535              	 .loc 3 94 0
 1536 0082 3020     	 mov r0,#48
 1537 0084 FFF7FEFF 	 bl P1_2_set_mode
  95:../EasyMain.c **** 	P1_3_set_mode(INPUT_INV_PU);
 1538              	 .loc 3 95 0
 1539 0088 3020     	 mov r0,#48
 1540 008a FFF7FEFF 	 bl P1_3_set_mode
  96:../EasyMain.c **** 	P1_4_set_mode(INPUT_INV_PU);
 1541              	 .loc 3 96 0
 1542 008e 3020     	 mov r0,#48
 1543 0090 FFF7FEFF 	 bl P1_4_set_mode
  97:../EasyMain.c **** 	P1_5_set_mode(INPUT_INV_PU);
 1544              	 .loc 3 97 0
 1545 0094 3020     	 mov r0,#48
 1546 0096 FFF7FEFF 	 bl P1_5_set_mode
  98:../EasyMain.c **** 
  99:../EasyMain.c **** 	/* TX Enable */
 100:../EasyMain.c **** 	P2_2_set_mode(OUTPUT_OD_GP);
 1547              	 .loc 3 100 0
 1548 009a C020     	 mov r0,#192
 1549 009c FFF7FEFF 	 bl P2_2_set_mode
 101:../EasyMain.c **** 
 102:../EasyMain.c **** 	/* Disable TX */
 103:../EasyMain.c **** 	P2_2_reset();
 1550              	 .loc 3 103 0
 1551 00a0 FFF7FEFF 	 bl P2_2_reset
 104:../EasyMain.c **** 
 105:../EasyMain.c **** 	/* Disable Drive */
 106:../EasyMain.c **** 	P2_3_set();
 1552              	 .loc 3 106 0
 1553 00a4 FFF7FEFF 	 bl P2_3_set
 107:../EasyMain.c **** 	P2_1_set();
 1554              	 .loc 3 107 0
 1555 00a8 FFF7FEFF 	 bl P2_1_set
 108:../EasyMain.c **** 	P2_3_set();
 1556              	 .loc 3 108 0
 1557 00ac FFF7FEFF 	 bl P2_3_set
 109:../EasyMain.c **** 
 110:../EasyMain.c **** 	// Set all Leds on */
 111:../EasyMain.c **** 	P0_3_reset();
 1558              	 .loc 3 111 0
 1559 00b0 FFF7FEFF 	 bl P0_3_reset
 112:../EasyMain.c **** 	P0_4_reset();
 1560              	 .loc 3 112 0
 1561 00b4 FFF7FEFF 	 bl P0_4_reset
 113:../EasyMain.c **** 
 114:../EasyMain.c **** 
 115:../EasyMain.c **** 
 116:../EasyMain.c **** 	// System Timer initialization
 117:../EasyMain.c **** 	SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 1562              	 .loc 3 117 0
 1563 00b8 084B     	 ldr r3,.L92+12
 1564 00ba 1B68     	 ldr r3,[r3]
 1565 00bc 181C     	 mov r0,r3
 1566 00be 0A21     	 mov r1,#10
 1567 00c0 FFF7FEFF 	 bl __aeabi_uidiv
 1568 00c4 031C     	 mov r3,r0
 1569 00c6 181C     	 mov r0,r3
 1570 00c8 FFF7FEFF 	 bl SysTick_Config
 1571              	.L91:
 118:../EasyMain.c **** 
 119:../EasyMain.c **** 	while(1);
 1572              	 .loc 3 119 0 discriminator 1
 1573 00cc FEE7     	 b .L91
 1574              	.L93:
 1575 00ce C046     	 .align 2
 1576              	.L92:
 1577 00d0 00000140 	 .word 1073807360
 1578 00d4 00030140 	 .word 1073808128
 1579 00d8 0004F03F 	 .word 1072694272
 1580 00dc 00000000 	 .word SystemCoreClock
 1581              	 .cfi_endproc
 1582              	.LFE398:
 1584              	 .section .text.UART_Init,"ax",%progbits
 1585              	 .align 2
 1586              	 .global UART_Init
 1587              	 .code 16
 1588              	 .thumb_func
 1590              	UART_Init:
 1591              	.LFB399:
 120:../EasyMain.c **** }
 121:../EasyMain.c **** 
 122:../EasyMain.c **** void UART_Init()
 123:../EasyMain.c **** {
 1592              	 .loc 3 123 0
 1593              	 .cfi_startproc
 1594 0000 80B5     	 push {r7,lr}
 1595              	.LCFI80:
 1596              	 .cfi_def_cfa_offset 8
 1597              	 .cfi_offset 7,-8
 1598              	 .cfi_offset 14,-4
 1599 0002 00AF     	 add r7,sp,#0
 1600              	.LCFI81:
 1601              	 .cfi_def_cfa_register 7
 124:../EasyMain.c **** 	// Disable clock gating to USIC0
 125:../EasyMain.c **** 	SCU_GENERAL->PASSWD = 0x000000C0UL; // disable bit protection
 1602              	 .loc 3 125 0
 1603 0004 3F4B     	 ldr r3,.L95
 1604 0006 C022     	 mov r2,#192
 1605 0008 5A62     	 str r2,[r3,#36]
 126:../EasyMain.c **** 	SCU_CLK->CGATCLR0 |= SCU_CLK_CGATCLR0_USIC0_Msk;
 1606              	 .loc 3 126 0
 1607 000a 3F4B     	 ldr r3,.L95+4
 1608 000c 3E4A     	 ldr r2,.L95+4
 1609 000e 1269     	 ldr r2,[r2,#16]
 1610 0010 0821     	 mov r1,#8
 1611 0012 0A43     	 orr r2,r1
 1612 0014 1A61     	 str r2,[r3,#16]
 127:../EasyMain.c **** 	SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
 1613              	 .loc 3 127 0
 1614 0016 3B4B     	 ldr r3,.L95
 1615 0018 C322     	 mov r2,#195
 1616 001a 5A62     	 str r2,[r3,#36]
 128:../EasyMain.c **** 
 129:../EasyMain.c ****     /* Enable the module kernel clock and the module functionality  */
 130:../EasyMain.c ****     USIC0_CH1->KSCFG |= USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk;
 1617              	 .loc 3 130 0
 1618 001c 3B4B     	 ldr r3,.L95+8
 1619 001e 3B4A     	 ldr r2,.L95+8
 1620 0020 D268     	 ldr r2,[r2,#12]
 1621 0022 0321     	 mov r1,#3
 1622 0024 0A43     	 orr r2,r1
 1623 0026 DA60     	 str r2,[r3,#12]
 131:../EasyMain.c **** 
 132:../EasyMain.c ****     /* fFD = fPB */
 133:../EasyMain.c ****     /* FDR.DM = 02b (Fractional divider mode) */
 134:../EasyMain.c ****     USIC0_CH1->FDR &= ~(USIC_CH_FDR_DM_Msk | USIC_CH_FDR_STEP_Msk);
 1624              	 .loc 3 134 0
 1625 0028 384B     	 ldr r3,.L95+8
 1626 002a 384A     	 ldr r2,.L95+8
 1627 002c 1269     	 ldr r2,[r2,#16]
 1628 002e 3849     	 ldr r1,.L95+12
 1629 0030 0A40     	 and r2,r1
 1630 0032 1A61     	 str r2,[r3,#16]
 135:../EasyMain.c ****     USIC0_CH1->FDR |= (0x02UL << USIC_CH_FDR_DM_Pos) | (FDR_STEP << USIC_CH_FDR_STEP_Pos);
 1631              	 .loc 3 135 0
 1632 0034 354B     	 ldr r3,.L95+8
 1633 0036 354A     	 ldr r2,.L95+8
 1634 0038 1269     	 ldr r2,[r2,#16]
 1635 003a 3649     	 ldr r1,.L95+16
 1636 003c 0A43     	 orr r2,r1
 1637 003e 1A61     	 str r2,[r3,#16]
 136:../EasyMain.c **** 
 137:../EasyMain.c ****     /* Configure baud rate generator */
 138:../EasyMain.c ****     /* BAUDRATE = fCTQIN/(BRG.PCTQ x BRG.DCTQ) */
 139:../EasyMain.c ****     /* CLKSEL = 0 (fPIN = fFD), CTQSEL = 00b (fCTQIN = fPDIV), PPPEN = 0 (fPPP=fPIN) */
 140:../EasyMain.c ****     USIC0_CH0->BRG &= ~(USIC_CH_BRG_PCTQ_Msk | USIC_CH_BRG_DCTQ_Msk | USIC_CH_BRG_PDIV_Msk | USIC_C
 1638              	 .loc 3 140 0
 1639 0040 9023     	 mov r3,#144
 1640 0042 DB05     	 lsl r3,r3,#23
 1641 0044 9022     	 mov r2,#144
 1642 0046 D205     	 lsl r2,r2,#23
 1643 0048 5269     	 ldr r2,[r2,#20]
 1644 004a 3349     	 ldr r1,.L95+20
 1645 004c 0A40     	 and r2,r1
 1646 004e 5A61     	 str r2,[r3,#20]
 141:../EasyMain.c ****     USIC0_CH1->BRG |= (BRG_PCTQ << USIC_CH_BRG_PCTQ_Pos) | (BRG_DCTQ << USIC_CH_BRG_DCTQ_Pos) | (BR
 1647              	 .loc 3 141 0
 1648 0050 2E4B     	 ldr r3,.L95+8
 1649 0052 2E4A     	 ldr r2,.L95+8
 1650 0054 5269     	 ldr r2,[r2,#20]
 1651 0056 3149     	 ldr r1,.L95+24
 1652 0058 0A43     	 orr r2,r1
 1653 005a 5A61     	 str r2,[r3,#20]
 142:../EasyMain.c **** 
 143:../EasyMain.c ****     /* Configuration of USIC Shift Control */
 144:../EasyMain.c ****     /* SCTR.FLE = 8 (Frame Length) */
 145:../EasyMain.c ****     /* SCTR.WLE = 8 (Word Length) */
 146:../EasyMain.c ****     /* SCTR.TRM = 1 (Transmission Mode) */
 147:../EasyMain.c ****     /* SCTR.PDL = 1 (This bit defines the output level at the shift data output signal when no data
 148:../EasyMain.c ****     USIC0_CH1->SCTR &= ~(USIC_CH_SCTR_TRM_Msk | USIC_CH_SCTR_FLE_Msk | USIC_CH_SCTR_WLE_Msk);
 1654              	 .loc 3 148 0
 1655 005c 2B4B     	 ldr r3,.L95+8
 1656 005e 2B4A     	 ldr r2,.L95+8
 1657 0060 526B     	 ldr r2,[r2,#52]
 1658 0062 2F49     	 ldr r1,.L95+28
 1659 0064 0A40     	 and r2,r1
 1660 0066 5A63     	 str r2,[r3,#52]
 149:../EasyMain.c ****     USIC0_CH1->SCTR |= USIC_CH_SCTR_PDL_Msk | (0x01UL << USIC_CH_SCTR_TRM_Pos) | (0x07UL << USIC_CH
 1661              	 .loc 3 149 0
 1662 0068 284B     	 ldr r3,.L95+8
 1663 006a 284A     	 ldr r2,.L95+8
 1664 006c 526B     	 ldr r2,[r2,#52]
 1665 006e 2D49     	 ldr r1,.L95+32
 1666 0070 0A43     	 orr r2,r1
 1667 0072 5A63     	 str r2,[r3,#52]
 150:../EasyMain.c **** 
 151:../EasyMain.c ****     /* Configuration of USIC Transmit Control/Status Register */
 152:../EasyMain.c ****     /* TBUF.TDEN = 1 (TBUF Data Enable: A transmission of the data word in TBUF can be started if T
 153:../EasyMain.c ****     /* TBUF.TDSSM = 1 (Data Single Shot Mode: allow word-by-word data transmission which avoid send
 154:../EasyMain.c ****     USIC0_CH1->TCSR &= ~(USIC_CH_TCSR_TDEN_Msk);
 1668              	 .loc 3 154 0
 1669 0074 254B     	 ldr r3,.L95+8
 1670 0076 254A     	 ldr r2,.L95+8
 1671 0078 926B     	 ldr r2,[r2,#56]
 1672 007a 2B49     	 ldr r1,.L95+36
 1673 007c 0A40     	 and r2,r1
 1674 007e 9A63     	 str r2,[r3,#56]
 155:../EasyMain.c ****     USIC0_CH1->TCSR |= USIC_CH_TCSR_TDSSM_Msk | (0x01UL << USIC_CH_TCSR_TDEN_Pos);
 1675              	 .loc 3 155 0
 1676 0080 224B     	 ldr r3,.L95+8
 1677 0082 224A     	 ldr r2,.L95+8
 1678 0084 926B     	 ldr r2,[r2,#56]
 1679 0086 A021     	 mov r1,#160
 1680 0088 C900     	 lsl r1,r1,#3
 1681 008a 0A43     	 orr r2,r1
 1682 008c 9A63     	 str r2,[r3,#56]
 156:../EasyMain.c **** 
 157:../EasyMain.c ****     /* Configuration of Protocol Control Register */
 158:../EasyMain.c ****     /* PCR.SMD = 1 (Sample Mode based on majority) */
 159:../EasyMain.c ****     /* PCR.STPB = 0 (1x Stop bit) */
 160:../EasyMain.c ****     /* PCR.SP = 5 (Sample Point) */
 161:../EasyMain.c ****     /* PCR.PL = 0 (Pulse Length is equal to the bit length) */
 162:../EasyMain.c ****     USIC0_CH1->PCR &= ~(USIC_CH_PCR_ASCMode_STPB_Msk | USIC_CH_PCR_ASCMode_SP_Msk | USIC_CH_PCR_ASC
 1683              	 .loc 3 162 0
 1684 008e 1F4B     	 ldr r3,.L95+8
 1685 0090 1E4A     	 ldr r2,.L95+8
 1686 0092 D26B     	 ldr r2,[r2,#60]
 1687 0094 2549     	 ldr r1,.L95+40
 1688 0096 0A40     	 and r2,r1
 1689 0098 DA63     	 str r2,[r3,#60]
 163:../EasyMain.c ****     USIC0_CH1->PCR |= USIC_CH_PCR_ASCMode_SMD_Msk | (9 << USIC_CH_PCR_ASCMode_SP_Pos);
 1690              	 .loc 3 163 0
 1691 009a 1C4B     	 ldr r3,.L95+8
 1692 009c 1B4A     	 ldr r2,.L95+8
 1693 009e D26B     	 ldr r2,[r2,#60]
 1694 00a0 2349     	 ldr r1,.L95+44
 1695 00a2 0A43     	 orr r2,r1
 1696 00a4 DA63     	 str r2,[r3,#60]
 164:../EasyMain.c **** 
 165:../EasyMain.c ****     /* Configure Transmit Buffer */
 166:../EasyMain.c ****     /* Standard transmit buffer event is enabled */
 167:../EasyMain.c ****     /* Define start entry of Transmit Data FIFO buffer DPTR = 0*/
 168:../EasyMain.c ****     USIC0_CH1->TBCTR &= ~(USIC_CH_TBCTR_SIZE_Msk | USIC_CH_TBCTR_DPTR_Msk);
 1697              	 .loc 3 168 0
 1698 00a6 1949     	 ldr r1,.L95+8
 1699 00a8 184A     	 ldr r2,.L95+8
 1700 00aa 8423     	 mov r3,#132
 1701 00ac 5B00     	 lsl r3,r3,#1
 1702 00ae D358     	 ldr r3,[r2,r3]
 1703 00b0 204A     	 ldr r2,.L95+48
 1704 00b2 1A40     	 and r2,r3
 1705 00b4 8423     	 mov r3,#132
 1706 00b6 5B00     	 lsl r3,r3,#1
 1707 00b8 CA50     	 str r2,[r1,r3]
 169:../EasyMain.c **** 
 170:../EasyMain.c ****     /* Set Transmit Data Buffer to 64 */
 171:../EasyMain.c ****     USIC0_CH1->TBCTR |= 0x06UL << USIC_CH_TBCTR_SIZE_Pos;
 1708              	 .loc 3 171 0
 1709 00ba 1449     	 ldr r1,.L95+8
 1710 00bc 134A     	 ldr r2,.L95+8
 1711 00be 8423     	 mov r3,#132
 1712 00c0 5B00     	 lsl r3,r3,#1
 1713 00c2 D358     	 ldr r3,[r2,r3]
 1714 00c4 C022     	 mov r2,#192
 1715 00c6 D204     	 lsl r2,r2,#19
 1716 00c8 1A43     	 orr r2,r3
 1717 00ca 8423     	 mov r3,#132
 1718 00cc 5B00     	 lsl r3,r3,#1
 1719 00ce CA50     	 str r2,[r1,r3]
 172:../EasyMain.c **** 
 173:../EasyMain.c ****     /* Initialize UART_RX (DX0)*/
 174:../EasyMain.c ****     /* P1.3 as input */
 175:../EasyMain.c ****     P1_3_set_mode(INPUT);
 1720              	 .loc 3 175 0
 1721 00d0 0020     	 mov r0,#0
 1722 00d2 FFF7FEFF 	 bl P1_3_set_mode
 176:../EasyMain.c **** 
 177:../EasyMain.c ****     /* Select P1.3 as input for USIC DX0 */
 178:../EasyMain.c ****     USIC0_CH1->DX0CR &= ~(USIC_CH_DX0CR_DSEL_Msk);
 1723              	 .loc 3 178 0
 1724 00d6 0D4B     	 ldr r3,.L95+8
 1725 00d8 0C4A     	 ldr r2,.L95+8
 1726 00da D269     	 ldr r2,[r2,#28]
 1727 00dc 0721     	 mov r1,#7
 1728 00de 8A43     	 bic r2,r1
 1729 00e0 DA61     	 str r2,[r3,#28]
 179:../EasyMain.c **** 
 180:../EasyMain.c ****     /* Initialize UART_TX (DOUT)*/
 181:../EasyMain.c ****     /* P1.2 as output controlled by ALT7 = U0C1.DOUT0 */
 182:../EasyMain.c ****     P1_2_set_mode(OUTPUT_PP_AF7);
 1730              	 .loc 3 182 0
 1731 00e2 B820     	 mov r0,#184
 1732 00e4 FFF7FEFF 	 bl P1_2_set_mode
 183:../EasyMain.c **** 
 184:../EasyMain.c ****     /* Configuration of Channel Control Register */
 185:../EasyMain.c ****     /* CCR.PM = 00 ( Disable parity generation) */
 186:../EasyMain.c ****     /* CCR.MODE = 2 (ASC mode enabled. Note: 0 (USIC channel is disabled)) */
 187:../EasyMain.c ****     USIC0_CH1->CCR &= ~(USIC_CH_CCR_PM_Msk | USIC_CH_CCR_MODE_Msk);
 1733              	 .loc 3 187 0
 1734 00e8 084B     	 ldr r3,.L95+8
 1735 00ea 084A     	 ldr r2,.L95+8
 1736 00ec 126C     	 ldr r2,[r2,#64]
 1737 00ee 1249     	 ldr r1,.L95+52
 1738 00f0 0A40     	 and r2,r1
 1739 00f2 1A64     	 str r2,[r3,#64]
 188:../EasyMain.c ****     USIC0_CH1->CCR |= 0x02UL << USIC_CH_CCR_MODE_Pos;
 1740              	 .loc 3 188 0
 1741 00f4 054B     	 ldr r3,.L95+8
 1742 00f6 054A     	 ldr r2,.L95+8
 1743 00f8 126C     	 ldr r2,[r2,#64]
 1744 00fa 0221     	 mov r1,#2
 1745 00fc 0A43     	 orr r2,r1
 1746 00fe 1A64     	 str r2,[r3,#64]
 189:../EasyMain.c **** 
 190:../EasyMain.c **** 
 191:../EasyMain.c **** }
 1747              	 .loc 3 191 0
 1748 0100 BD46     	 mov sp,r7
 1749              	 
 1750 0102 80BD     	 pop {r7,pc}
 1751              	.L96:
 1752              	 .align 2
 1753              	.L95:
 1754 0104 00000140 	 .word 1073807360
 1755 0108 00030140 	 .word 1073808128
 1756 010c 00020048 	 .word 1207960064
 1757 0110 003CFFFF 	 .word -50176
 1758 0114 4E820000 	 .word 33358
 1759 0118 EC8000FC 	 .word -67075860
 1760 011c 003C0400 	 .word 277504
 1761 0120 FFFCC0F0 	 .word -255787777
 1762 0124 02010707 	 .word 117899522
 1763 0128 FFF3FFFF 	 .word -3073
 1764 012c FD00FFFF 	 .word -65283
 1765 0130 01090000 	 .word 2305
 1766 0134 C0FFFFF8 	 .word -117440576
 1767 0138 F0FCFFFF 	 .word -784
 1768              	 .cfi_endproc
 1769              	.LFE399:
 1771              	 .section .text.SysTick_Handler,"ax",%progbits
 1772              	 .align 2
 1773              	 .global SysTick_Handler
 1774              	 .code 16
 1775              	 .thumb_func
 1777              	SysTick_Handler:
 1778              	.LFB400:
 192:../EasyMain.c **** 
 193:../EasyMain.c **** void SysTick_Handler(void)
 194:../EasyMain.c **** {
 1779              	 .loc 3 194 0
 1780              	 .cfi_startproc
 1781 0000 80B5     	 push {r7,lr}
 1782              	.LCFI82:
 1783              	 .cfi_def_cfa_offset 8
 1784              	 .cfi_offset 7,-8
 1785              	 .cfi_offset 14,-4
 1786 0002 00AF     	 add r7,sp,#0
 1787              	.LCFI83:
 1788              	 .cfi_def_cfa_register 7
 195:../EasyMain.c ****  /* This will be called with 10Hz */
 196:../EasyMain.c ****  /* We toggle the Red LED */
 197:../EasyMain.c ****  P0_4_toggle();
 1789              	 .loc 3 197 0
 1790 0004 FFF7FEFF 	 bl P0_4_toggle
 198:../EasyMain.c **** 
 199:../EasyMain.c **** }
 1791              	 .loc 3 199 0
 1792 0008 BD46     	 mov sp,r7
 1793              	 
 1794 000a 80BD     	 pop {r7,pc}
 1795              	 .cfi_endproc
 1796              	.LFE400:
 1798              	 .text
 1799              	.Letext0:
 1800              	 .file 4 "d:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1801              	 .file 5 "D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 1802              	 .file 6 "d:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1803              	 .file 7 "D:/Workspaces/DAVE/eHaJo/FlapFlap/Libraries/CMSIS/Infineon/XMC1100_series/Include/system_XMC1100.h"
DEFINED SYMBOLS
                            *ABS*:00000000 EasyMain.c
    {standard input}:18     .text.__NVIC_SetPriority:00000000 $t
    {standard input}:22     .text.__NVIC_SetPriority:00000000 __NVIC_SetPriority
    {standard input}:152    .text.__NVIC_SetPriority:000000cc $d
    {standard input}:158    .text.SysTick_Config:00000000 $t
    {standard input}:162    .text.SysTick_Config:00000000 SysTick_Config
    {standard input}:219    .text.SysTick_Config:00000040 $d
    {standard input}:225    .text.P0_1_set_mode:00000000 $t
    {standard input}:229    .text.P0_1_set_mode:00000000 P0_1_set_mode
    {standard input}:272    .text.P0_1_set_mode:00000030 $d
    {standard input}:278    .text.P0_2_set_mode:00000000 $t
    {standard input}:282    .text.P0_2_set_mode:00000000 P0_2_set_mode
    {standard input}:324    .text.P0_2_set_mode:00000030 $d
    {standard input}:330    .text.P0_3_set_mode:00000000 $t
    {standard input}:334    .text.P0_3_set_mode:00000000 P0_3_set_mode
    {standard input}:376    .text.P0_3_set_mode:00000030 $d
    {standard input}:381    .text.P0_3_reset:00000000 $t
    {standard input}:385    .text.P0_3_reset:00000000 P0_3_reset
    {standard input}:409    .text.P0_3_reset:00000010 $d
    {standard input}:414    .text.P0_4_set_mode:00000000 $t
    {standard input}:418    .text.P0_4_set_mode:00000000 P0_4_set_mode
    {standard input}:459    .text.P0_4_set_mode:0000002c $d
    {standard input}:464    .text.P0_4_reset:00000000 $t
    {standard input}:468    .text.P0_4_reset:00000000 P0_4_reset
    {standard input}:492    .text.P0_4_reset:00000010 $d
    {standard input}:497    .text.P0_4_toggle:00000000 $t
    {standard input}:501    .text.P0_4_toggle:00000000 P0_4_toggle
    {standard input}:524    .text.P0_4_toggle:00000010 $d
    {standard input}:530    .text.P1_0_set_mode:00000000 $t
    {standard input}:534    .text.P1_0_set_mode:00000000 P1_0_set_mode
    {standard input}:575    .text.P1_0_set_mode:0000002c $d
    {standard input}:580    .text.P1_1_set_mode:00000000 $t
    {standard input}:584    .text.P1_1_set_mode:00000000 P1_1_set_mode
    {standard input}:626    .text.P1_1_set_mode:00000030 $d
    {standard input}:632    .text.P1_2_set_mode:00000000 $t
    {standard input}:636    .text.P1_2_set_mode:00000000 P1_2_set_mode
    {standard input}:678    .text.P1_2_set_mode:00000030 $d
    {standard input}:684    .text.P1_3_set_mode:00000000 $t
    {standard input}:688    .text.P1_3_set_mode:00000000 P1_3_set_mode
    {standard input}:730    .text.P1_3_set_mode:00000030 $d
    {standard input}:735    .text.P1_4_set_mode:00000000 $t
    {standard input}:739    .text.P1_4_set_mode:00000000 P1_4_set_mode
    {standard input}:780    .text.P1_4_set_mode:0000002c $d
    {standard input}:785    .text.P1_5_set_mode:00000000 $t
    {standard input}:789    .text.P1_5_set_mode:00000000 P1_5_set_mode
    {standard input}:831    .text.P1_5_set_mode:00000030 $d
    {standard input}:837    .text.P2_1_set:00000000 $t
    {standard input}:841    .text.P2_1_set:00000000 P2_1_set
    {standard input}:864    .text.P2_1_set:00000010 $d
    {standard input}:869    .text.P2_2_set_mode:00000000 $t
    {standard input}:873    .text.P2_2_set_mode:00000000 P2_2_set_mode
    {standard input}:915    .text.P2_2_set_mode:00000030 $d
    {standard input}:921    .text.P2_2_reset:00000000 $t
    {standard input}:925    .text.P2_2_reset:00000000 P2_2_reset
    {standard input}:949    .text.P2_2_reset:00000010 $d
    {standard input}:954    .text.P2_3_set_mode:00000000 $t
    {standard input}:958    .text.P2_3_set_mode:00000000 P2_3_set_mode
    {standard input}:1000   .text.P2_3_set_mode:00000030 $d
    {standard input}:1005   .text.P2_3_set:00000000 $t
    {standard input}:1009   .text.P2_3_set:00000000 P2_3_set
    {standard input}:1032   .text.P2_3_set:00000010 $d
    {standard input}:1037   .text.P2_4_set_mode:00000000 $t
    {standard input}:1041   .text.P2_4_set_mode:00000000 P2_4_set_mode
    {standard input}:1082   .text.P2_4_set_mode:0000002c $d
    {standard input}:1087   .text.P2_5_set_mode:00000000 $t
    {standard input}:1091   .text.P2_5_set_mode:00000000 P2_5_set_mode
    {standard input}:1133   .text.P2_5_set_mode:00000030 $d
    {standard input}:1139   .text.P2_6_set_mode:00000000 $t
    {standard input}:1143   .text.P2_6_set_mode:00000000 P2_6_set_mode
    {standard input}:1185   .text.P2_6_set_mode:00000030 $d
    {standard input}:1191   .text.P2_7_set_mode:00000000 $t
    {standard input}:1195   .text.P2_7_set_mode:00000000 P2_7_set_mode
    {standard input}:1237   .text.P2_7_set_mode:00000030 $d
    {standard input}:1242   .text.P2_8_set_mode:00000000 $t
    {standard input}:1246   .text.P2_8_set_mode:00000000 P2_8_set_mode
    {standard input}:1287   .text.P2_8_set_mode:0000002c $d
    {standard input}:1292   .text.P2_9_set_mode:00000000 $t
    {standard input}:1296   .text.P2_9_set_mode:00000000 P2_9_set_mode
    {standard input}:1338   .text.P2_9_set_mode:00000030 $d
    {standard input}:1344   .text.P2_10_set_mode:00000000 $t
    {standard input}:1348   .text.P2_10_set_mode:00000000 P2_10_set_mode
    {standard input}:1390   .text.P2_10_set_mode:00000030 $d
    {standard input}:1396   .text.P2_11_set_mode:00000000 $t
    {standard input}:1400   .text.P2_11_set_mode:00000000 P2_11_set_mode
    {standard input}:1442   .text.P2_11_set_mode:00000030 $d
    {standard input}:1448   .text.main:00000000 $t
    {standard input}:1453   .text.main:00000000 main
    {standard input}:1577   .text.main:000000d0 $d
    {standard input}:1585   .text.UART_Init:00000000 $t
    {standard input}:1590   .text.UART_Init:00000000 UART_Init
    {standard input}:1754   .text.UART_Init:00000104 $d
    {standard input}:1772   .text.SysTick_Handler:00000000 $t
    {standard input}:1777   .text.SysTick_Handler:00000000 SysTick_Handler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClockUpdate
SystemCoreClock
