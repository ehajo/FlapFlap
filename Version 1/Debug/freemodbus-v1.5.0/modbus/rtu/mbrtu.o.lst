   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,1
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "mbrtu.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .global __aeabi_uidiv
  18              	 .section .text.eMBRTUInit,"ax",%progbits
  19              	 .align 2
  20              	 .global eMBRTUInit
  21              	 .code 16
  22              	 .thumb_func
  24              	eMBRTUInit:
  25              	.LFB100:
  26              	 .file 1 "../freemodbus-v1.5.0/modbus/rtu/mbrtu.c"
   1:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* 
   2:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * Copyright (c) 2006 Christian Walter <wolti@sil.at>
   4:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * All rights reserved.
   5:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  *
   6:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * Redistribution and use in source and binary forms, with or without
   7:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * modification, are permitted provided that the following conditions
   8:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * are met:
   9:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * 1. Redistributions of source code must retain the above copyright
  10:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  *    notice, this list of conditions and the following disclaimer.
  11:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  *    documentation and/or other materials provided with the distribution.
  14:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  *    derived from this software without specific prior written permission.
  16:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  *
  17:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  *
  28:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  * File: $Id: mbrtu.c,v 1.18 2007/09/12 10:15:56 wolti Exp $
  29:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****  */
  30:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  31:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* ----------------------- System includes ----------------------------------*/
  32:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "stdlib.h"
  33:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "string.h"
  34:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  35:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* ----------------------- Platform includes --------------------------------*/
  36:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "port.h"
  37:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  38:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* ----------------------- Modbus includes ----------------------------------*/
  39:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "mb.h"
  40:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "mbrtu.h"
  41:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "mbframe.h"
  42:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  43:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "mbcrc.h"
  44:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #include "mbport.h"
  45:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  46:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* ----------------------- Defines ------------------------------------------*/
  47:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #define MB_SER_PDU_SIZE_MIN     4       /*!< Minimum size of a Modbus RTU frame. */
  48:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #define MB_SER_PDU_SIZE_MAX     256     /*!< Maximum size of a Modbus RTU frame. */
  49:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #define MB_SER_PDU_SIZE_CRC     2       /*!< Size of CRC field in PDU. */
  50:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #define MB_SER_PDU_ADDR_OFF     0       /*!< Offset of slave address in Ser-PDU. */
  51:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** #define MB_SER_PDU_PDU_OFF      1       /*!< Offset of Modbus-PDU in Ser-PDU. */
  52:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  53:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* ----------------------- Type definitions ---------------------------------*/
  54:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** typedef enum
  55:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
  56:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     STATE_RX_INIT,              /*!< Receiver is in initial state. */
  57:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     STATE_RX_IDLE,              /*!< Receiver is in idle state. */
  58:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     STATE_RX_RCV,               /*!< Frame is beeing received. */
  59:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     STATE_RX_ERROR              /*!< If the frame is invalid. */
  60:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** } eMBRcvState;
  61:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  62:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** typedef enum
  63:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
  64:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     STATE_TX_IDLE,              /*!< Transmitter is in idle state. */
  65:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     STATE_TX_XMIT               /*!< Transmitter is in transfer state. */
  66:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** } eMBSndState;
  67:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  68:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* ----------------------- Static variables ---------------------------------*/
  69:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** static volatile eMBSndState eSndState;
  70:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** static volatile eMBRcvState eRcvState;
  71:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  72:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** volatile UCHAR  ucRTUBuf[MB_SER_PDU_SIZE_MAX];
  73:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  74:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** static volatile UCHAR *pucSndBufferCur;
  75:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** static volatile USHORT usSndBufferCount;
  76:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  77:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** static volatile USHORT usRcvBufferPos;
  78:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  79:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** /* ----------------------- Start implementation -----------------------------*/
  80:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBErrorCode
  81:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
  82:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
  27              	 .loc 1 82 0
  28              	 .cfi_startproc
  29              	.LVL0:
  30 0000 10B5     	 push {r4,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 4,-8
  34              	 .cfi_offset 14,-4
  35 0002 141C     	 mov r4,r2
  36              	.LVL1:
  37              	.LBB22:
  38              	.LBB23:
  39              	 .file 2 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.0.1
   5:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     02. February 2017
   6:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  36:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                     __asm
  37:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  39:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                  inline
  40:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  41:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  44:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  47:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  48:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                    __attribute__((used))
  49:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  50:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  51:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  53:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  55:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wpacked"
  56:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wattributes"
  57:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  58:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic pop
  59:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  60:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
  62:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  63:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  65:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  66:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  68:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT           struct __attribute__((packed, aligned(1)))
  69:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  71:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  72:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  73:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  74:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  75:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
  76:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  77:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  78:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  79:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  80:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  81:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
  82:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  83:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  84:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  85:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  86:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  87:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  88:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  89:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  90:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  91:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  92:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
  93:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  94:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  95:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  96:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  40              	 .loc 2 96 0
  41              	
  42 0004 72B6     	 cpsid i
  43              	
  44              	 .code 16
  45              	.LBE23:
  46              	.LBE22:
  83:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     eMBErrorCode    eStatus = MB_ENOERR;
  84:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ULONG           usTimerT35_50us;
  85:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  86:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ( void )ucSlaveAddress;
  87:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
  88:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
  89:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     /* Modbus RTU uses 8 Databits. */
  90:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
  47              	 .loc 1 90 0
  48 0006 081C     	 mov r0,r1
  49              	.LVL2:
  50 0008 111C     	 mov r1,r2
  51              	.LVL3:
  52 000a 0822     	 mov r2,#8
  53              	.LVL4:
  54 000c FFF7FEFF 	 bl xMBPortSerialInit
  55              	.LVL5:
  56 0010 0128     	 cmp r0,#1
  57 0012 10D1     	 bne .L4
  91:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
  92:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         eStatus = MB_EPORTERR;
  93:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
  94:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     else
  95:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
  96:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* If baudrate > 19200 then we should use the fixed timer values
  97:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
  98:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          */
  99:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         if( ulBaudRate > 19200 )
  58              	 .loc 1 99 0
  59 0014 9623     	 mov r3,#150
  60 0016 DB01     	 lsl r3,r3,#7
  61 0018 9C42     	 cmp r4,r3
  62 001a 04D8     	 bhi .L5
 100:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         {
 101:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             usTimerT35_50us = 35;       /* 1800us. */
 102:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
 103:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         else
 104:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         {
 105:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             /* The timer reload value for a character is given by:
 106:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              *
 107:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              * ChTimeValue = Ticks_per_1s / ( Baudrate / 11 )
 108:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              *             = 11 * Ticks_per_1s / Baudrate
 109:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              *             = 220000 / Baudrate
 110:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              * The reload for t3.5 is 1.5 times this value and similary
 111:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              * for t3.5.
 112:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              */
 113:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
  63              	 .loc 1 113 0
  64 001c 6100     	 lsl r1,r4,#1
  65 001e 0848     	 ldr r0,.L7
  66 0020 FFF7FEFF 	 bl __aeabi_uidiv
  67              	.LVL6:
  68 0024 00E0     	 b .L3
  69              	.LVL7:
  70              	.L5:
 101:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
  71              	 .loc 1 101 0
  72 0026 2320     	 mov r0,#35
  73              	.L3:
  74              	.LVL8:
 114:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
 115:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
  75              	 .loc 1 115 0
  76 0028 80B2     	 uxth r0,r0
  77              	.LVL9:
  78 002a FFF7FEFF 	 bl xMBPortTimersInit
  79              	.LVL10:
  80 002e 0128     	 cmp r0,#1
  81 0030 03D1     	 bne .L6
  83:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ULONG           usTimerT35_50us;
  82              	 .loc 1 83 0
  83 0032 0020     	 mov r0,#0
  84 0034 02E0     	 b .L2
  85              	.L4:
  92:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
  86              	 .loc 1 92 0
  87 0036 0320     	 mov r0,#3
  88 0038 00E0     	 b .L2
  89              	.L6:
 116:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         {
 117:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             eStatus = MB_EPORTERR;
  90              	 .loc 1 117 0
  91 003a 0320     	 mov r0,#3
  92              	.L2:
  93              	.LVL11:
  94              	.LBB24:
  95              	.LBB25:
  85:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  96              	 .loc 2 85 0
  97              	
  98 003c 62B6     	 cpsie i
  99              	
 100              	 .code 16
 101              	.LBE25:
 102              	.LBE24:
 118:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
 119:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 120:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 121:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 122:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     return eStatus;
 123:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 103              	 .loc 1 123 0
 104              	 
 105              	.LVL12:
 106 003e 10BD     	 pop {r4,pc}
 107              	.L8:
 108              	 .align 2
 109              	.L7:
 110 0040 A07F1700 	 .word 1540000
 111              	 .cfi_endproc
 112              	.LFE100:
 114              	 .section .text.eMBRTUStart,"ax",%progbits
 115              	 .align 2
 116              	 .global eMBRTUStart
 117              	 .code 16
 118              	 .thumb_func
 120              	eMBRTUStart:
 121              	.LFB101:
 124:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 125:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** void
 126:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBRTUStart( void )
 127:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
 122              	 .loc 1 127 0
 123              	 .cfi_startproc
 124 0000 08B5     	 push {r3,lr}
 125              	.LCFI1:
 126              	 .cfi_def_cfa_offset 8
 127              	 .cfi_offset 3,-8
 128              	 .cfi_offset 14,-4
 129              	.LBB26:
 130              	.LBB27:
 131              	 .loc 2 96 0
 132              	
 133 0002 72B6     	 cpsid i
 134              	
 135              	 .code 16
 136              	.LBE27:
 137              	.LBE26:
 128:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 129:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     /* Initially the receiver is in the state STATE_RX_INIT. we start
 130:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****      * the timer and if no character is received within t3.5 we change
 131:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****      * to STATE_RX_IDLE. This makes sure that we delay startup of the
 132:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****      * modbus protocol stack until the bus is free.
 133:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****      */
 134:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     eRcvState = STATE_RX_INIT;
 138              	 .loc 1 134 0
 139 0004 0022     	 mov r2,#0
 140 0006 054B     	 ldr r3,.L10
 141 0008 1A70     	 strb r2,[r3]
 135:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     vMBPortSerialEnable( TRUE, FALSE );
 142              	 .loc 1 135 0
 143 000a 0120     	 mov r0,#1
 144 000c 0021     	 mov r1,#0
 145 000e FFF7FEFF 	 bl vMBPortSerialEnable
 146              	.LVL13:
 136:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     vMBPortTimersEnable(  );
 147              	 .loc 1 136 0
 148 0012 FFF7FEFF 	 bl vMBPortTimersEnable
 149              	.LVL14:
 150              	.LBB28:
 151              	.LBB29:
  85:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 152              	 .loc 2 85 0
 153              	
 154 0016 62B6     	 cpsie i
 155              	
 156              	 .code 16
 157              	.LBE29:
 158              	.LBE28:
 137:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 138:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 139:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 159              	 .loc 1 139 0
 160              	 
 161 0018 08BD     	 pop {r3,pc}
 162              	.L11:
 163 001a C046     	 .align 2
 164              	.L10:
 165 001c 00000000 	 .word .LANCHOR0
 166              	 .cfi_endproc
 167              	.LFE101:
 169              	 .section .text.eMBRTUStop,"ax",%progbits
 170              	 .align 2
 171              	 .global eMBRTUStop
 172              	 .code 16
 173              	 .thumb_func
 175              	eMBRTUStop:
 176              	.LFB102:
 140:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 141:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** void
 142:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBRTUStop( void )
 143:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
 177              	 .loc 1 143 0
 178              	 .cfi_startproc
 179 0000 08B5     	 push {r3,lr}
 180              	.LCFI2:
 181              	 .cfi_def_cfa_offset 8
 182              	 .cfi_offset 3,-8
 183              	 .cfi_offset 14,-4
 184              	.LBB30:
 185              	.LBB31:
 186              	 .loc 2 96 0
 187              	
 188 0002 72B6     	 cpsid i
 189              	
 190              	 .code 16
 191              	.LBE31:
 192              	.LBE30:
 144:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 145:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     vMBPortSerialEnable( FALSE, FALSE );
 193              	 .loc 1 145 0
 194 0004 0020     	 mov r0,#0
 195 0006 0021     	 mov r1,#0
 196 0008 FFF7FEFF 	 bl vMBPortSerialEnable
 197              	.LVL15:
 146:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     vMBPortTimersDisable(  );
 198              	 .loc 1 146 0
 199 000c FFF7FEFF 	 bl vMBPortTimersDisable
 200              	.LVL16:
 201              	.LBB32:
 202              	.LBB33:
  85:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 203              	 .loc 2 85 0
 204              	
 205 0010 62B6     	 cpsie i
 206              	
 207              	 .code 16
 208              	.LBE33:
 209              	.LBE32:
 147:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 148:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 210              	 .loc 1 148 0
 211              	 
 212 0012 08BD     	 pop {r3,pc}
 213              	 .cfi_endproc
 214              	.LFE102:
 216              	 .section .text.eMBRTUReceive,"ax",%progbits
 217              	 .align 2
 218              	 .global eMBRTUReceive
 219              	 .code 16
 220              	 .thumb_func
 222              	eMBRTUReceive:
 223              	.LFB103:
 149:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 150:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBErrorCode
 151:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
 152:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
 224              	 .loc 1 152 0
 225              	 .cfi_startproc
 226              	.LVL17:
 227 0000 70B5     	 push {r4,r5,r6,lr}
 228              	.LCFI3:
 229              	 .cfi_def_cfa_offset 16
 230              	 .cfi_offset 4,-16
 231              	 .cfi_offset 5,-12
 232              	 .cfi_offset 6,-8
 233              	 .cfi_offset 14,-4
 234              	.LVL18:
 235              	.LBB34:
 236              	.LBB35:
 237              	 .loc 2 96 0
 238              	
 239 0002 72B6     	 cpsid i
 240              	
 241              	 .code 16
 242              	.LBE35:
 243              	.LBE34:
 153:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     BOOL            xFrameReceived = FALSE;
 154:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 155:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 156:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 157:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 158:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 159:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     /* Length and CRC check */
 160:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 244              	 .loc 1 160 0
 245 0004 0F4B     	 ldr r3,.L17
 246 0006 1B88     	 ldrh r3,[r3]
 247 0008 9BB2     	 uxth r3,r3
 248 000a 032B     	 cmp r3,#3
 249 000c 14D9     	 bls .L15
 250 000e 151C     	 mov r5,r2
 251 0010 0C1C     	 mov r4,r1
 252 0012 061C     	 mov r6,r0
 161:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 253              	 .loc 1 161 0
 254 0014 0B4B     	 ldr r3,.L17
 255 0016 1988     	 ldrh r1,[r3]
 256              	.LVL19:
 257 0018 89B2     	 uxth r1,r1
 258 001a 0B48     	 ldr r0,.L17+4
 259              	.LVL20:
 260 001c FFF7FEFF 	 bl usMBCRC16
 261              	.LVL21:
 262 0020 0028     	 cmp r0,#0
 263 0022 0BD1     	 bne .L16
 162:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
 163:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Save the address field. All frames are passed to the upper layed
 164:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * and the decision if a frame is used is done there.
 165:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          */
 166:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 264              	 .loc 1 166 0
 265 0024 084B     	 ldr r3,.L17+4
 266 0026 1A78     	 ldrb r2,[r3]
 267 0028 3270     	 strb r2,[r6]
 167:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 168:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
 169:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * size of address field and CRC checksum.
 170:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          */
 171:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 268              	 .loc 1 171 0
 269 002a 064A     	 ldr r2,.L17
 270 002c 1288     	 ldrh r2,[r2]
 271 002e 033A     	 sub r2,r2,#3
 272 0030 2A80     	 strh r2,[r5]
 172:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 173:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Return the start of the Modbus PDU to the caller. */
 174:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 273              	 .loc 1 174 0
 274 0032 0133     	 add r3,r3,#1
 275 0034 2360     	 str r3,[r4]
 276              	.LVL22:
 175:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         xFrameReceived = TRUE;
 277              	 .loc 1 175 0
 278 0036 02E0     	 b .L14
 279              	.LVL23:
 280              	.L15:
 176:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 177:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     else
 178:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
 179:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         eStatus = MB_EIO;
 281              	 .loc 1 179 0
 282 0038 0520     	 mov r0,#5
 283              	.LVL24:
 284 003a 00E0     	 b .L14
 285              	.LVL25:
 286              	.L16:
 287 003c 0520     	 mov r0,#5
 288              	.LVL26:
 289              	.L14:
 290              	.LBB36:
 291              	.LBB37:
  85:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 292              	 .loc 2 85 0
 293              	
 294 003e 62B6     	 cpsie i
 295              	
 296              	 .code 16
 297              	.LBE37:
 298              	.LBE36:
 180:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 181:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 182:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 183:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     return eStatus;
 184:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 299              	 .loc 1 184 0
 300              	 
 301 0040 70BD     	 pop {r4,r5,r6,pc}
 302              	.L18:
 303 0042 C046     	 .align 2
 304              	.L17:
 305 0044 00000000 	 .word .LANCHOR1
 306 0048 00000000 	 .word ucRTUBuf
 307              	 .cfi_endproc
 308              	.LFE103:
 310              	 .section .text.eMBRTUSend,"ax",%progbits
 311              	 .align 2
 312              	 .global eMBRTUSend
 313              	 .code 16
 314              	 .thumb_func
 316              	eMBRTUSend:
 317              	.LFB104:
 185:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 186:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBErrorCode
 187:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
 188:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
 318              	 .loc 1 188 0
 319              	 .cfi_startproc
 320              	.LVL27:
 321 0000 10B5     	 push {r4,lr}
 322              	.LCFI4:
 323              	 .cfi_def_cfa_offset 8
 324              	 .cfi_offset 4,-8
 325              	 .cfi_offset 14,-4
 326              	.LVL28:
 327              	.LBB38:
 328              	.LBB39:
 329              	 .loc 2 96 0
 330              	
 331 0002 72B6     	 cpsid i
 332              	
 333              	 .code 16
 334              	.LBE39:
 335              	.LBE38:
 189:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 190:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     USHORT          usCRC16;
 191:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 192:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 193:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 194:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     /* Check if the receiver is still in idle state. If not we where to
 195:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****      * slow with processing the received frame and the master sent another
 196:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****      * frame on the network. We have to abort sending the frame.
 197:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****      */
 198:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     if( eRcvState == STATE_RX_IDLE )
 336              	 .loc 1 198 0
 337 0004 174B     	 ldr r3,.L22
 338 0006 1B78     	 ldrb r3,[r3]
 339 0008 012B     	 cmp r3,#1
 340 000a 28D1     	 bne .L21
 199:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
 200:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* First byte before the Modbus-PDU is the slave address. */
 201:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 341              	 .loc 1 201 0
 342 000c 4B1E     	 sub r3,r1,#1
 343 000e 1649     	 ldr r1,.L22+4
 344              	.LVL29:
 345 0010 0B60     	 str r3,[r1]
 202:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         usSndBufferCount = 1;
 346              	 .loc 1 202 0
 347 0012 164C     	 ldr r4,.L22+8
 348 0014 0121     	 mov r1,#1
 349 0016 2180     	 strh r1,[r4]
 203:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 204:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
 205:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 350              	 .loc 1 205 0
 351 0018 1870     	 strb r0,[r3]
 206:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         usSndBufferCount += usLength;
 352              	 .loc 1 206 0
 353 001a 2188     	 ldrh r1,[r4]
 354 001c 8A18     	 add r2,r1,r2
 355              	.LVL30:
 356 001e 92B2     	 uxth r2,r2
 357 0020 2280     	 strh r2,[r4]
 207:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 208:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
 209:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 358              	 .loc 1 209 0
 359 0022 2188     	 ldrh r1,[r4]
 360 0024 89B2     	 uxth r1,r1
 361 0026 181C     	 mov r0,r3
 362              	.LVL31:
 363 0028 FFF7FEFF 	 bl usMBCRC16
 364              	.LVL32:
 210:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 365              	 .loc 1 210 0
 366 002c 2388     	 ldrh r3,[r4]
 367 002e 9BB2     	 uxth r3,r3
 368 0030 5A1C     	 add r2,r3,#1
 369 0032 92B2     	 uxth r2,r2
 370 0034 2280     	 strh r2,[r4]
 371 0036 C2B2     	 uxtb r2,r0
 372 0038 0D49     	 ldr r1,.L22+12
 373 003a CA54     	 strb r2,[r1,r3]
 211:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 374              	 .loc 1 211 0
 375 003c 2388     	 ldrh r3,[r4]
 376 003e 9BB2     	 uxth r3,r3
 377 0040 5A1C     	 add r2,r3,#1
 378 0042 92B2     	 uxth r2,r2
 379 0044 2280     	 strh r2,[r4]
 380 0046 000A     	 lsr r0,r0,#8
 381              	.LVL33:
 382 0048 C0B2     	 uxtb r0,r0
 383 004a C854     	 strb r0,[r1,r3]
 212:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 213:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Activate the transmitter. */
 214:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         eSndState = STATE_TX_XMIT;
 384              	 .loc 1 214 0
 385 004c 094B     	 ldr r3,.L22+16
 386 004e 0122     	 mov r2,#1
 387 0050 1A70     	 strb r2,[r3]
 215:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         vMBPortSerialEnable( FALSE, TRUE );
 388              	 .loc 1 215 0
 389 0052 0020     	 mov r0,#0
 390 0054 0121     	 mov r1,#1
 391 0056 FFF7FEFF 	 bl vMBPortSerialEnable
 392              	.LVL34:
 189:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     USHORT          usCRC16;
 393              	 .loc 1 189 0
 394 005a 0020     	 mov r0,#0
 395 005c 00E0     	 b .L20
 396              	.LVL35:
 397              	.L21:
 216:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 217:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     else
 218:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
 219:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         eStatus = MB_EIO;
 398              	 .loc 1 219 0
 399 005e 0520     	 mov r0,#5
 400              	.LVL36:
 401              	.L20:
 402              	.LBB40:
 403              	.LBB41:
  85:C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 404              	 .loc 2 85 0
 405              	
 406 0060 62B6     	 cpsie i
 407              	
 408              	 .code 16
 409              	.LBE41:
 410              	.LBE40:
 220:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 221:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 222:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     return eStatus;
 223:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 411              	 .loc 1 223 0
 412              	 
 413 0062 10BD     	 pop {r4,pc}
 414              	.L23:
 415              	 .align 2
 416              	.L22:
 417 0064 00000000 	 .word .LANCHOR0
 418 0068 00000000 	 .word .LANCHOR2
 419 006c 00000000 	 .word .LANCHOR3
 420 0070 00000000 	 .word ucRTUBuf
 421 0074 00000000 	 .word .LANCHOR4
 422              	 .cfi_endproc
 423              	.LFE104:
 425              	 .section .text.xMBRTUReceiveFSM,"ax",%progbits
 426              	 .align 2
 427              	 .global xMBRTUReceiveFSM
 428              	 .code 16
 429              	 .thumb_func
 431              	xMBRTUReceiveFSM:
 432              	.LFB105:
 224:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 225:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** BOOL
 226:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** xMBRTUReceiveFSM( void )
 227:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
 433              	 .loc 1 227 0
 434              	 .cfi_startproc
 435 0000 00B5     	 push {lr}
 436              	.LCFI5:
 437              	 .cfi_def_cfa_offset 4
 438              	 .cfi_offset 14,-4
 439 0002 83B0     	 sub sp,sp,#12
 440              	.LCFI6:
 441              	 .cfi_def_cfa_offset 16
 442              	.LVL37:
 228:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     BOOL            xTaskNeedSwitch = FALSE;
 229:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     UCHAR           ucByte;
 230:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 231:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     assert( eSndState == STATE_TX_IDLE );
 232:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 233:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     /* Always read the character. */
 234:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 443              	 .loc 1 234 0
 444 0004 6B46     	 mov r3,sp
 445 0006 D81D     	 add r0,r3,#7
 446 0008 FFF7FEFF 	 bl xMBPortSerialGetByte
 447              	.LVL38:
 235:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 236:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     switch ( eRcvState )
 448              	 .loc 1 236 0
 449 000c 1D4B     	 ldr r3,.L32
 450 000e 1B78     	 ldrb r3,[r3]
 451 0010 DBB2     	 uxtb r3,r3
 452 0012 012B     	 cmp r3,#1
 453 0014 0CD0     	 beq .L26
 454 0016 002B     	 cmp r3,#0
 455 0018 04D0     	 beq .L27
 456 001a 022B     	 cmp r3,#2
 457 001c 1AD0     	 beq .L28
 458 001e 032B     	 cmp r3,#3
 459 0020 03D0     	 beq .L29
 460 0022 2CE0     	 b .L25
 461              	.L27:
 237:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
 238:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* If we have received a character in the init state we have to
 239:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * wait until the frame is finished.
 240:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          */
 241:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_RX_INIT:
 242:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         vMBPortTimersEnable(  );
 462              	 .loc 1 242 0
 463 0024 FFF7FEFF 	 bl vMBPortTimersEnable
 464              	.LVL39:
 243:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 465              	 .loc 1 243 0
 466 0028 29E0     	 b .L25
 467              	.L29:
 244:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 245:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* In the error state we wait until all characters in the
 246:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * damaged frame are transmitted.
 247:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          */
 248:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_RX_ERROR:
 249:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         vMBPortTimersEnable(  );
 468              	 .loc 1 249 0
 469 002a FFF7FEFF 	 bl vMBPortTimersEnable
 470              	.LVL40:
 250:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 471              	 .loc 1 250 0
 472 002e 26E0     	 b .L25
 473              	.L26:
 251:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 252:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* In the idle state we wait for a new character. If a character
 253:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * is received the t1.5 and t3.5 timers are started and the
 254:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * receiver is in the state STATE_RX_RECEIVCE.
 255:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          */
 256:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_RX_IDLE:
 257:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         usRcvBufferPos = 0;
 474              	 .loc 1 257 0
 475 0030 154A     	 ldr r2,.L32+4
 476 0032 0023     	 mov r3,#0
 477 0034 1380     	 strh r3,[r2]
 258:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         ucRTUBuf[usRcvBufferPos++] = ucByte;
 478              	 .loc 1 258 0
 479 0036 1388     	 ldrh r3,[r2]
 480 0038 9BB2     	 uxth r3,r3
 481 003a 591C     	 add r1,r3,#1
 482 003c 89B2     	 uxth r1,r1
 483 003e 1180     	 strh r1,[r2]
 484 0040 6A46     	 mov r2,sp
 485 0042 D179     	 ldrb r1,[r2,#7]
 486 0044 114A     	 ldr r2,.L32+8
 487 0046 D154     	 strb r1,[r2,r3]
 259:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         eRcvState = STATE_RX_RCV;
 488              	 .loc 1 259 0
 489 0048 0222     	 mov r2,#2
 490 004a 0E4B     	 ldr r3,.L32
 491 004c 1A70     	 strb r2,[r3]
 260:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 261:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Enable t3.5 timers. */
 262:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         vMBPortTimersEnable(  );
 492              	 .loc 1 262 0
 493 004e FFF7FEFF 	 bl vMBPortTimersEnable
 494              	.LVL41:
 263:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 495              	 .loc 1 263 0
 496 0052 14E0     	 b .L25
 497              	.L28:
 264:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 265:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* We are currently receiving a frame. Reset the timer after
 266:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * every character received. If more than the maximum possible
 267:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * number of bytes in a modbus frame is received the frame is
 268:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * ignored.
 269:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          */
 270:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_RX_RCV:
 271:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 498              	 .loc 1 271 0
 499 0054 0C4B     	 ldr r3,.L32+4
 500 0056 1B88     	 ldrh r3,[r3]
 501 0058 9BB2     	 uxth r3,r3
 502 005a FF2B     	 cmp r3,#255
 503 005c 0AD8     	 bhi .L30
 272:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         {
 273:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             ucRTUBuf[usRcvBufferPos++] = ucByte;
 504              	 .loc 1 273 0
 505 005e 0A49     	 ldr r1,.L32+4
 506 0060 0B88     	 ldrh r3,[r1]
 507 0062 9BB2     	 uxth r3,r3
 508 0064 5A1C     	 add r2,r3,#1
 509 0066 92B2     	 uxth r2,r2
 510 0068 0A80     	 strh r2,[r1]
 511 006a 6A46     	 mov r2,sp
 512 006c D179     	 ldrb r1,[r2,#7]
 513 006e 074A     	 ldr r2,.L32+8
 514 0070 D154     	 strb r1,[r2,r3]
 515 0072 02E0     	 b .L31
 516              	.L30:
 274:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
 275:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         else
 276:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         {
 277:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             eRcvState = STATE_RX_ERROR;
 517              	 .loc 1 277 0
 518 0074 0322     	 mov r2,#3
 519 0076 034B     	 ldr r3,.L32
 520 0078 1A70     	 strb r2,[r3]
 521              	.L31:
 278:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
 279:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         vMBPortTimersEnable(  );
 522              	 .loc 1 279 0
 523 007a FFF7FEFF 	 bl vMBPortTimersEnable
 524              	.LVL42:
 525              	.L25:
 280:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 281:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 282:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     return xTaskNeedSwitch;
 283:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 526              	 .loc 1 283 0
 527 007e 0020     	 mov r0,#0
 528 0080 03B0     	 add sp,sp,#12
 529              	 
 530 0082 00BD     	 pop {pc}
 531              	.L33:
 532              	 .align 2
 533              	.L32:
 534 0084 00000000 	 .word .LANCHOR0
 535 0088 00000000 	 .word .LANCHOR1
 536 008c 00000000 	 .word ucRTUBuf
 537              	 .cfi_endproc
 538              	.LFE105:
 540              	 .section .text.xMBRTUTransmitFSM,"ax",%progbits
 541              	 .align 2
 542              	 .global xMBRTUTransmitFSM
 543              	 .code 16
 544              	 .thumb_func
 546              	xMBRTUTransmitFSM:
 547              	.LFB106:
 284:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 285:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** BOOL
 286:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** xMBRTUTransmitFSM( void )
 287:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
 548              	 .loc 1 287 0
 549              	 .cfi_startproc
 550 0000 10B5     	 push {r4,lr}
 551              	.LCFI7:
 552              	 .cfi_def_cfa_offset 8
 553              	 .cfi_offset 4,-8
 554              	 .cfi_offset 14,-4
 555              	.LVL43:
 288:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     BOOL            xNeedPoll = FALSE;
 289:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 290:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     assert( eRcvState == STATE_RX_IDLE );
 291:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 292:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     switch ( eSndState )
 556              	 .loc 1 292 0
 557 0002 194B     	 ldr r3,.L41
 558 0004 1B78     	 ldrb r3,[r3]
 559 0006 DBB2     	 uxtb r3,r3
 560 0008 002B     	 cmp r3,#0
 561 000a 02D0     	 beq .L36
 562 000c 012B     	 cmp r3,#1
 563 000e 06D0     	 beq .L37
 564 0010 26E0     	 b .L40
 565              	.L36:
 293:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
 294:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* We should not get a transmitter event if the transmitter is in
 295:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * idle state.  */
 296:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_TX_IDLE:
 297:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* enable receiver/disable transmitter. */
 298:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         vMBPortSerialEnable( TRUE, FALSE );
 566              	 .loc 1 298 0
 567 0012 0120     	 mov r0,#1
 568 0014 0021     	 mov r1,#0
 569 0016 FFF7FEFF 	 bl vMBPortSerialEnable
 570              	.LVL44:
 288:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     BOOL            xNeedPoll = FALSE;
 571              	 .loc 1 288 0
 572 001a 0024     	 mov r4,#0
 299:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 573              	 .loc 1 299 0
 574 001c 21E0     	 b .L35
 575              	.L37:
 300:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 301:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_TX_XMIT:
 302:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* check if we are finished. */
 303:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         if( usSndBufferCount != 0 )
 576              	 .loc 1 303 0
 577 001e 134B     	 ldr r3,.L41+4
 578 0020 1B88     	 ldrh r3,[r3]
 579 0022 9BB2     	 uxth r3,r3
 580 0024 002B     	 cmp r3,#0
 581 0026 0FD0     	 beq .L38
 304:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         {
 305:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 582              	 .loc 1 305 0
 583 0028 114C     	 ldr r4,.L41+8
 584 002a 2368     	 ldr r3,[r4]
 585 002c 1878     	 ldrb r0,[r3]
 586 002e 40B2     	 sxtb r0,r0
 587 0030 FFF7FEFF 	 bl xMBPortSerialPutByte
 588              	.LVL45:
 306:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             pucSndBufferCur++;  /* next byte in sendbuffer. */
 589              	 .loc 1 306 0
 590 0034 2368     	 ldr r3,[r4]
 591 0036 0133     	 add r3,r3,#1
 592 0038 2360     	 str r3,[r4]
 307:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             usSndBufferCount--;
 593              	 .loc 1 307 0
 594 003a 0C4A     	 ldr r2,.L41+4
 595 003c 1388     	 ldrh r3,[r2]
 596 003e 013B     	 sub r3,r3,#1
 597 0040 9BB2     	 uxth r3,r3
 598 0042 1380     	 strh r3,[r2]
 288:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 599              	 .loc 1 288 0
 600 0044 0024     	 mov r4,#0
 601 0046 0CE0     	 b .L35
 602              	.L38:
 308:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
 309:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         else
 310:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         {
 311:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 603              	 .loc 1 311 0
 604 0048 0320     	 mov r0,#3
 605 004a FFF7FEFF 	 bl xMBPortEventPost
 606              	.LVL46:
 607 004e 041C     	 mov r4,r0
 608              	.LVL47:
 312:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             /* Disable transmitter. This prevents another transmit buffer
 313:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****              * empty interrupt. */
 314:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             vMBPortSerialEnable( TRUE, FALSE );
 609              	 .loc 1 314 0
 610 0050 0120     	 mov r0,#1
 611              	.LVL48:
 612 0052 0021     	 mov r1,#0
 613 0054 FFF7FEFF 	 bl vMBPortSerialEnable
 614              	.LVL49:
 315:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****             eSndState = STATE_TX_IDLE;
 615              	 .loc 1 315 0
 616 0058 0022     	 mov r2,#0
 617 005a 034B     	 ldr r3,.L41
 618 005c 1A70     	 strb r2,[r3]
 619 005e 00E0     	 b .L35
 620              	.LVL50:
 621              	.L40:
 288:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 622              	 .loc 1 288 0
 623 0060 0024     	 mov r4,#0
 624              	.LVL51:
 625              	.L35:
 316:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         }
 317:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 318:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 319:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 320:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     return xNeedPoll;
 321:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 626              	 .loc 1 321 0
 627 0062 201C     	 mov r0,r4
 628              	 
 629              	.LVL52:
 630 0064 10BD     	 pop {r4,pc}
 631              	.L42:
 632 0066 C046     	 .align 2
 633              	.L41:
 634 0068 00000000 	 .word .LANCHOR4
 635 006c 00000000 	 .word .LANCHOR3
 636 0070 00000000 	 .word .LANCHOR2
 637              	 .cfi_endproc
 638              	.LFE106:
 640              	 .section .text.xMBRTUTimerT35Expired,"ax",%progbits
 641              	 .align 2
 642              	 .global xMBRTUTimerT35Expired
 643              	 .code 16
 644              	 .thumb_func
 646              	xMBRTUTimerT35Expired:
 647              	.LFB107:
 322:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 323:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** BOOL
 324:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** xMBRTUTimerT35Expired( void )
 325:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** {
 648              	 .loc 1 325 0
 649              	 .cfi_startproc
 650 0000 10B5     	 push {r4,lr}
 651              	.LCFI8:
 652              	 .cfi_def_cfa_offset 8
 653              	 .cfi_offset 4,-8
 654              	 .cfi_offset 14,-4
 655              	.LVL53:
 326:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     BOOL            xNeedPoll = FALSE;
 327:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 328:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     switch ( eRcvState )
 656              	 .loc 1 328 0
 657 0002 0D4B     	 ldr r3,.L49
 658 0004 1B78     	 ldrb r3,[r3]
 659 0006 DBB2     	 uxtb r3,r3
 660 0008 002B     	 cmp r3,#0
 661 000a 02D0     	 beq .L45
 662 000c 022B     	 cmp r3,#2
 663 000e 05D0     	 beq .L46
 664 0010 09E0     	 b .L48
 665              	.L45:
 329:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     {
 330:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Timer t35 expired. Startup phase is finished. */
 331:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_RX_INIT:
 332:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         xNeedPoll = xMBPortEventPost( EV_READY );
 666              	 .loc 1 332 0
 667 0012 0020     	 mov r0,#0
 668 0014 FFF7FEFF 	 bl xMBPortEventPost
 669              	.LVL54:
 670 0018 041C     	 mov r4,r0
 671              	.LVL55:
 333:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 672              	 .loc 1 333 0
 673 001a 05E0     	 b .L44
 674              	.LVL56:
 675              	.L46:
 334:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 335:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* A frame was received and t35 expired. Notify the listener that
 336:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****          * a new frame was received. */
 337:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_RX_RCV:
 338:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 676              	 .loc 1 338 0
 677 001c 0120     	 mov r0,#1
 678 001e FFF7FEFF 	 bl xMBPortEventPost
 679              	.LVL57:
 680 0022 041C     	 mov r4,r0
 681              	.LVL58:
 339:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 682              	 .loc 1 339 0
 683 0024 00E0     	 b .L44
 684              	.LVL59:
 685              	.L48:
 326:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 686              	 .loc 1 326 0
 687 0026 0024     	 mov r4,#0
 688              	.LVL60:
 689              	.L44:
 340:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 341:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* An error occured while receiving the frame. */
 342:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     case STATE_RX_ERROR:
 343:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         break;
 344:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 345:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         /* Function called in an illegal state. */
 346:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     default:
 347:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****         assert( ( eRcvState == STATE_RX_INIT ) ||
 348:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****                 ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
 349:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     }
 350:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 351:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     vMBPortTimersDisable(  );
 690              	 .loc 1 351 0
 691 0028 FFF7FEFF 	 bl vMBPortTimersDisable
 692              	.LVL61:
 352:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     eRcvState = STATE_RX_IDLE;
 693              	 .loc 1 352 0
 694 002c 0122     	 mov r2,#1
 695 002e 024B     	 ldr r3,.L49
 696 0030 1A70     	 strb r2,[r3]
 353:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** 
 354:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c ****     return xNeedPoll;
 355:../freemodbus-v1.5.0/modbus/rtu/mbrtu.c **** }
 697              	 .loc 1 355 0
 698 0032 201C     	 mov r0,r4
 699              	 
 700              	.LVL62:
 701 0034 10BD     	 pop {r4,pc}
 702              	.L50:
 703 0036 C046     	 .align 2
 704              	.L49:
 705 0038 00000000 	 .word .LANCHOR0
 706              	 .cfi_endproc
 707              	.LFE107:
 709              	 .comm ucRTUBuf,256,4
 710              	 .section .bss.pucSndBufferCur,"aw",%nobits
 711              	 .align 2
 712              	 .set .LANCHOR2,.+0
 715              	pucSndBufferCur:
 716 0000 00000000 	 .space 4
 717              	 .section .bss.usSndBufferCount,"aw",%nobits
 718              	 .align 1
 719              	 .set .LANCHOR3,.+0
 722              	usSndBufferCount:
 723 0000 0000     	 .space 2
 724              	 .section .bss.usRcvBufferPos,"aw",%nobits
 725              	 .align 1
 726              	 .set .LANCHOR1,.+0
 729              	usRcvBufferPos:
 730 0000 0000     	 .space 2
 731              	 .section .bss.eSndState,"aw",%nobits
 732              	 .set .LANCHOR4,.+0
 735              	eSndState:
 736 0000 00       	 .space 1
 737              	 .section .bss.eRcvState,"aw",%nobits
 738              	 .set .LANCHOR0,.+0
 741              	eRcvState:
 742 0000 00       	 .space 1
 743              	 .text
 744              	.Letext0:
 745              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 746              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 747              	 .file 5 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/freemodbus-v1.5.0/port/port.h"
 748              	 .file 6 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/freemodbus-v1.5.0/modbus/include/mbport.h"
 749              	 .file 7 "C:/Projekte/Infineon_Dave/eHaJo/FlapFlap/freemodbus-v1.5.0/modbus/include/mb.h"
 750              	 .file 8 "../freemodbus-v1.5.0/modbus/rtu/mbcrc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mbrtu.c
    {standard input}:19     .text.eMBRTUInit:00000000 $t
    {standard input}:24     .text.eMBRTUInit:00000000 eMBRTUInit
    {standard input}:110    .text.eMBRTUInit:00000040 $d
    {standard input}:115    .text.eMBRTUStart:00000000 $t
    {standard input}:120    .text.eMBRTUStart:00000000 eMBRTUStart
    {standard input}:165    .text.eMBRTUStart:0000001c $d
    {standard input}:170    .text.eMBRTUStop:00000000 $t
    {standard input}:175    .text.eMBRTUStop:00000000 eMBRTUStop
    {standard input}:217    .text.eMBRTUReceive:00000000 $t
    {standard input}:222    .text.eMBRTUReceive:00000000 eMBRTUReceive
    {standard input}:305    .text.eMBRTUReceive:00000044 $d
                            *COM*:00000100 ucRTUBuf
    {standard input}:311    .text.eMBRTUSend:00000000 $t
    {standard input}:316    .text.eMBRTUSend:00000000 eMBRTUSend
    {standard input}:417    .text.eMBRTUSend:00000064 $d
    {standard input}:426    .text.xMBRTUReceiveFSM:00000000 $t
    {standard input}:431    .text.xMBRTUReceiveFSM:00000000 xMBRTUReceiveFSM
    {standard input}:534    .text.xMBRTUReceiveFSM:00000084 $d
    {standard input}:541    .text.xMBRTUTransmitFSM:00000000 $t
    {standard input}:546    .text.xMBRTUTransmitFSM:00000000 xMBRTUTransmitFSM
    {standard input}:634    .text.xMBRTUTransmitFSM:00000068 $d
    {standard input}:641    .text.xMBRTUTimerT35Expired:00000000 $t
    {standard input}:646    .text.xMBRTUTimerT35Expired:00000000 xMBRTUTimerT35Expired
    {standard input}:705    .text.xMBRTUTimerT35Expired:00000038 $d
    {standard input}:711    .bss.pucSndBufferCur:00000000 $d
    {standard input}:715    .bss.pucSndBufferCur:00000000 pucSndBufferCur
    {standard input}:718    .bss.usSndBufferCount:00000000 $d
    {standard input}:722    .bss.usSndBufferCount:00000000 usSndBufferCount
    {standard input}:725    .bss.usRcvBufferPos:00000000 $d
    {standard input}:729    .bss.usRcvBufferPos:00000000 usRcvBufferPos
    {standard input}:735    .bss.eSndState:00000000 eSndState
    {standard input}:736    .bss.eSndState:00000000 $d
    {standard input}:741    .bss.eRcvState:00000000 eRcvState
    {standard input}:742    .bss.eRcvState:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
xMBPortSerialInit
xMBPortTimersInit
vMBPortSerialEnable
vMBPortTimersEnable
vMBPortTimersDisable
usMBCRC16
xMBPortSerialGetByte
xMBPortSerialPutByte
xMBPortEventPost
